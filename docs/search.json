[
  {
    "objectID": "w07-1/slides.html#code-blocks",
    "href": "w07-1/slides.html#code-blocks",
    "title": "Control Flow in R",
    "section": "Code Blocks",
    "text": "Code Blocks\n\n\nPython uses Indentation ‚Üí‚Üí\n\nfor i in range(5):\n  print(\"Hello\")\n  print(\"Please run this code 5 times\")\n\nHello\nPlease run this code 5 times\nHello\nPlease run this code 5 times\nHello\nPlease run this code 5 times\nHello\nPlease run this code 5 times\nHello\nPlease run this code 5 times\n\n\n\nR uses curly braces {}\n\nfor (i in 1:5) {\n  print(\"Hello\")\n  print(\"Please run this code 5 times\")\n}\n\n[1] \"Hello\"\n[1] \"Please run this code 5 times\"\n[1] \"Hello\"\n[1] \"Please run this code 5 times\"\n[1] \"Hello\"\n[1] \"Please run this code 5 times\"\n[1] \"Hello\"\n[1] \"Please run this code 5 times\"\n[1] \"Hello\"\n[1] \"Please run this code 5 times\""
  },
  {
    "objectID": "w07-1/slides.html#if-statements",
    "href": "w07-1/slides.html#if-statements",
    "title": "Control Flow in R",
    "section": "If Statements",
    "text": "If Statements\n\n\n\nimport datetime\ncur_time = datetime.datetime.now()\nprint(f\"The current time is {cur_time.hour}:{cur_time.minute}\")\n\nThe current time is 2:58\n\nif cur_time.hour &lt; 12:\n    print(\"Good morning!\")\nelif cur_time.hour &lt; 18:\n    print(\"Good afternoon!\")\nelse:\n    print(\"Good evening!\")\n\nGood morning!\n\n\n\n\nlibrary(lubridate)\ncur_time &lt;- Sys.time()\nwriteLines(paste0(\n    \"The current time is \",\n    hour(cur_time),\":\",\n    minute(cur_time)\n))\n\nThe current time is 2:58\n\nif (hour(cur_time) &lt; 12) {\n    print(\"Good morning!\")\n} else if (hour(cur_time) &lt; 18) {\n    print(\"Good afternoon!\")\n} else {\n    print(\"Good evening!\")\n}\n\n[1] \"Good morning!\"\n\n\n\n\n(We‚Äôll learn about lubridate  soon!)"
  },
  {
    "objectID": "w07-1/slides.html#the-ternary-operator",
    "href": "w07-1/slides.html#the-ternary-operator",
    "title": "Control Flow in R",
    "section": "The Ternary Operator",
    "text": "The Ternary Operator\n\n\n\n\"morning\" if cur_time.hour &lt; 12 else \"evening\"\n\n'morning'\n\n\n\n\nifelse(\n    hour(cur_time) &lt; 12,\n    \"morning\",\n    \"evening\"\n)\n\n[1] \"morning\""
  },
  {
    "objectID": "w07-1/slides.html#for-loops-the-software-engineers-bread-and-butter",
    "href": "w07-1/slides.html#for-loops-the-software-engineers-bread-and-butter",
    "title": "Control Flow in R",
    "section": "For Loops: The Software Engineer‚Äôs Bread and Butter",
    "text": "For Loops: The Software Engineer‚Äôs Bread and Butter\n\nMany different ways to loop (find one that clicks for you!)\nFor loops often the ‚Äúdefault‚Äù approach (because of C)\n\n\n\n\nfor i in range(1, 10):\n    print(i)\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n\nfor (i in 1:10) {\n    print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10"
  },
  {
    "objectID": "w07-1/slides.html#vectorized-operations-the-data-scientists-bread-and-margarine",
    "href": "w07-1/slides.html#vectorized-operations-the-data-scientists-bread-and-margarine",
    "title": "Control Flow in R",
    "section": "Vectorized Operations: The Data Scientist‚Äôs Bread and Margarine",
    "text": "Vectorized Operations: The Data Scientist‚Äôs Bread and Margarine\n\nYou‚Äôve been hired as the lead data scientist for a food delivery service (congrats!)\nYou‚Äôre given data on (a) miles traveled and (b) hours driven, for each driver\nYour goal: find the distribution of average speeds!\n\n\n\n\nimport pandas as pd\nmiles_data = [11, 52, 13]\nhrs_data = [2, 3, 5]\ndriver_df = pd.DataFrame({\n    'miles': miles_data,\n    'hrs': hrs_data\n})\nprint(driver_df.to_markdown())\n\n\n\n\nmiles\nhrs\n\n\n\n\n0\n11\n2\n\n\n1\n52\n3\n\n\n2\n13\n5\n\n\n\n\n\n\nmiles_data &lt;- c(11, 52, 13)\nhrs_data &lt;- c(2, 3, 5)\ndriver_df &lt;- data.frame(\n    miles=miles_data,\n    hrs=hrs_data\n)\ndriver_df\n\n\n\n\n\nmiles\nhrs\n\n\n\n\n11\n2\n\n\n52\n3\n\n\n13\n5"
  },
  {
    "objectID": "w07-1/slides.html#the-loop-approach",
    "href": "w07-1/slides.html#the-loop-approach",
    "title": "Control Flow in R",
    "section": "The Loop Approach ",
    "text": "The Loop Approach \n\nfor (i in 1:nrow(driver_df)) {\n  driver_df[i, 'mph'] &lt;- driver_df[i, 'miles'] / driver_df[i, 'hrs']\n}\ndriver_df\n\n\n\n\n\nmiles\nhrs\nmph\n\n\n\n\n11\n2\n5.50000\n\n\n52\n3\n17.33333\n\n\n13\n5\n2.60000\n\n\n\n\n\n\n\nIt works! But CPUs have hyper-optimized linear algebra\n\\(\\implies\\) Operations on a length-1000 vector significantly faster than a loop performing an operation 1000 times"
  },
  {
    "objectID": "w07-1/slides.html#the-vectorized-approach",
    "href": "w07-1/slides.html#the-vectorized-approach",
    "title": "Control Flow in R",
    "section": "The Vectorized Approach üíØ",
    "text": "The Vectorized Approach üíØ\n\n\n\ndriver_df['mph'] = driver_df['miles'] / driver_df['hrs']\nprint(driver_df.to_markdown())\n\n\n\n\nmiles\nhrs\nmph\n\n\n\n\n0\n11\n2\n5.5\n\n\n1\n52\n3\n17.3333\n\n\n2\n13\n5\n2.6\n\n\n\n\n\n\ndriver_df['mph'] = driver_df$miles / driver_df$hrs\ndriver_df\n\n\n\n\n\nmiles\nhrs\nmph\n\n\n\n\n11\n2\n5.50000\n\n\n52\n3\n17.33333\n\n\n13\n5\n2.60000"
  },
  {
    "objectID": "w07-1/slides.html#vectorizing-your-brain",
    "href": "w07-1/slides.html#vectorizing-your-brain",
    "title": "Control Flow in R",
    "section": "Vectorizing Your Brain",
    "text": "Vectorizing Your Brain\n\nThinking in terms of vectors will be annoying at first! Many common algorithms are ‚Äúnaturally‚Äù described via loops‚Ä¶\nIt will pay off over the course of your career, I promise!\n\n\n\n\nN &lt;- 50000\nset.seed(2024)\nvec_start_time &lt;- Sys.time()\nbig_vec1 &lt;- rnorm(N, 0, 1)\nbig_vec2 &lt;- rnorm(N, 0, 1)\nproduct &lt;- big_vec1 * big_vec2\nvec_end_time &lt;- Sys.time()\nvec_end_time - vec_start_time\n\nTime difference of 0.00355196 secs\n\n\n\n\nloop_start_time &lt;- Sys.time()\nproduct &lt;- c()\nfor (i in 1:N) {\n  elt1 &lt;- big_vec1[i]\n  elt2 &lt;- big_vec2[i]\n  product &lt;- c(product, elt1 * elt2)\n}\nloop_end_time &lt;- Sys.time()\nloop_end_time - loop_start_time\n\nTime difference of 2.359036 secs\n\n\n\n\n\n(For \\(N = 100K\\), 0.006 vs.¬†9.08 seconds!)"
  },
  {
    "objectID": "w07-1/slides.html#how-is-it-that-much-faster",
    "href": "w07-1/slides.html#how-is-it-that-much-faster",
    "title": "Control Flow in R",
    "section": "How is it That Much Faster?",
    "text": "How is it That Much Faster?\n\nThe long answer: take DSAN 5500 üòú The short answer:\nSimple math operations (addition, multiplication) are easily parallelized under the hood;\nSequential memory reads are significantly faster than non-sequential reads‚Äîvectors can be stored in contiguous ‚Äúchunks‚Äù of memory that computer can rapidly scan over\n\n(Think of how it‚Äôs easier to count people standing in a line than people scattered around a room!)"
  },
  {
    "objectID": "w07-1/slides.html#anonymous-functions",
    "href": "w07-1/slides.html#anonymous-functions",
    "title": "Control Flow in R",
    "section": "Anonymous Functions",
    "text": "Anonymous Functions\n\nIn Python you declare the name of a function using def\nIn R, you make the function without a name, then assign it to a variable:\n\n\n\n\ndef multiply_by_5(num):\n  return num * 5\nmultiply_by_5(10)\n\n50\n\n\n\n\nmultiply_by_5 &lt;- function(num) {\n  return(num * 5)\n}\nmultiply_by_5(10)\n\n[1] 50\n\n\n\n\n\n(Python also has anonymous functions, via lambda:)\n\n\ndouble_it = lambda x: x * 2\ndouble_it(10)\n\n20"
  },
  {
    "objectID": "w07-1/slides.html#variable-scope",
    "href": "w07-1/slides.html#variable-scope",
    "title": "Control Flow in R",
    "section": "Variable Scope",
    "text": "Variable Scope\n\nHuge point (especially for Week 7 Assignment)!\nThink of functions as ‚Äúmini-programs‚Äù, where variables (including arguments) get created when the function starts and then destroyed when the function finishes. Compare:\n\n\n\n\nval &lt;- c(1, 2, 3)\nprint(val)\n\n[1] 1 2 3\n\nupdate_val &lt;- function() {\n  val &lt;- val * 5\n}\nupdate_val()\nprint(val) # üòµ\n\n[1] 1 2 3\n\n\n\n\nval &lt;- c(1, 2, 3)\nprint(val)\n\n[1] 1 2 3\n\ncompute_new_val &lt;- function(orig_val) {\n  return(orig_val * 5)\n}\nval &lt;- compute_new_val(val)\nprint(val) # üòé\n\n[1]  5 10 15"
  },
  {
    "objectID": "w07-1/slides.html#positional-vs.-keyword-arguments",
    "href": "w07-1/slides.html#positional-vs.-keyword-arguments",
    "title": "Control Flow in R",
    "section": "Positional vs.¬†Keyword Arguments",
    "text": "Positional vs.¬†Keyword Arguments\n\nJust like Python, R functions can accept two types of arguments‚Ä¶\n\n\n\nPositional arguments are required (function call will produce error if any positional argument is missing)\n\ndiv_by_2 &lt;- function(num) {\n  return(num / 2)\n}\ndiv_by_2(11)\n\n[1] 5.5\n\n\n\nKeyword arguments are optional\n\ndiv_by_2 &lt;- function(num, round=FALSE) {\n  div_result &lt;- num / 2\n  final_result &lt;- ifelse(round,\n    round(div_result),\n    div_result\n  )\n  return(final_result)\n}\ndiv_by_2(11, round=TRUE)\n\n[1] 6"
  },
  {
    "objectID": "w07-1/slides.html#applying-functions-to-vectors",
    "href": "w07-1/slides.html#applying-functions-to-vectors",
    "title": "Control Flow in R",
    "section": "Applying Functions to Vectors",
    "text": "Applying Functions to Vectors\n\nWe‚Äôve been ‚Äúmanually‚Äù calling functions, like func(arg)\nWhat if we want to apply a function to a vector of elements? Ex: capitalize a big list of names\n\n\n\n\nBase R provides a family of apply() functions: sapply() for vectors; lapply() for lists; apply() for matrices (requires specifying axis: columns or rows)\n\n\n\ncapitalize &lt;- function(name) {\n  return(tools::toTitleCase(name))\n}\ncapitalize(\"jeff\")\n\n[1] \"Jeff\"\n\nnames &lt;- c(\"ali\", \"boris\", \"chad\")\nsapply(names, capitalize)\n\n    ali   boris    chad \n  \"Ali\" \"Boris\"  \"Chad\" \n\n\n\n\n\n\n\n2024 DSAN Bootcamp W07-1: Control Flow"
  },
  {
    "objectID": "w07-1/index.html",
    "href": "w07-1/index.html",
    "title": "Control Flow in R",
    "section": "",
    "text": "Open slides in new window ‚Üí"
  },
  {
    "objectID": "w07-1/index.html#code-blocks",
    "href": "w07-1/index.html#code-blocks",
    "title": "Control Flow in R",
    "section": "Code Blocks",
    "text": "Code Blocks\n\n\nPython uses Indentation ‚Üí‚Üí\n\nfor i in range(5):\n  print(\"Hello\")\n  print(\"Please run this code 5 times\")\n\nHello\nPlease run this code 5 times\nHello\nPlease run this code 5 times\nHello\nPlease run this code 5 times\nHello\nPlease run this code 5 times\nHello\nPlease run this code 5 times\n\n\n\nR uses curly braces {}\n\nfor (i in 1:5) {\n  print(\"Hello\")\n  print(\"Please run this code 5 times\")\n}\n\n[1] \"Hello\"\n[1] \"Please run this code 5 times\"\n[1] \"Hello\"\n[1] \"Please run this code 5 times\"\n[1] \"Hello\"\n[1] \"Please run this code 5 times\"\n[1] \"Hello\"\n[1] \"Please run this code 5 times\"\n[1] \"Hello\"\n[1] \"Please run this code 5 times\""
  },
  {
    "objectID": "w07-1/index.html#if-statements",
    "href": "w07-1/index.html#if-statements",
    "title": "Control Flow in R",
    "section": "If Statements",
    "text": "If Statements\n\n\n\nimport datetime\ncur_time = datetime.datetime.now()\nprint(f\"The current time is {cur_time.hour}:{cur_time.minute}\")\n\nThe current time is 2:58\n\nif cur_time.hour &lt; 12:\n    print(\"Good morning!\")\nelif cur_time.hour &lt; 18:\n    print(\"Good afternoon!\")\nelse:\n    print(\"Good evening!\")\n\nGood morning!\n\n\n\n\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\ncur_time &lt;- Sys.time()\nwriteLines(paste0(\n    \"The current time is \",\n    hour(cur_time),\":\",\n    minute(cur_time)\n))\n\nThe current time is 2:58\n\nif (hour(cur_time) &lt; 12) {\n    print(\"Good morning!\")\n} else if (hour(cur_time) &lt; 18) {\n    print(\"Good afternoon!\")\n} else {\n    print(\"Good evening!\")\n}\n\n[1] \"Good morning!\"\n\n\n\n\n(We‚Äôll learn about lubridate  soon!)"
  },
  {
    "objectID": "w07-1/index.html#the-ternary-operator",
    "href": "w07-1/index.html#the-ternary-operator",
    "title": "Control Flow in R",
    "section": "The Ternary Operator",
    "text": "The Ternary Operator\n\n\n\n\"morning\" if cur_time.hour &lt; 12 else \"evening\"\n\n'morning'\n\n\n\n\nifelse(\n    hour(cur_time) &lt; 12,\n    \"morning\",\n    \"evening\"\n)\n\n[1] \"morning\""
  },
  {
    "objectID": "w07-1/index.html#for-loops-the-software-engineers-bread-and-butter",
    "href": "w07-1/index.html#for-loops-the-software-engineers-bread-and-butter",
    "title": "Control Flow in R",
    "section": "For Loops: The Software Engineer‚Äôs Bread and Butter",
    "text": "For Loops: The Software Engineer‚Äôs Bread and Butter\n\nMany different ways to loop (find one that clicks for you!)\nFor loops often the ‚Äúdefault‚Äù approach (because of C)\n\n\n\n\nfor i in range(1, 10):\n    print(i)\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n\nfor (i in 1:10) {\n    print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10"
  },
  {
    "objectID": "w07-1/index.html#vectorized-operations-the-data-scientists-bread-and-margarine",
    "href": "w07-1/index.html#vectorized-operations-the-data-scientists-bread-and-margarine",
    "title": "Control Flow in R",
    "section": "Vectorized Operations: The Data Scientist‚Äôs Bread and Margarine",
    "text": "Vectorized Operations: The Data Scientist‚Äôs Bread and Margarine\n\nYou‚Äôve been hired as the lead data scientist for a food delivery service (congrats!)\nYou‚Äôre given data on (a) miles traveled and (b) hours driven, for each driver\nYour goal: find the distribution of average speeds!\n\n\n\n\nimport pandas as pd\nmiles_data = [11, 52, 13]\nhrs_data = [2, 3, 5]\ndriver_df = pd.DataFrame({\n    'miles': miles_data,\n    'hrs': hrs_data\n})\nprint(driver_df.to_markdown())\n\n\n\n\nmiles\nhrs\n\n\n\n\n0\n11\n2\n\n\n1\n52\n3\n\n\n2\n13\n5\n\n\n\n\n\n\nmiles_data &lt;- c(11, 52, 13)\nhrs_data &lt;- c(2, 3, 5)\ndriver_df &lt;- data.frame(\n    miles=miles_data,\n    hrs=hrs_data\n)\ndriver_df\n\n\n\n\n\nmiles\nhrs\n\n\n\n\n11\n2\n\n\n52\n3\n\n\n13\n5"
  },
  {
    "objectID": "w07-1/index.html#the-loop-approach",
    "href": "w07-1/index.html#the-loop-approach",
    "title": "Control Flow in R",
    "section": "The Loop Approach ",
    "text": "The Loop Approach \n\nfor (i in 1:nrow(driver_df)) {\n  driver_df[i, 'mph'] &lt;- driver_df[i, 'miles'] / driver_df[i, 'hrs']\n}\ndriver_df\n\n\n\n\n\nmiles\nhrs\nmph\n\n\n\n\n11\n2\n5.50000\n\n\n52\n3\n17.33333\n\n\n13\n5\n2.60000\n\n\n\n\n\n\n\nIt works! But CPUs have hyper-optimized linear algebra\n\\(\\implies\\) Operations on a length-1000 vector significantly faster than a loop performing an operation 1000 times"
  },
  {
    "objectID": "w07-1/index.html#the-vectorized-approach",
    "href": "w07-1/index.html#the-vectorized-approach",
    "title": "Control Flow in R",
    "section": "The Vectorized Approach üíØ",
    "text": "The Vectorized Approach üíØ\n\n\n\ndriver_df['mph'] = driver_df['miles'] / driver_df['hrs']\nprint(driver_df.to_markdown())\n\n\n\n\nmiles\nhrs\nmph\n\n\n\n\n0\n11\n2\n5.5\n\n\n1\n52\n3\n17.3333\n\n\n2\n13\n5\n2.6\n\n\n\n\n\n\ndriver_df['mph'] = driver_df$miles / driver_df$hrs\ndriver_df\n\n\n\n\n\nmiles\nhrs\nmph\n\n\n\n\n11\n2\n5.50000\n\n\n52\n3\n17.33333\n\n\n13\n5\n2.60000"
  },
  {
    "objectID": "w07-1/index.html#vectorizing-your-brain",
    "href": "w07-1/index.html#vectorizing-your-brain",
    "title": "Control Flow in R",
    "section": "Vectorizing Your Brain",
    "text": "Vectorizing Your Brain\n\nThinking in terms of vectors will be annoying at first! Many common algorithms are ‚Äúnaturally‚Äù described via loops‚Ä¶\nIt will pay off over the course of your career, I promise!\n\n\n\n\nN &lt;- 50000\nset.seed(2024)\nvec_start_time &lt;- Sys.time()\nbig_vec1 &lt;- rnorm(N, 0, 1)\nbig_vec2 &lt;- rnorm(N, 0, 1)\nproduct &lt;- big_vec1 * big_vec2\nvec_end_time &lt;- Sys.time()\nvec_end_time - vec_start_time\n\nTime difference of 0.003690004 secs\n\n\n\n\nloop_start_time &lt;- Sys.time()\nproduct &lt;- c()\nfor (i in 1:N) {\n  elt1 &lt;- big_vec1[i]\n  elt2 &lt;- big_vec2[i]\n  product &lt;- c(product, elt1 * elt2)\n}\nloop_end_time &lt;- Sys.time()\nloop_end_time - loop_start_time\n\nTime difference of 2.334874 secs\n\n\n\n\n\n(For \\(N = 100K\\), 0.006 vs.¬†9.08 seconds!)"
  },
  {
    "objectID": "w07-1/index.html#how-is-it-that-much-faster",
    "href": "w07-1/index.html#how-is-it-that-much-faster",
    "title": "Control Flow in R",
    "section": "How is it That Much Faster?",
    "text": "How is it That Much Faster?\n\nThe long answer: take DSAN 5500 üòú The short answer:\nSimple math operations (addition, multiplication) are easily parallelized under the hood;\nSequential memory reads are significantly faster than non-sequential reads‚Äîvectors can be stored in contiguous ‚Äúchunks‚Äù of memory that computer can rapidly scan over\n\n(Think of how it‚Äôs easier to count people standing in a line than people scattered around a room!)"
  },
  {
    "objectID": "w07-1/index.html#anonymous-functions",
    "href": "w07-1/index.html#anonymous-functions",
    "title": "Control Flow in R",
    "section": "Anonymous Functions",
    "text": "Anonymous Functions\n\nIn Python you declare the name of a function using def\nIn R, you make the function without a name, then assign it to a variable:\n\n\n\n\ndef multiply_by_5(num):\n  return num * 5\nmultiply_by_5(10)\n\n50\n\n\n\n\nmultiply_by_5 &lt;- function(num) {\n  return(num * 5)\n}\nmultiply_by_5(10)\n\n[1] 50\n\n\n\n\n\n(Python also has anonymous functions, via lambda:)\n\n\ndouble_it = lambda x: x * 2\ndouble_it(10)\n\n20"
  },
  {
    "objectID": "w07-1/index.html#variable-scope",
    "href": "w07-1/index.html#variable-scope",
    "title": "Control Flow in R",
    "section": "Variable Scope",
    "text": "Variable Scope\n\nHuge point (especially for Week 7 Assignment)!\nThink of functions as ‚Äúmini-programs‚Äù, where variables (including arguments) get created when the function starts and then destroyed when the function finishes. Compare:\n\n\n\n\n\nCode\nval &lt;- c(1, 2, 3)\nprint(val)\n\n\n[1] 1 2 3\n\n\nCode\nupdate_val &lt;- function() {\n  val &lt;- val * 5\n}\nupdate_val()\nprint(val) # üòµ\n\n\n[1] 1 2 3\n\n\n\n\n\nCode\nval &lt;- c(1, 2, 3)\nprint(val)\n\n\n[1] 1 2 3\n\n\nCode\ncompute_new_val &lt;- function(orig_val) {\n  return(orig_val * 5)\n}\nval &lt;- compute_new_val(val)\nprint(val) # üòé\n\n\n[1]  5 10 15"
  },
  {
    "objectID": "w07-1/index.html#positional-vs.-keyword-arguments",
    "href": "w07-1/index.html#positional-vs.-keyword-arguments",
    "title": "Control Flow in R",
    "section": "Positional vs.¬†Keyword Arguments",
    "text": "Positional vs.¬†Keyword Arguments\n\nJust like Python, R functions can accept two types of arguments‚Ä¶\n\n\n\nPositional arguments are required (function call will produce error if any positional argument is missing)\n\ndiv_by_2 &lt;- function(num) {\n  return(num / 2)\n}\ndiv_by_2(11)\n\n[1] 5.5\n\n\n\nKeyword arguments are optional\n\ndiv_by_2 &lt;- function(num, round=FALSE) {\n  div_result &lt;- num / 2\n  final_result &lt;- ifelse(round,\n    round(div_result),\n    div_result\n  )\n  return(final_result)\n}\ndiv_by_2(11, round=TRUE)\n\n[1] 6"
  },
  {
    "objectID": "w07-1/index.html#applying-functions-to-vectors",
    "href": "w07-1/index.html#applying-functions-to-vectors",
    "title": "Control Flow in R",
    "section": "Applying Functions to Vectors",
    "text": "Applying Functions to Vectors\n\nWe‚Äôve been ‚Äúmanually‚Äù calling functions, like func(arg)\nWhat if we want to apply a function to a vector of elements? Ex: capitalize a big list of names\n\n\n\n\nBase R provides a family of apply() functions: sapply() for vectors; lapply() for lists; apply() for matrices (requires specifying axis: columns or rows)\n\n\n\ncapitalize &lt;- function(name) {\n  return(tools::toTitleCase(name))\n}\ncapitalize(\"jeff\")\n\n[1] \"Jeff\"\n\nnames &lt;- c(\"ali\", \"boris\", \"chad\")\nsapply(names, capitalize)\n\n    ali   boris    chad \n  \"Ali\" \"Boris\"  \"Chad\""
  },
  {
    "objectID": "w06-3/slides.html#the-most-immediately-jarring-differences",
    "href": "w06-3/slides.html#the-most-immediately-jarring-differences",
    "title": "Introduction to R",
    "section": "The Most Immediately-Jarring Differences",
    "text": "The Most Immediately-Jarring Differences\n\n\n\n\n\nPython\n\n\n\nR\n\n\n\n\n\nValue Assignment\n\n&lt;varname&gt; = &lt;value&gt;\n\nx = 3\nx\n\n3\n\n\n\n&lt;varname&gt; &lt;- &lt;value&gt;\n\nx &lt;- 3\nx\n\n[1] 3\n\n\n\n\n\n\nIndices\n\nStart from 0\n\nmy_list = [\"a\", \"b\", \"c\"]\nmy_list[0] # Accesses first element\n\n'a'\n\nmy_list[1] # Accesses second element\n\n'b'\n\n\n\nStart from 1\n\nmy_vector &lt;- c(\"a\", \"b\", \"c\")\nmy_vector[0] # Invalid index in R!\n\ncharacter(0)\n\nmy_vector[1] # Accesses first element\n\n[1] \"a\"\n\nmy_vector[2] # Accesses second element\n\n[1] \"b\"\n\n\n\n\n\n\nBooleans\n\nTrue, False\n\nresult = 2 * 2 == 4\nresult\n\nTrue\n\n\n\nTRUE (or T), FALSE (or F)\n\nresult &lt;- 2 * 2 == 4\nresult\n\n[1] TRUE"
  },
  {
    "objectID": "w06-3/slides.html#everything-is-a-vector",
    "href": "w06-3/slides.html#everything-is-a-vector",
    "title": "Introduction to R",
    "section": "Everything is a Vector",
    "text": "Everything is a Vector\n\nAlthough there are R equivalents for most Python data types, one big difference is that‚Ä¶\nIn R, everything is a vector!\n\n\n\nNumbers\n\nx &lt;- 3\nprint(x)\n\n[1] 3\n\nclass(x)\n\n[1] \"numeric\"\n\nlength(x)\n\n[1] 1\n\n\n\nLength-1 Vectors\n\ny &lt;- c(3)\nprint(y)\n\n[1] 3\n\nclass(y)\n\n[1] \"numeric\"\n\nlength(y)\n\n[1] 1\n\n\n\nLength-N Vectors\n\nz &lt;- c(3, 4, 5)\nprint(z)\n\n[1] 3 4 5\n\nclass(z)\n\n[1] \"numeric\"\n\nlength(z)\n\n[1] 3"
  },
  {
    "objectID": "w06-3/slides.html#careful-with-basic-operators-like",
    "href": "w06-3/slides.html#careful-with-basic-operators-like",
    "title": "Introduction to R",
    "section": "Careful With ‚ÄúBasic‚Äù Operators Like +!",
    "text": "Careful With ‚ÄúBasic‚Äù Operators Like +!\n\nIf you‚Äôre used to Python, + feels like a natural way to combine things\nR forces you to think explicitly about combining (\\(\\neq\\) adding): more restrictive +\nFor strings:\n\n\nIn Python: + means concatenate\n\nmessage = \"Hi\" + \" \" + \"Jeff\"\nprint(message)\n\nHi Jeff\n\n\n\nIn R: + is not allowed!\n\nmy_message &lt;- \"Hi\" + \" \" + \"Jeff\"\n\nError in \"Hi\" + \" \": non-numeric argument to binary operator\n\n\n\n\nFor numeric lists‚Ä¶\n\n\nIn Python: + means concatenate\n\n[1, 2] + [3, 4]\n\n[1, 2, 3, 4]\n\n\n\nIn R: + means vector addition!\n\nc(1,2) + c(3,4)\n\n[1] 4 6"
  },
  {
    "objectID": "w06-3/slides.html#immensely-important-distinction",
    "href": "w06-3/slides.html#immensely-important-distinction",
    "title": "Introduction to R",
    "section": "Immensely Important Distinction",
    "text": "Immensely Important Distinction\n\nThroughout bootcamp, throughout DSAN, throughout your career, you‚Äôll use two different ‚Äúflavors‚Äù of R:\n\n\n\nBase R\n\nbase_df &lt;- data.frame(\n  x=c(1,2,3),\n  y=c(\"a\",\"b\",\"c\")\n)\nbase_df\n\n\n\n\n\nx\ny\n\n\n\n\n1\na\n\n\n2\nb\n\n\n3\nc\n\n\n\n\n\nclass(base_df)\n\n[1] \"data.frame\"\n\n\n\nTidyverse\n\nlibrary(tidyverse) # Imports \"tibble\" library\ntv_df &lt;- tribble(\n  ~x, ~y,\n  1, \"a\",\n  2, \"b\",\n  3, \"c\"\n)\ntv_df\n\n\n\n\n\nx\ny\n\n\n\n\n1\na\n\n\n2\nb\n\n\n3\nc\n\n\n\n\n\nclass(tv_df)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n\n\n\nNote: There are ways to do row-wise and column-wise table creation in both! The key difference here is just data.frame vs.¬†tibble"
  },
  {
    "objectID": "w06-3/slides.html#why-are-there-two-ways-to-do-everything",
    "href": "w06-3/slides.html#why-are-there-two-ways-to-do-everything",
    "title": "Introduction to R",
    "section": "Why Are There Two Ways to Do Everything?",
    "text": "Why Are There Two Ways to Do Everything?\n\nOne key reason: tidyverse built on the pipe operator |&gt;\nRecognition that data science often involves pipelines: chains of operations performed in sequence\n\nE.g., scrape data ‚Üí clean data ‚Üí save to DB\n\nBase R approach:\nresult &lt;- saveToDB(cleanData(scrapeData()))\nTidyverse approach:\nresult &lt;- scrapeData() |&gt; cleanData() |&gt; saveToDB()\nNow imagine pipelines used by giant companies, e.g., training Netflix‚Äôs recommendation engine!"
  },
  {
    "objectID": "w06-3/slides.html#good-news-and-bad-news",
    "href": "w06-3/slides.html#good-news-and-bad-news",
    "title": "Introduction to R",
    "section": "|>: Good News and Bad News",
    "text": "|&gt;: Good News and Bad News\n\nf() |&gt; g() just means: take the result of the call f() and pass it as the first argument to g()\nGood news: this means |&gt; is intuitively ‚Äúbackwards compatible‚Äù with many base R functions\nBad news: requires checking the first argument:\n\n\n\n\ngetSampleSize &lt;- function() {\n  return(20)\n}\ngetSampleSize() |&gt; rbinom(10, 0.5)\n\n [1] 7 7 6 6 6 5 3 6 5 4 3 4 6 4 6 8 7 5 5 5\n\n\n\n\ngetNumTrials &lt;- function() {\n  return(10)\n}\ngetNumTrials() |&gt; rbinom(100, 0.5)\n\n [1] 61 49 46 48 57 53 41 54 49 46\n\n\n\n\n[Quick Note:]\n\nIf you‚Äôve used R before, you may have seen the %&gt;% operator from tidyverse\n‚Ä¶It got so popular that it is now built into R (as of 2023) as |&gt;!\n\\(\\implies\\) Switch from %&gt;% to |&gt; for instant efficiency boost üòé"
  },
  {
    "objectID": "w06-3/slides.html#combining-strings",
    "href": "w06-3/slides.html#combining-strings",
    "title": "Introduction to R",
    "section": "Combining Strings",
    "text": "Combining Strings\n\nEarlier we saw how R doesn‚Äôt allow \"Hi\" + \" \" + \"Jeff\"‚Ä¶\nSo how do we combine strings?\npaste() and paste0()!\n\npaste(\"Hi\", \"Jeff\")\n\n[1] \"Hi Jeff\"\n\npaste0(\"Hi\", \" \", \"Jeff\")\n\n[1] \"Hi Jeff\""
  },
  {
    "objectID": "w06-3/slides.html#python-lists-leftrightarrow-r-vectors",
    "href": "w06-3/slides.html#python-lists-leftrightarrow-r-vectors",
    "title": "Introduction to R",
    "section": "Python Lists \\(\\leftrightarrow\\) R Vectors",
    "text": "Python Lists \\(\\leftrightarrow\\) R Vectors\n\nCreation\n\n\n\n\nmy_list = [1, 2, 3]\nmy_list\n\n[1, 2, 3]\n\n\n\n\nmy_vector &lt;- c(1, 2, 3)\nmy_vector\n\n[1] 1 2 3\n\n\n\n\n\nInsertion\n\n\n\n\nmy_list.append(4)\nmy_list\n\n[1, 2, 3, 4]\n\n\n\n\nmy_vector &lt;- c(my_vector, 4)\nmy_vector\n\n[1] 1 2 3 4\n\n\n\n\n\nReplicating Elements\n\n\n\n\nmy_list * 3\n\n[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n\n\n\n\nrep(my_vector, 3)\n\n [1] 1 2 3 4 1 2 3 4 1 2 3 4\n\n\n\n\n\nPython range() \\(\\leftrightarrow\\) R seq()\n\n\n\n\nlist(range(5, 10))\n\n[5, 6, 7, 8, 9]\n\n\n\n\nseq(5, 10)\n\n[1]  5  6  7  8  9 10"
  },
  {
    "objectID": "w06-3/slides.html#paste0-with-vectors",
    "href": "w06-3/slides.html#paste0-with-vectors",
    "title": "Introduction to R",
    "section": "paste0() with Vectors!",
    "text": "paste0() with Vectors!\n\nnames &lt;- c(\"Aaliya\", \"Brandon\", \"Cyrus\")\npaste0(names, collapse=\" \")\n\n[1] \"Aaliya Brandon Cyrus\"\n\npaste0(names, collapse=\", \")\n\n[1] \"Aaliya, Brandon, Cyrus\"\n\npaste(names, collapse=\", \")\n\n[1] \"Aaliya, Brandon, Cyrus\""
  },
  {
    "objectID": "w06-3/slides.html#semi-confusing-point-r-also-has-lists",
    "href": "w06-3/slides.html#semi-confusing-point-r-also-has-lists",
    "title": "Introduction to R",
    "section": "Semi-Confusing Point: R Also Has Lists‚Ä¶",
    "text": "Semi-Confusing Point: R Also Has Lists‚Ä¶\n\nRarely used, despite greater similarity to Python lists üòµ‚Äçüí´\nKey difference: all elements of a vector must have same type; elements of a list may have different types\n\nmy_list &lt;- list(\"A\", 2, TRUE)\nmy_list\n\n[[1]]\n[1] \"A\"\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] TRUE\n\n\n(Note how each element is a vector: character vector, integer vector, and boolean vector)"
  },
  {
    "objectID": "w06-3/slides.html#pandas-dataframe-leftrightarrow-r-data.frame",
    "href": "w06-3/slides.html#pandas-dataframe-leftrightarrow-r-data.frame",
    "title": "Introduction to R",
    "section": "Pandas DataFrame \\(\\leftrightarrow\\) R data.frame",
    "text": "Pandas DataFrame \\(\\leftrightarrow\\) R data.frame\n\n\n\nimport pandas as pd\nx_data = [1, 2, 3]\ny_data = [4, 5, 6]\ndf = pd.DataFrame({\n  'x': x_data, 'y': y_data\n})\nprint(df.to_markdown())\n\n\n\n\nx\ny\n\n\n\n\n0\n1\n4\n\n\n1\n2\n5\n\n\n2\n3\n6\n\n\n\n\n\n\nx_data &lt;- c(1, 2, 3)\ny_data &lt;- c(4, 5, 6)\ndf &lt;- data.frame(\n  x=x_data,\n  y=y_data\n)\ndf\n\n\n\n\n\nx\ny\n\n\n\n\n1\n4\n\n\n2\n5\n\n\n3\n6"
  },
  {
    "objectID": "w06-3/slides.html#the-inevitable-headaches-of-missing-data-in-python",
    "href": "w06-3/slides.html#the-inevitable-headaches-of-missing-data-in-python",
    "title": "Introduction to R",
    "section": "The Inevitable Headaches of Missing Data in Python",
    "text": "The Inevitable Headaches of Missing Data in Python\n\n\n Given a .csv with missing entries:\n\n\nmy_data.csv\n\nid,name,email\n0,jeff,jeff@jeff.com\n1,,nobody@no.com\n3,zayd,z@email.biz\n\n Python defaults to object columns with NaN (Not-a-Number) values\n\nimport pandas as pd\ndf = pd.read_csv(\"my_data.csv\")\ndf\n\n   id  name          email\n0   0  jeff  jeff@jeff.com\n1   1   NaN  nobody@no.com\n2   3  zayd    z@email.biz\n\ndf.dtypes\n\nid        int64\nname     object\nemail    object\ndtype: object\n\n\n\n Intuitive fix usually isn‚Äôt what you want:\n\ndf_bad = df.copy()\ndf_bad['name'] = df_bad['name'].astype(str)\ndf_bad\n\n   id  name          email\n0   0  jeff  jeff@jeff.com\n1   1   nan  nobody@no.com\n2   3  zayd    z@email.biz\n\ndf_bad.iloc[1]['name']\n\n'nan'\n\n\n This alternative approach ensures missing values are empty strings\n\ndf_better = df.copy()\ndf_better['name'] = df_better['name'].fillna('').astype(str)\ndf_better\n\n   id  name          email\n0   0  jeff  jeff@jeff.com\n1   1        nobody@no.com\n2   3  zayd    z@email.biz\n\ndf_better.iloc[1]['name']\n\n''"
  },
  {
    "objectID": "w06-3/slides.html#the-slightly-less-headachey-r-approach",
    "href": "w06-3/slides.html#the-slightly-less-headachey-r-approach",
    "title": "Introduction to R",
    "section": "The Slightly-Less-Headachey R Approach!",
    "text": "The Slightly-Less-Headachey R Approach!\n\n\nR reads missing values in character columns as empty strings by default\n\ndf &lt;- read.csv(\"my_data.csv\")\ndf\n\n\n\n\n\nid\nname\nemail\n\n\n\n\n0\njeff\njeff@jeff.com\n\n\n1\n\nnobody@no.com\n\n\n3\nzayd\nz@email.biz\n\n\n\n\n\ndf$name\n\n[1] \"jeff\" \"\"     \"zayd\"\n\n# We'll learn about sapply() next week!\nsapply(df, class)\n\n         id        name       email \n  \"integer\" \"character\" \"character\" \n\n\n\n‚Ä¶And also has a built-in NA value!\n\n\nmy_data_2.csv\n\nid,name,email,fav_num\n0,jeff,jeff@jeff.com,3.14\n1,,nobody@no.com,\n3,zayd,z@email.biz,11\n\n\ndf2 &lt;- read.csv(\"my_data_2.csv\")\ndf2\n\n\n\n\n\nid\nname\nemail\nfav_num\n\n\n\n\n0\njeff\njeff@jeff.com\n3.14\n\n\n1\n\nnobody@no.com\nNA\n\n\n3\nzayd\nz@email.biz\n11.00\n\n\n\n\n\nsapply(df2, class)\n\n         id        name       email     fav_num \n  \"integer\" \"character\" \"character\"   \"numeric\""
  },
  {
    "objectID": "w06-3/slides.html#bonus-built-in-matrices",
    "href": "w06-3/slides.html#bonus-built-in-matrices",
    "title": "Introduction to R",
    "section": "Bonus: Built-In Matrices",
    "text": "Bonus: Built-In Matrices\n\nFor data analysis (cleaning, plotting), data.frame is usually the way to go\nFor linear algebra (inverting, multiplying matrices)‚Ä¶\n\n\nUse 2D vectors!\n\nmy_matrix &lt;- matrix(\n  data=c(1, 2, 3, 4),\n  nrow=2, ncol=2, byrow=TRUE\n)\nmy_matrix\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\nclass(my_matrix)\n\n[1] \"matrix\" \"array\" \n\n\n\nBeware! Matrix multiply operator is %*%, NOT *:\n\nmy_matrix * my_matrix\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    9   16\n\nmy_matrix %*% my_matrix\n\n     [,1] [,2]\n[1,]    7   10\n[2,]   15   22"
  },
  {
    "objectID": "w06-3/slides.html#filtering-selecting-rows",
    "href": "w06-3/slides.html#filtering-selecting-rows",
    "title": "Introduction to R",
    "section": "Filtering (Selecting Rows)",
    "text": "Filtering (Selecting Rows)\n\nIn Base R, filtering involves two steps:\nFirst, create a boolean expression that will evaluate to TRUE for the rows/columns you want to keep, and FALSE otherwise\nThen, use it in the correct ‚Äúslot‚Äù of R‚Äôs access operator []:\nfiltered_df &lt;- df[&lt;row filter&gt;, &lt;column filter&gt;] # Note: Either (or both) can be left blank!\nR will go through each row, evaluate &lt;row filter&gt;, and keep the row if and only if &lt;row filter&gt; evaluates to TRUE\nExample: Selecting only rows with odd-numbered id values:\n\n# Boolean expression which is TRUE for odd-numbered indices\nmy_expression &lt;- df2$id %% 2 == 1\nfiltered_df &lt;- df2[my_expression,]\nfiltered_df\n\n\n\n\n\n\nid\nname\nemail\nfav_num\n\n\n\n\n2\n1\n\nnobody@no.com\nNA\n\n\n3\n3\nzayd\nz@email.biz\n11\n\n\n\n\n\n\n\n\nNow that you know how to set up data.frames, let‚Äôs do something with them!"
  },
  {
    "objectID": "w06-3/slides.html#selecting-columns",
    "href": "w06-3/slides.html#selecting-columns",
    "title": "Introduction to R",
    "section": "Selecting Columns",
    "text": "Selecting Columns\n\nCreate a vector with names of columns you want to keep:\ncols_to_keep &lt;- c(\"var1\", \"var2\", \"var3\")\nUse as the sole argument to R‚Äôs access operator []:\nsubset_df &lt;- df[cols_to_keep]\nExample: Keeping just the name and fav_num columns:\n\ncols_to_keep &lt;- c(\"name\", \"fav_num\")\nsubset_df &lt;- filtered_df[cols_to_keep]\nsubset_df\n\n\n\n\n\n\nname\nfav_num\n\n\n\n\n2\n\nNA\n\n\n3\nzayd\n11"
  },
  {
    "objectID": "w06-3/slides.html#sampling",
    "href": "w06-3/slides.html#sampling",
    "title": "Introduction to R",
    "section": "Sampling",
    "text": "Sampling\n\nFiltering = choosing rows deterministically\nSampling = choosing rows randomly\nR has a built-in sample() function, but be careful! It does not work directly on data.frame objects üò± Instead:\n\n\n\n Sample row indices:\n\nset.seed(2024)\nindices &lt;- sample(nrow(df), 2)\nindices\n\n[1] 2 1\n\n\n\n Select only these indices:\n\nsample_df &lt;- df2[indices,]\nsample_df\n\n\n\n\n\n\nid\nname\nemail\nfav_num\n\n\n\n\n2\n1\n\nnobody@no.com\nNA\n\n\n1\n0\njeff\njeff@jeff.com\n3.14\n\n\n\n\n\n\n\n\n\n\n\n2024 DSAN Bootcamp W06-3: Intro to R"
  },
  {
    "objectID": "w06-3/index.html",
    "href": "w06-3/index.html",
    "title": "Introduction to R",
    "section": "",
    "text": "Open slides in new window ‚Üí"
  },
  {
    "objectID": "w06-3/index.html#the-most-immediately-jarring-differences",
    "href": "w06-3/index.html#the-most-immediately-jarring-differences",
    "title": "Introduction to R",
    "section": "The Most Immediately-Jarring Differences",
    "text": "The Most Immediately-Jarring Differences\n\n\n\n\n\nPython\n\n\n\nR\n\n\n\n\n\nValue Assignment\n\n&lt;varname&gt; = &lt;value&gt;\n\nx = 3\nx\n\n3\n\n\n\n&lt;varname&gt; &lt;- &lt;value&gt;\n\nx &lt;- 3\nx\n\n[1] 3\n\n\n\n\n\n\nIndices\n\nStart from 0\n\nmy_list = [\"a\", \"b\", \"c\"]\nmy_list[0] # Accesses first element\n\n'a'\n\nmy_list[1] # Accesses second element\n\n'b'\n\n\n\nStart from 1\n\nmy_vector &lt;- c(\"a\", \"b\", \"c\")\nmy_vector[0] # Invalid index in R!\n\ncharacter(0)\n\nmy_vector[1] # Accesses first element\n\n[1] \"a\"\n\nmy_vector[2] # Accesses second element\n\n[1] \"b\"\n\n\n\n\n\n\nBooleans\n\nTrue, False\n\nresult = 2 * 2 == 4\nresult\n\nTrue\n\n\n\nTRUE (or T), FALSE (or F)\n\nresult &lt;- 2 * 2 == 4\nresult\n\n[1] TRUE"
  },
  {
    "objectID": "w06-3/index.html#everything-is-a-vector",
    "href": "w06-3/index.html#everything-is-a-vector",
    "title": "Introduction to R",
    "section": "Everything is a Vector",
    "text": "Everything is a Vector\n\nAlthough there are R equivalents for most Python data types, one big difference is that‚Ä¶\nIn R, everything is a vector!\n\n\n\nNumbers\n\nx &lt;- 3\nprint(x)\n\n[1] 3\n\nclass(x)\n\n[1] \"numeric\"\n\nlength(x)\n\n[1] 1\n\n\n\nLength-1 Vectors\n\ny &lt;- c(3)\nprint(y)\n\n[1] 3\n\nclass(y)\n\n[1] \"numeric\"\n\nlength(y)\n\n[1] 1\n\n\n\nLength-N Vectors\n\nz &lt;- c(3, 4, 5)\nprint(z)\n\n[1] 3 4 5\n\nclass(z)\n\n[1] \"numeric\"\n\nlength(z)\n\n[1] 3"
  },
  {
    "objectID": "w06-3/index.html#careful-with-basic-operators-like",
    "href": "w06-3/index.html#careful-with-basic-operators-like",
    "title": "Introduction to R",
    "section": "Careful With ‚ÄúBasic‚Äù Operators Like +!",
    "text": "Careful With ‚ÄúBasic‚Äù Operators Like +!\n\nIf you‚Äôre used to Python, + feels like a natural way to combine things\nR forces you to think explicitly about combining (\\(\\neq\\) adding): more restrictive +\nFor strings:\n\n\nIn Python: + means concatenate\n\nmessage = \"Hi\" + \" \" + \"Jeff\"\nprint(message)\n\nHi Jeff\n\n\n\nIn R: + is not allowed!\n\nmy_message &lt;- \"Hi\" + \" \" + \"Jeff\"\n\nError in \"Hi\" + \" \": non-numeric argument to binary operator\n\n\n\n\nFor numeric lists‚Ä¶\n\n\nIn Python: + means concatenate\n\n[1, 2] + [3, 4]\n\n[1, 2, 3, 4]\n\n\n\nIn R: + means vector addition!\n\nc(1,2) + c(3,4)\n\n[1] 4 6"
  },
  {
    "objectID": "w06-3/index.html#immensely-important-distinction",
    "href": "w06-3/index.html#immensely-important-distinction",
    "title": "Introduction to R",
    "section": "Immensely Important Distinction",
    "text": "Immensely Important Distinction\n\nThroughout bootcamp, throughout DSAN, throughout your career, you‚Äôll use two different ‚Äúflavors‚Äù of R:\n\n\n\nBase R\n\nbase_df &lt;- data.frame(\n  x=c(1,2,3),\n  y=c(\"a\",\"b\",\"c\")\n)\nbase_df\n\n\n\n\n\nx\ny\n\n\n\n\n1\na\n\n\n2\nb\n\n\n3\nc\n\n\n\n\n\nclass(base_df)\n\n[1] \"data.frame\"\n\n\n\nTidyverse\n\nlibrary(tidyverse) # Imports \"tibble\" library\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.2     ‚úî readr     2.1.4\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.4.3     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.2     ‚úî tidyr     1.3.0\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntv_df &lt;- tribble(\n  ~x, ~y,\n  1, \"a\",\n  2, \"b\",\n  3, \"c\"\n)\ntv_df\n\n\n\n\n\nx\ny\n\n\n\n\n1\na\n\n\n2\nb\n\n\n3\nc\n\n\n\n\n\nclass(tv_df)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n\n\n\nNote: There are ways to do row-wise and column-wise table creation in both! The key difference here is just data.frame vs.¬†tibble"
  },
  {
    "objectID": "w06-3/index.html#why-are-there-two-ways-to-do-everything",
    "href": "w06-3/index.html#why-are-there-two-ways-to-do-everything",
    "title": "Introduction to R",
    "section": "Why Are There Two Ways to Do Everything?",
    "text": "Why Are There Two Ways to Do Everything?\n\nOne key reason: tidyverse built on the pipe operator |&gt;\nRecognition that data science often involves pipelines: chains of operations performed in sequence\n\nE.g., scrape data ‚Üí clean data ‚Üí save to DB\n\nBase R approach:\nresult &lt;- saveToDB(cleanData(scrapeData()))\nTidyverse approach:\nresult &lt;- scrapeData() |&gt; cleanData() |&gt; saveToDB()\nNow imagine pipelines used by giant companies, e.g., training Netflix‚Äôs recommendation engine!"
  },
  {
    "objectID": "w06-3/index.html#good-news-and-bad-news",
    "href": "w06-3/index.html#good-news-and-bad-news",
    "title": "Introduction to R",
    "section": "|>: Good News and Bad News",
    "text": "|&gt;: Good News and Bad News\n\nf() |&gt; g() just means: take the result of the call f() and pass it as the first argument to g()\nGood news: this means |&gt; is intuitively ‚Äúbackwards compatible‚Äù with many base R functions\nBad news: requires checking the first argument:\n\n\n\n\ngetSampleSize &lt;- function() {\n  return(20)\n}\ngetSampleSize() |&gt; rbinom(10, 0.5)\n\n [1] 3 6 5 7 5 6 4 3 7 4 5 6 7 8 3 5 5 4 4 5\n\n\n\n\ngetNumTrials &lt;- function() {\n  return(10)\n}\ngetNumTrials() |&gt; rbinom(100, 0.5)\n\n [1] 50 48 48 46 50 45 50 47 46 52\n\n\n\n\n[Quick Note:]\n\nIf you‚Äôve used R before, you may have seen the %&gt;% operator from tidyverse\n‚Ä¶It got so popular that it is now built into R (as of 2023) as |&gt;!\n\\(\\implies\\) Switch from %&gt;% to |&gt; for instant efficiency boost üòé"
  },
  {
    "objectID": "w06-3/index.html#combining-strings",
    "href": "w06-3/index.html#combining-strings",
    "title": "Introduction to R",
    "section": "Combining Strings",
    "text": "Combining Strings\n\nEarlier we saw how R doesn‚Äôt allow \"Hi\" + \" \" + \"Jeff\"‚Ä¶\nSo how do we combine strings?\npaste() and paste0()!\n\npaste(\"Hi\", \"Jeff\")\n\n[1] \"Hi Jeff\"\n\npaste0(\"Hi\", \" \", \"Jeff\")\n\n[1] \"Hi Jeff\""
  },
  {
    "objectID": "w06-3/index.html#python-lists-leftrightarrow-r-vectors",
    "href": "w06-3/index.html#python-lists-leftrightarrow-r-vectors",
    "title": "Introduction to R",
    "section": "Python Lists \\(\\leftrightarrow\\) R Vectors",
    "text": "Python Lists \\(\\leftrightarrow\\) R Vectors\n\nCreation\n\n\n\n\nmy_list = [1, 2, 3]\nmy_list\n\n[1, 2, 3]\n\n\n\n\nmy_vector &lt;- c(1, 2, 3)\nmy_vector\n\n[1] 1 2 3\n\n\n\n\n\nInsertion\n\n\n\n\nmy_list.append(4)\nmy_list\n\n[1, 2, 3, 4]\n\n\n\n\nmy_vector &lt;- c(my_vector, 4)\nmy_vector\n\n[1] 1 2 3 4\n\n\n\n\n\nReplicating Elements\n\n\n\n\nmy_list * 3\n\n[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n\n\n\n\nrep(my_vector, 3)\n\n [1] 1 2 3 4 1 2 3 4 1 2 3 4\n\n\n\n\n\nPython range() \\(\\leftrightarrow\\) R seq()\n\n\n\n\nlist(range(5, 10))\n\n[5, 6, 7, 8, 9]\n\n\n\n\nseq(5, 10)\n\n[1]  5  6  7  8  9 10"
  },
  {
    "objectID": "w06-3/index.html#paste0-with-vectors",
    "href": "w06-3/index.html#paste0-with-vectors",
    "title": "Introduction to R",
    "section": "paste0() with Vectors!",
    "text": "paste0() with Vectors!\n\nnames &lt;- c(\"Aaliya\", \"Brandon\", \"Cyrus\")\npaste0(names, collapse=\" \")\n\n[1] \"Aaliya Brandon Cyrus\"\n\npaste0(names, collapse=\", \")\n\n[1] \"Aaliya, Brandon, Cyrus\"\n\npaste(names, collapse=\", \")\n\n[1] \"Aaliya, Brandon, Cyrus\""
  },
  {
    "objectID": "w06-3/index.html#semi-confusing-point-r-also-has-lists",
    "href": "w06-3/index.html#semi-confusing-point-r-also-has-lists",
    "title": "Introduction to R",
    "section": "Semi-Confusing Point: R Also Has Lists‚Ä¶",
    "text": "Semi-Confusing Point: R Also Has Lists‚Ä¶\n\nRarely used, despite greater similarity to Python lists üòµ‚Äçüí´\nKey difference: all elements of a vector must have same type; elements of a list may have different types\n\nmy_list &lt;- list(\"A\", 2, TRUE)\nmy_list\n\n[[1]]\n[1] \"A\"\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] TRUE\n\n\n(Note how each element is a vector: character vector, integer vector, and boolean vector)"
  },
  {
    "objectID": "w06-3/index.html#pandas-dataframe-leftrightarrow-r-data.frame",
    "href": "w06-3/index.html#pandas-dataframe-leftrightarrow-r-data.frame",
    "title": "Introduction to R",
    "section": "Pandas DataFrame \\(\\leftrightarrow\\) R data.frame",
    "text": "Pandas DataFrame \\(\\leftrightarrow\\) R data.frame\n\n\n\nimport pandas as pd\nx_data = [1, 2, 3]\ny_data = [4, 5, 6]\ndf = pd.DataFrame({\n  'x': x_data, 'y': y_data\n})\nprint(df.to_markdown())\n\n\n\n\nx\ny\n\n\n\n\n0\n1\n4\n\n\n1\n2\n5\n\n\n2\n3\n6\n\n\n\n\n\n\nx_data &lt;- c(1, 2, 3)\ny_data &lt;- c(4, 5, 6)\ndf &lt;- data.frame(\n  x=x_data,\n  y=y_data\n)\ndf\n\n\n\n\n\nx\ny\n\n\n\n\n1\n4\n\n\n2\n5\n\n\n3\n6"
  },
  {
    "objectID": "w06-3/index.html#the-inevitable-headaches-of-missing-data-in-python",
    "href": "w06-3/index.html#the-inevitable-headaches-of-missing-data-in-python",
    "title": "Introduction to R",
    "section": "The Inevitable Headaches of Missing Data in Python",
    "text": "The Inevitable Headaches of Missing Data in Python\n\n\n Given a .csv with missing entries:\n\n\nmy_data.csv\n\nid,name,email\n0,jeff,jeff@jeff.com\n1,,nobody@no.com\n3,zayd,z@email.biz\n\n Python defaults to object columns with NaN (Not-a-Number) values\n\nimport pandas as pd\ndf = pd.read_csv(\"my_data.csv\")\ndf\n\n   id  name          email\n0   0  jeff  jeff@jeff.com\n1   1   NaN  nobody@no.com\n2   3  zayd    z@email.biz\n\ndf.dtypes\n\nid        int64\nname     object\nemail    object\ndtype: object\n\n\n\n Intuitive fix usually isn‚Äôt what you want:\n\ndf_bad = df.copy()\ndf_bad['name'] = df_bad['name'].astype(str)\ndf_bad\n\n   id  name          email\n0   0  jeff  jeff@jeff.com\n1   1   nan  nobody@no.com\n2   3  zayd    z@email.biz\n\ndf_bad.iloc[1]['name']\n\n'nan'\n\n\n This alternative approach ensures missing values are empty strings\n\ndf_better = df.copy()\ndf_better['name'] = df_better['name'].fillna('').astype(str)\ndf_better\n\n   id  name          email\n0   0  jeff  jeff@jeff.com\n1   1        nobody@no.com\n2   3  zayd    z@email.biz\n\ndf_better.iloc[1]['name']\n\n''"
  },
  {
    "objectID": "w06-3/index.html#the-slightly-less-headachey-r-approach",
    "href": "w06-3/index.html#the-slightly-less-headachey-r-approach",
    "title": "Introduction to R",
    "section": "The Slightly-Less-Headachey R Approach!",
    "text": "The Slightly-Less-Headachey R Approach!\n\n\nR reads missing values in character columns as empty strings by default\n\ndf &lt;- read.csv(\"my_data.csv\")\n\nWarning in read.table(file = file, header = header, sep = sep, quote = quote, :\nincomplete final line found by readTableHeader on 'my_data.csv'\n\ndf\n\n\n\n\n\nid\nname\nemail\n\n\n\n\n0\njeff\njeff@jeff.com\n\n\n1\n\nnobody@no.com\n\n\n3\nzayd\nz@email.biz\n\n\n\n\n\ndf$name\n\n[1] \"jeff\" \"\"     \"zayd\"\n\n# We'll learn about sapply() next week!\nsapply(df, class)\n\n         id        name       email \n  \"integer\" \"character\" \"character\" \n\n\n\n‚Ä¶And also has a built-in NA value!\n\n\nmy_data_2.csv\n\nid,name,email,fav_num\n0,jeff,jeff@jeff.com,3.14\n1,,nobody@no.com,\n3,zayd,z@email.biz,11\n\n\ndf2 &lt;- read.csv(\"my_data_2.csv\")\n\nWarning in read.table(file = file, header = header, sep = sep, quote = quote, :\nincomplete final line found by readTableHeader on 'my_data_2.csv'\n\ndf2\n\n\n\n\n\nid\nname\nemail\nfav_num\n\n\n\n\n0\njeff\njeff@jeff.com\n3.14\n\n\n1\n\nnobody@no.com\nNA\n\n\n3\nzayd\nz@email.biz\n11.00\n\n\n\n\n\nsapply(df2, class)\n\n         id        name       email     fav_num \n  \"integer\" \"character\" \"character\"   \"numeric\""
  },
  {
    "objectID": "w06-3/index.html#bonus-built-in-matrices",
    "href": "w06-3/index.html#bonus-built-in-matrices",
    "title": "Introduction to R",
    "section": "Bonus: Built-In Matrices",
    "text": "Bonus: Built-In Matrices\n\nFor data analysis (cleaning, plotting), data.frame is usually the way to go\nFor linear algebra (inverting, multiplying matrices)‚Ä¶\n\n\nUse 2D vectors!\n\nmy_matrix &lt;- matrix(\n  data=c(1, 2, 3, 4),\n  nrow=2, ncol=2, byrow=TRUE\n)\nmy_matrix\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\nclass(my_matrix)\n\n[1] \"matrix\" \"array\" \n\n\n\nBeware! Matrix multiply operator is %*%, NOT *:\n\nmy_matrix * my_matrix\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    9   16\n\nmy_matrix %*% my_matrix\n\n     [,1] [,2]\n[1,]    7   10\n[2,]   15   22"
  },
  {
    "objectID": "w06-3/index.html#filtering-selecting-rows",
    "href": "w06-3/index.html#filtering-selecting-rows",
    "title": "Introduction to R",
    "section": "Filtering (Selecting Rows)",
    "text": "Filtering (Selecting Rows)\n\nIn Base R, filtering involves two steps:\nFirst, create a boolean expression that will evaluate to TRUE for the rows/columns you want to keep, and FALSE otherwise\nThen, use it in the correct ‚Äúslot‚Äù of R‚Äôs access operator []:\nfiltered_df &lt;- df[&lt;row filter&gt;, &lt;column filter&gt;] # Note: Either (or both) can be left blank!\nR will go through each row, evaluate &lt;row filter&gt;, and keep the row if and only if &lt;row filter&gt; evaluates to TRUE\nExample: Selecting only rows with odd-numbered id values:\n\n# Boolean expression which is TRUE for odd-numbered indices\nmy_expression &lt;- df2$id %% 2 == 1\nfiltered_df &lt;- df2[my_expression,]\nfiltered_df\n\n\n\n\n\n\nid\nname\nemail\nfav_num\n\n\n\n\n2\n1\n\nnobody@no.com\nNA\n\n\n3\n3\nzayd\nz@email.biz\n11\n\n\n\n\n\n\n\n\nNow that you know how to set up data.frames, let‚Äôs do something with them!"
  },
  {
    "objectID": "w06-3/index.html#selecting-columns",
    "href": "w06-3/index.html#selecting-columns",
    "title": "Introduction to R",
    "section": "Selecting Columns",
    "text": "Selecting Columns\n\nCreate a vector with names of columns you want to keep:\ncols_to_keep &lt;- c(\"var1\", \"var2\", \"var3\")\nUse as the sole argument to R‚Äôs access operator []:\nsubset_df &lt;- df[cols_to_keep]\nExample: Keeping just the name and fav_num columns:\n\ncols_to_keep &lt;- c(\"name\", \"fav_num\")\nsubset_df &lt;- filtered_df[cols_to_keep]\nsubset_df\n\n\n\n\n\n\nname\nfav_num\n\n\n\n\n2\n\nNA\n\n\n3\nzayd\n11"
  },
  {
    "objectID": "w06-3/index.html#sampling",
    "href": "w06-3/index.html#sampling",
    "title": "Introduction to R",
    "section": "Sampling",
    "text": "Sampling\n\nFiltering = choosing rows deterministically\nSampling = choosing rows randomly\nR has a built-in sample() function, but be careful! It does not work directly on data.frame objects üò± Instead:\n\n\n\n Sample row indices:\n\nset.seed(2024)\nindices &lt;- sample(nrow(df), 2)\nindices\n\n[1] 2 1\n\n\n\n Select only these indices:\n\nsample_df &lt;- df2[indices,]\nsample_df\n\n\n\n\n\n\nid\nname\nemail\nfav_num\n\n\n\n\n2\n1\n\nnobody@no.com\nNA\n\n\n1\n0\njeff\njeff@jeff.com\n3.14"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "2024 DSAN Bootcamp: Weeks 6-8",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nAssignment 6\n\n\n¬†\n\n\n\n\nAssignment 7\n\n\n¬†\n\n\n\n\nAssignment 8\n\n\n¬†\n\n\n\n\nBootcamp Week 6\n\n\n¬†\n\n\n\n\nBootcamp Week 7 Lectures\n\n\n¬†\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "w08-assignment.html",
    "href": "w08-assignment.html",
    "title": "Assignment 8",
    "section": "",
    "text": "Produce 5 different types of data visualizations using ggplot, plotly and ggplotly.\n\n\nProduce the ggplotly plot using stock prices. Please produce a graph that is meaningful in comparing certain stock prices as I have done in the lecture. I was comparing the stock prices of the Big Tech Companies. Please try to choose different stocks than what I have used in the lecture note.\n\nTo find the ticker of the stock to be used in getSymbols() in quantmod package; you can google the company stock and it will show you the ticker for that particular stock.\n\n\n# place your ggplotly visualization here\n\nFor the rest of the plots, Use the Sales.data dataset that you created in Assignment 6 - problem 2 to provide more meaningful plots. Most of the plots should be of a different kind (bar,line,scatter,..etc). That means don‚Äôt provide all of them as line graphs. :)\n\n# place visualization #2 here\n\n\n# place visualization #3 here\n\n\n# place visualization #4 here\n\n\n# place visualization #5 here"
  },
  {
    "objectID": "w08-assignment.html#problem-1-ggplot",
    "href": "w08-assignment.html#problem-1-ggplot",
    "title": "Assignment 8",
    "section": "",
    "text": "Produce 5 different types of data visualizations using ggplot, plotly and ggplotly.\n\n\nProduce the ggplotly plot using stock prices. Please produce a graph that is meaningful in comparing certain stock prices as I have done in the lecture. I was comparing the stock prices of the Big Tech Companies. Please try to choose different stocks than what I have used in the lecture note.\n\nTo find the ticker of the stock to be used in getSymbols() in quantmod package; you can google the company stock and it will show you the ticker for that particular stock.\n\n\n# place your ggplotly visualization here\n\nFor the rest of the plots, Use the Sales.data dataset that you created in Assignment 6 - problem 2 to provide more meaningful plots. Most of the plots should be of a different kind (bar,line,scatter,..etc). That means don‚Äôt provide all of them as line graphs. :)\n\n# place visualization #2 here\n\n\n# place visualization #3 here\n\n\n# place visualization #4 here\n\n\n# place visualization #5 here"
  },
  {
    "objectID": "w08-assignment.html#problem-2-wordclouds",
    "href": "w08-assignment.html#problem-2-wordclouds",
    "title": "Assignment 8",
    "section": "Problem 2: Wordclouds",
    "text": "Problem 2: Wordclouds\n\nProduce a wordcloud using the Harry Potter Corpus (‚ÄúHP_Corpus‚Äù). Write one or two sentences explaining what you observe by this WordCloud.\n\n\n# insert code here\n\n\nInsert observations here\n\n\nUsing the Harry Potter Corpus, which are the top five most used words in the corpus after stop words were removed?\n\n\nInsert words here\n\n\nWhose name appears more frequently in the Harry Potter Corpus, Ron‚Äôs or Hermione‚Äôs?\n\n\nInsert name here"
  },
  {
    "objectID": "w08-assignment.html#problem-3-apis",
    "href": "w08-assignment.html#problem-3-apis",
    "title": "Assignment 8",
    "section": "Problem 3: APIs",
    "text": "Problem 3: APIs\nWatch this video on Mixtape Medley with Ariana Grande and Kelly Clarkson in Jimmy Fallon‚Äôs Show. https://www.youtube.com/watch?v=LF_EF8Rj9gs\nUse Spotify‚Äôs API to do a comparison between Ariana Grande‚Äôs and Kelly Clarkson‚Äôs music using several data visualization.\n\n# insert code here\n\nPlease provide a description of your observations from the aforementioned video and your data visualization.\n\nInsert observations here"
  },
  {
    "objectID": "w06-assignment.html",
    "href": "w06-assignment.html",
    "title": "Assignment 6",
    "section": "",
    "text": "Create a vector for card suits with the variable name suits, containing the following four elements (as character strings): \"Diamonds\", \"Clubs\", \"Hearts\", \"Spades\". Write suits (on its own) as the final line of your code cell, so that the output of the cell shows the contents of the vector you created.\n\n\n\nCreate a vector for card numbers with the variable name numbers, containing the character string \"Ace\" followed by the integers 2 through 10. Display the contents of numbers as the output of your code cell (as you did in Q1.1).\n\n\n\nCreate a vector for face cards with the variable name faces, containing the character strings \"Jack\", \"Queen\", and \"King\". Display the contents of faces as the output of your code cell.\n\n\n\nCreate a new vector with the variable name card_names, formed by concatenating the elements of the faces vector to the end of the numbers vector. Display the contents of card_names as the output of your code cell.\n\n\n\nRepeat each element in card_names four times, and name the new variable card_names_4. Display the contents of card_names_4 as the output of your code cell.\n\n\n\nRepeat each element in suits 13 times, naming the new variable suits_13. Display the contents of suits_13 as the output of your code cell.\n\n\n\nCreate a data.frame variable named card_deck, constructed so that its first column is named card_name and contains the values of card_names_4, and its second column is named suit and contains the values of suits_13. Display the contents of card_deck as the output of your code cell.\n\n\n\nCreate a new column in card_deck named card by pasting the values in the first column (card_name) to the values in the second column (suit). Here you can use the built-in R function paste() to paste these 2 variables together. Display the new contents of card_deck as the output of your code cell.\n\n\n\nNow you have a deck of cards, which you can use to compute probabilities! First, to verify that the deck was successfully created, write code which outputs the number of rows in the card_deck data.frame (it should be 52, if the above steps were carried out correctly)\n\n\n\nNow, use what you know about filtering the values in a data.frame to compute the probability that a randomly-drawn card from card_deck is a Spade, and display this probability as the output of your code cell.\n\n\n\nUse card_deck again to compute the probability that, when drawing two cards from the deck, the first is a Spade and the second is a Heart. Display this probability as the output of your code cell.\n\n\n\nNow let‚Äôs simulate playing poker! Using what you know about sampling from a data.frame, sample 5 cards from card_deck (please use set.seed(2024) to set the random seed to be 2024, so that results are the same across different submissions). Display the sampled 5-card hand as the output of your code cell. Then, using the following image as a guide if you‚Äôre unfamiliar with poker, comment on the cards you obtained‚Äîdid your random draw result in one of the types of hands displayed in the image?"
  },
  {
    "objectID": "w06-assignment.html#part-1-generating-a-deck-of-cards",
    "href": "w06-assignment.html#part-1-generating-a-deck-of-cards",
    "title": "Assignment 6",
    "section": "",
    "text": "Create a vector for card suits with the variable name suits, containing the following four elements (as character strings): \"Diamonds\", \"Clubs\", \"Hearts\", \"Spades\". Write suits (on its own) as the final line of your code cell, so that the output of the cell shows the contents of the vector you created.\n\n\n\nCreate a vector for card numbers with the variable name numbers, containing the character string \"Ace\" followed by the integers 2 through 10. Display the contents of numbers as the output of your code cell (as you did in Q1.1).\n\n\n\nCreate a vector for face cards with the variable name faces, containing the character strings \"Jack\", \"Queen\", and \"King\". Display the contents of faces as the output of your code cell.\n\n\n\nCreate a new vector with the variable name card_names, formed by concatenating the elements of the faces vector to the end of the numbers vector. Display the contents of card_names as the output of your code cell.\n\n\n\nRepeat each element in card_names four times, and name the new variable card_names_4. Display the contents of card_names_4 as the output of your code cell.\n\n\n\nRepeat each element in suits 13 times, naming the new variable suits_13. Display the contents of suits_13 as the output of your code cell.\n\n\n\nCreate a data.frame variable named card_deck, constructed so that its first column is named card_name and contains the values of card_names_4, and its second column is named suit and contains the values of suits_13. Display the contents of card_deck as the output of your code cell.\n\n\n\nCreate a new column in card_deck named card by pasting the values in the first column (card_name) to the values in the second column (suit). Here you can use the built-in R function paste() to paste these 2 variables together. Display the new contents of card_deck as the output of your code cell.\n\n\n\nNow you have a deck of cards, which you can use to compute probabilities! First, to verify that the deck was successfully created, write code which outputs the number of rows in the card_deck data.frame (it should be 52, if the above steps were carried out correctly)\n\n\n\nNow, use what you know about filtering the values in a data.frame to compute the probability that a randomly-drawn card from card_deck is a Spade, and display this probability as the output of your code cell.\n\n\n\nUse card_deck again to compute the probability that, when drawing two cards from the deck, the first is a Spade and the second is a Heart. Display this probability as the output of your code cell.\n\n\n\nNow let‚Äôs simulate playing poker! Using what you know about sampling from a data.frame, sample 5 cards from card_deck (please use set.seed(2024) to set the random seed to be 2024, so that results are the same across different submissions). Display the sampled 5-card hand as the output of your code cell. Then, using the following image as a guide if you‚Äôre unfamiliar with poker, comment on the cards you obtained‚Äîdid your random draw result in one of the types of hands displayed in the image?"
  },
  {
    "objectID": "w06-assignment.html#problem-2-loading-and-cleaning-data",
    "href": "w06-assignment.html#problem-2-loading-and-cleaning-data",
    "title": "Assignment 6",
    "section": "Problem 2: Loading and Cleaning Data",
    "text": "Problem 2: Loading and Cleaning Data\nFor this problem, rather than creating our own dataset from scratch, we will load and analyze a pre-existing dataset on global superstore orders.\n\nQuestion 2.1\n\nFirst, import the file named Global_Superstore_Orders_2016.csv using R‚Äôs built-in read.csv() function, storing the result into a data.frame variable named orders.\nNext, read more about the read.csv() function by typing ??read.csv in the R Console. Make sure you understand the optional header argument, since you‚Äôll need to provide the TRUE as the value for this argument when you call the read.csv() function in the previous step!\nFinally, display the first six rows of orders as the output of your code cell, by using R‚Äôs built-in head() function.\n\n\n\nQuestion 2.2\nUse str() to check the type of each variable. You‚Äôll see that read.csv() did not correctly identify the data types for all columns loaded from the .csv file. Which variables have inappropriate types, and what should their data types be instead?\n\n\nQuestion 2.3\nCreate a separate data.frame named sales_data, containing only the following columns from orders: Order.Date, Ship.Date, State, Country, Sales, Profit, and Order.Priority. Display the first six rows of sales_data (using head()) as the output of your code cell.\n\n\nQuestion 2.4\nUpdate the sales_data data.frame you created in Q2.3 so that the columns you identified in Q2.2 have the correct types (factor, Date,..etc.).\nHint: You‚Äôll want to use the lubridate library to convert character strings into Date types. To do so, you‚Äôll need to identify what format the dates are in, then use the appropriate function from the Parse Date-Times section of the lubridate cheat sheet. The following cell provides an example, where we parse the character string \"2024-05-01\" into a Date object representing the 31st day of December in the year 2024:\n\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nexample_date_str &lt;- \"2024-12-31\"\nparsed_date &lt;- ymd(example_date_str)\nparsed_date\n\n[1] \"2024-12-31\"\n\nclass(parsed_date)\n\n[1] \"Date\"\n\n\n\n\nQuestion 2.5\nUse str() on the updated sales_data variable to confirm that each of the variables you identified in Q2.2 now has the correct type.\n\n\nQuestion 2.6\nCheck whether there are any NA/missing values in sales_data.\n\n\nQuestion 2.7\nStore the names of the columns of sales_data into a new variable called sales_col_names. Also find out how many rows that the dataset has and assign it to the variable sales_num_rows. Display the values of both sales_col_names and sales_num_rows as the output of your code cell. (We may use this dataset and these variables in future assignments)\n\n\nQuestion 2.8\nQ2.8: Write code to compute the mean value of the Sales column when the order priority is \"Critical\", and the mean value of Sales when the order priority is \"High\". Which of the two mean values is greater?\n\n\nQuestion 2.9 (Bonus)\n(For +1 bonus point) Compute the mean sales for each of the 50 US states.\nHint: you should use R‚Äôs built-in aggregate() function to accomplish this, rather than manually entering the names of all 50 states!"
  },
  {
    "objectID": "w07.html",
    "href": "w07.html",
    "title": "Bootcamp Week 7 Lectures",
    "section": "",
    "text": "Welcome to the lectures for Week 7 of the 2024 DSAN Bootcamp! This week we will be covering the following topics:\n\nW07.1: Control Flow in R\nW07.2: Introduction to the Tidyverse\n\n\nPart 1: Control Flow in R\nClick to open slides in a separate tab \n\n\nPart 2: Introduction to the Tidyverse\nClick to open slides in a separate tab"
  },
  {
    "objectID": "w08-1/slides.html#base-r-vs.-tidyverse",
    "href": "w08-1/slides.html#base-r-vs.-tidyverse",
    "title": "Tidy Data Visualization with GGPlot in R",
    "section": "Base R vs.¬†Tidyverse",
    "text": "Base R vs.¬†Tidyverse\n\n\n\n\nCode\nsource(\"../_globals.r\")\nlexp_df &lt;- read.csv(\"assets/lexp_by_ward.csv\")\nplot(\n  lexp_df$ward, lexp_df$life_exp,\n  main=\"DC Life Expectancy by Ward (2015)\",\n  xlab=\"Ward\", ylab=\"Life Expectancy\",\n  pch=19, cex.lab=2, cex.main=2, cex.axis=2\n)\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(tidyverse)\nus_mean &lt;- 78.69\nlexp_df &lt;- read_csv(\"assets/lexp_by_ward.csv\")\nlexp_df &lt;- lexp_df |&gt; mutate(\n  above_avg = ifelse(life_exp &gt; us_mean, \"Above Mean\", \"Below Mean\")\n)\nlexp_df |&gt; ggplot(aes(x=as.factor(ward), y=life_exp, color=above_avg)) +\n  geom_point(size=5) +\n  geom_segment(\n    aes(xend=ward, yend=us_mean),\n    linewidth=1.5\n  ) +\n  geom_hline(\n    aes(\n      yintercept=us_mean,\n      linetype=\"National Mean\"\n    ),\n    linewidth=1\n  ) +\n  dsan_theme(\"half\") +\n  theme(\n    plot.title = element_text(hjust = 0.5)\n  ) +\n  labs(\n    x = \"Ward\",\n    y = \"Life Expectancy\",\n    title = \"DC Life Expectancy by Ward (2015)\"\n  ) +\n  scale_linetype_manual(\"test\", values=c(\"dashed\")) +\n  remove_legend_title()\n\n\n\n\n\nData from DC Dept. of Health"
  },
  {
    "objectID": "w08-1/slides.html#plus-way-wider-range-of-plot-types",
    "href": "w08-1/slides.html#plus-way-wider-range-of-plot-types",
    "title": "Tidy Data Visualization with GGPlot in R",
    "section": "Plus Way Wider Range of Plot Types!",
    "text": "Plus Way Wider Range of Plot Types!\n(All using the same syntax)\n\n\nCode\nlibrary(sf)\nmy_sf &lt;- read_sf(\"assets/Wards_from_2022.geojson\")\nmy_sf_merged &lt;- my_sf |&gt; left_join(\n  lexp_df, by=c(\"WARD\"=\"ward\")\n)\nmy_sf_merged |&gt; ggplot(aes(fill=life_exp)) +\n  geom_sf() +\n  dsan_theme() +\n  theme(\n    axis.line = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank()\n  ) +\n  labs(\n    title = \"DC Life Expectancy by Ward (2015)\",\n    fill = \"Life Exp.\"\n  ) +\n  scale_fill_viridis_c()\n\n\n\nShapefile from OpenData.DC.gov"
  },
  {
    "objectID": "w08-1/slides.html#intuition",
    "href": "w08-1/slides.html#intuition",
    "title": "Tidy Data Visualization with GGPlot in R",
    "section": "Intuition",
    "text": "Intuition\n\nSentences are made up of subjects, verbs, objects (grammatical structure)\nVisualizations are made up of encodings, coordinate systems, aesthetic mappings\n\n\n\n\n2024 DSAN Bootcamp W08-1: Visualization"
  },
  {
    "objectID": "w08-1/index.html",
    "href": "w08-1/index.html",
    "title": "Tidy Data Visualization with GGPlot in R",
    "section": "",
    "text": "Open slides in new window ‚Üí"
  },
  {
    "objectID": "w08-1/index.html#base-r-vs.-tidyverse",
    "href": "w08-1/index.html#base-r-vs.-tidyverse",
    "title": "Tidy Data Visualization with GGPlot in R",
    "section": "Base R vs.¬†Tidyverse",
    "text": "Base R vs.¬†Tidyverse\n\n\n\n\nCode\nsource(\"../_globals.r\")\nlexp_df &lt;- read.csv(\"assets/lexp_by_ward.csv\")\nplot(\n  lexp_df$ward, lexp_df$life_exp,\n  main=\"DC Life Expectancy by Ward (2015)\",\n  xlab=\"Ward\", ylab=\"Life Expectancy\",\n  pch=19, cex.lab=2, cex.main=2, cex.axis=2\n)\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(tidyverse)\n\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.2     ‚úî readr     2.1.4\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî lubridate 1.9.2     ‚úî tibble    3.2.1\n‚úî purrr     1.0.2     ‚úî tidyr     1.3.0\n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nus_mean &lt;- 78.69\nlexp_df &lt;- read_csv(\"assets/lexp_by_ward.csv\")\n\n\nRows: 8 Columns: 3\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\ndbl (3): year, ward, life_exp\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nlexp_df &lt;- lexp_df |&gt; mutate(\n  above_avg = ifelse(life_exp &gt; us_mean, \"Above Mean\", \"Below Mean\")\n)\nlexp_df |&gt; ggplot(aes(x=as.factor(ward), y=life_exp, color=above_avg)) +\n  geom_point(size=5) +\n  geom_segment(\n    aes(xend=ward, yend=us_mean),\n    linewidth=1.5\n  ) +\n  geom_hline(\n    aes(\n      yintercept=us_mean,\n      linetype=\"National Mean\"\n    ),\n    linewidth=1\n  ) +\n  dsan_theme(\"half\") +\n  theme(\n    plot.title = element_text(hjust = 0.5)\n  ) +\n  labs(\n    x = \"Ward\",\n    y = \"Life Expectancy\",\n    title = \"DC Life Expectancy by Ward (2015)\"\n  ) +\n  scale_linetype_manual(\"test\", values=c(\"dashed\")) +\n  remove_legend_title()\n\n\n\n\n\nData from DC Dept. of Health"
  },
  {
    "objectID": "w08-1/index.html#plus-way-wider-range-of-plot-types",
    "href": "w08-1/index.html#plus-way-wider-range-of-plot-types",
    "title": "Tidy Data Visualization with GGPlot in R",
    "section": "Plus Way Wider Range of Plot Types!",
    "text": "Plus Way Wider Range of Plot Types!\n(All using the same syntax)\n\n\nCode\nlibrary(sf)\n\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\n\nCode\nmy_sf &lt;- read_sf(\"assets/Wards_from_2022.geojson\")\nmy_sf_merged &lt;- my_sf |&gt; left_join(\n  lexp_df, by=c(\"WARD\"=\"ward\")\n)\nmy_sf_merged |&gt; ggplot(aes(fill=life_exp)) +\n  geom_sf() +\n  dsan_theme() +\n  theme(\n    axis.line = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank()\n  ) +\n  labs(\n    title = \"DC Life Expectancy by Ward (2015)\",\n    fill = \"Life Exp.\"\n  ) +\n  scale_fill_viridis_c()\n\n\n\n\n\nShapefile from OpenData.DC.gov"
  },
  {
    "objectID": "w08-1/index.html#intuition",
    "href": "w08-1/index.html#intuition",
    "title": "Tidy Data Visualization with GGPlot in R",
    "section": "Intuition",
    "text": "Intuition\n\nSentences are made up of subjects, verbs, objects (grammatical structure)\nVisualizations are made up of encodings, coordinate systems, aesthetic mappings"
  },
  {
    "objectID": "w06-1/index.html",
    "href": "w06-1/index.html",
    "title": "Introduction to Quarto = Python + R",
    "section": "",
    "text": "Open slides in new window ‚Üí"
  },
  {
    "objectID": "w06-1/index.html#setting-up-your-environment",
    "href": "w06-1/index.html#setting-up-your-environment",
    "title": "Introduction to Quarto = Python + R",
    "section": "Setting Up Your Environment",
    "text": "Setting Up Your Environment\nTie yourself to the mast! Please!\n\n\n\nUlysses and the Sirens, J. W. Waterhouse (1891)\n\n\n\n\n\n\n\n\n\n\nDive right into coding(Bc you think data science = coding)\n\\(\\implies\\)\nSpend 75% of your time wrestling with environment issues üòî\n\n\nThink about + set up environment before diving into coding\n\\(\\implies\\)\nSpend 25% of your time wrestling with environment issues üòé"
  },
  {
    "objectID": "w06-1/index.html#if-you-were-just-coding-in-python",
    "href": "w06-1/index.html#if-you-were-just-coding-in-python",
    "title": "Introduction to Quarto = Python + R",
    "section": "If You Were Just Coding in Python",
    "text": "If You Were Just Coding in Python\n\n\n\n\n\nGUI wrapper around Python (IDE)\nRun blocks of Python code (from .ipynb)\n\n\n\n\nThe Python Language\n\nProgramming language\npython &lt;script&gt;.py"
  },
  {
    "objectID": "w06-1/index.html#python-on-its-own-demonstration",
    "href": "w06-1/index.html#python-on-its-own-demonstration",
    "title": "Introduction to Quarto = Python + R",
    "section": "Python-On-Its-Own Demonstration",
    "text": "Python-On-Its-Own Demonstration\n\n Environment! Create a bootcamp-w06 folder, and open this folder in VSCode!\nCreate a hello.py file, with the following content:\n\n\nhello.py\n\nprint(\"Hello from Python!\")\n\nNow open Terminal (in VSCode: Right click in Explorer panel ‚Üí ‚ÄúOpen in Integrated Terminal‚Äù) and execute\npython hello.py\nYou should see the following output:\nHello from Python!"
  },
  {
    "objectID": "w06-1/index.html#python-within-jupyter-demo",
    "href": "w06-1/index.html#python-within-jupyter-demo",
    "title": "Introduction to Quarto = Python + R",
    "section": "Python-Within-Jupyter Demo",
    "text": "Python-Within-Jupyter Demo\n\nStill within the Integrated Terminal, type jupyter and press Enter‚Ä¶\n(If Python is correctly set up and Jupyter has been correctly installed) You‚Äôll see an interface allowing you to create Notebooks"
  },
  {
    "objectID": "w06-1/index.html#jupyter-notebooks-.ipynb-files",
    "href": "w06-1/index.html#jupyter-notebooks-.ipynb-files",
    "title": "Introduction to Quarto = Python + R",
    "section": "Jupyter Notebooks (.ipynb Files)",
    "text": "Jupyter Notebooks (.ipynb Files)\n\nYou saw these in more detail during Python section!\nAll you need to remember here is: this is a wrapper around the core python executable: all it does is\n\nTakes the code you enter into a cell\nRuns it using python &lt;temporary file&gt;.py\nStores the output within the .ipynb file itself\n\n\n\n\n\n(Make sure to terminate Jupyter using  once you‚Äôre done using it!)"
  },
  {
    "objectID": "w06-1/index.html#if-you-were-just-coding-in-r",
    "href": "w06-1/index.html#if-you-were-just-coding-in-r",
    "title": "Introduction to Quarto = Python + R",
    "section": "If You Were Just Coding in R",
    "text": "If You Were Just Coding in R\n\n\n\n\n\nGUI wrapper around R (Integrated Development Environment = IDE)\nRun blocks of R code (from .Rmd)\n\n\n\nThe R Language \n\nProgramming language\nRscript &lt;script&gt;.r"
  },
  {
    "objectID": "w06-1/index.html#r-on-its-own-demonstration",
    "href": "w06-1/index.html#r-on-its-own-demonstration",
    "title": "Introduction to Quarto = Python + R",
    "section": "R-On-Its-Own Demonstration",
    "text": "R-On-Its-Own Demonstration\n\nCreate a hello.r file, with the following content:\n\n\nhello.r\n\nprint(\"Hello from R!\")\n\nNow open Terminal (in VSCode: Right click in Explorer panel ‚Üí ‚ÄúOpen in Integrated Terminal‚Äù) and execute\nRscript hello.r\nYou should see the following output:\n[1] \"Hello from R!\"\n(Plz notice the similarity with Python!)"
  },
  {
    "objectID": "w06-1/index.html#r-in-rstudio-demonstration",
    "href": "w06-1/index.html#r-in-rstudio-demonstration",
    "title": "Introduction to Quarto = Python + R",
    "section": "R-in-RStudio Demonstration",
    "text": "R-in-RStudio Demonstration\n\nSimilarly to Jupyter, you can think of RStudio as a fancy ‚Äúwrapper‚Äù around R (an IDE)\nYou can (probably should) install RStudio locally, BUT‚Ä¶\nI want to instead use this as an opportunity to introduce you to Posit.Cloud!\nThe resources provided by the free account will be sufficient for any assignments/projects in my sections! (The Jeff Guarantee‚Ñ¢)"
  },
  {
    "objectID": "w06-1/index.html#r-markdown-.rmd-files",
    "href": "w06-1/index.html#r-markdown-.rmd-files",
    "title": "Introduction to Quarto = Python + R",
    "section": "R Markdown (.rmd) Files",
    "text": "R Markdown (.rmd) Files\n\n(Warning: Soon to be obsolete! Replaced by very similar .qmd, Quarto Markdown üòâ)\nChoose ‚ÄúNew Blank File‚Äù ‚Üí ‚ÄúR Markdown‚Ä¶‚Äù (in the Files Pane, bottom right of RStudio) to create hello.Rmd:\n\n\n\n\nhello.Rmd\n\n---\ntitle: \"Hello from R Markdown!\"\n---\n\n## Introduction\n\nHello here is some R code\n\n```{r}\nprint(\"Hello from R\")\n```\n\n## A Cool Table\n\n| Problem | Solution |\n|:-:|:-:|\n| $3^5$ | 243 |\n\n\n\n‚Üí"
  },
  {
    "objectID": "w06-1/index.html#literate-programming-transparent-science",
    "href": "w06-1/index.html#literate-programming-transparent-science",
    "title": "Introduction to Quarto = Python + R",
    "section": "Literate Programming = Transparent Science!",
    "text": "Literate Programming = Transparent Science!\n\nAcademic papers, video demonstrations, etc., can hide more than they reveal\n\nEx: Look at all these UI Templates on Canva!\n\nGiven a plot in some paper‚Ä¶ How do we know they didn‚Äôt just ‚Äútweak‚Äù the settings, for hours on end, to produce the result they wanted? (\\(\\neq\\) ethical science)\nOne answer: if they provide the code that produced the figure, then we can interrogate their settings/choices, and change them, to see if the result still holds!"
  },
  {
    "objectID": "w06-1/index.html#markdown-r-python-rightarrow-quarto",
    "href": "w06-1/index.html#markdown-r-python-rightarrow-quarto",
    "title": "Introduction to Quarto = Python + R",
    "section": "Markdown + R + Python \\(\\rightarrow\\) Quarto",
    "text": "Markdown + R + Python \\(\\rightarrow\\) Quarto\n\nMarkdown is basically glorified plaintext: text+basic formatting (bold, italics, headings, links, tables)\nR is just a program that lives on your computer and executes R code\nPython is just a program that lives on your computer and executes Python code\nQuarto is a wrapper around R and Python, allowing you to write .qmd (Quarto MarkDown) files: Markdown documents containing R and Python code!"
  },
  {
    "objectID": "w06-1/index.html#quarto-building-blocks",
    "href": "w06-1/index.html#quarto-building-blocks",
    "title": "Introduction to Quarto = Python + R",
    "section": "Quarto Building Blocks",
    "text": "Quarto Building Blocks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGUI wrapper around R (Integrated Development Environment = IDE)\nRun blocks of R code (from .Rmd)\n\n\n\nThe R Language \n\nProgramming language\nRscript &lt;script&gt;.r\n\n\n\n\n\n\n+\n\n\n\n\n\n\n\n\n\nGUI wrapper around Python (IDE)\nRun blocks of Python code (from .ipynb)\n\n\n\n\nThe Python Language\n\nProgramming language\npython &lt;script&gt;.py"
  },
  {
    "objectID": "w06-1/index.html#reproducibility-and-literate-programming",
    "href": "w06-1/index.html#reproducibility-and-literate-programming",
    "title": "Introduction to Quarto = Python + R",
    "section": "Reproducibility and Literate Programming",
    "text": "Reproducibility and Literate Programming\n\nReproducible document: includes both the content (text, tables, figures) and the code that generated it\n\ntldr: If you‚Äôre copying-and-pasting results from your code output to your results document, a red flag should go off in your head!\n\nLiterate programming: Human-readable explanations are included alongside code, within a single document."
  },
  {
    "objectID": "w06-1/index.html#so-what-is-r",
    "href": "w06-1/index.html#so-what-is-r",
    "title": "Introduction to Quarto = Python + R",
    "section": "So‚Ä¶ What is R?",
    "text": "So‚Ä¶ What is R?\n\nPython was created mainly for software engineers\n\nStatistical computing functionality requires 3rd-party imports: NumPy, SciPy, scikit-learn\n\nR was created mainly for statisticians\n\nSoftware engineering functionality often requires 3rd-party libraries: e.g., purrr (for Python-style lambda functions)\n\nOne key implication for DSAN: probability distributions (Normal, Binomial, etc.) are built into R! (Available through NumPy in Python)"
  },
  {
    "objectID": "w06-1/index.html#probability-distribution-example",
    "href": "w06-1/index.html#probability-distribution-example",
    "title": "Introduction to Quarto = Python + R",
    "section": "Probability Distribution Example",
    "text": "Probability Distribution Example\nDon‚Äôt worry about the details of the code for now! Just note how‚Ä¶\n\n\nrbinom() is built into R, whereas\n\nset.seed(1234)\ncoin_results &lt;- rbinom(n=20, size=10, prob=0.5)\nprint(coin_results)\n\n [1] 3 5 5 6 7 6 1 4 6 5 6 5 4 7 4 7 4 4 4 4\n\nclass(coin_results)\n\n[1] \"integer\"\n\n\n\n\nCode\nlibrary(tidyverse)\n\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.2     ‚úî readr     2.1.4\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.4.3     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.2     ‚úî tidyr     1.3.0\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\ncoin_flip_df &lt;- tibble(num_heads = coin_results)\nggplot(coin_flip_df, aes(x=num_heads)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\nrng.binomial() requires NumPy\n\nimport numpy as np\nrng = np.random.default_rng(seed=1234)\nten_coin_results = rng.binomial(n=10, p=0.5, size=20)\nprint(ten_coin_results)\n\n[8 5 7 4 4 3 4 4 8 4 5 5 7 7 6 6 6 4 4 7]\n\ntype(ten_coin_results)\n\n&lt;class 'numpy.ndarray'&gt;\n\n\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nresult_plot = plt.figure()\nresult_plot.set_figheight(3.5)\ncoin_flip_df = pd.DataFrame({'num_heads': ten_coin_results})\nresult_plot = sns.histplot(data=coin_flip_df, x='num_heads')\n\n\n/Users/jpj/.virtualenvs/r-reticulate/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\nCode\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "w06-1/index.html#the-moment-youve-been-waiting-for",
    "href": "w06-1/index.html#the-moment-youve-been-waiting-for",
    "title": "Introduction to Quarto = Python + R",
    "section": "The Moment You‚Äôve Been Waiting For ü§Ø",
    "text": "The Moment You‚Äôve Been Waiting For ü§Ø\n\nHow did I include both R and Python code (and its outputs) in the previous slide?\nQuarto allows integration of R+Python via code blocks!\n\n\n\n\nmy_file.qmd\n\n```{python}\nprint(\"Hello from Python!\")\n```\n\n```{r}\nprint(\"Hello from R!\")\n```\n\n\n‚Üí\n\nHello from Python!\n\nHello from R!"
  },
  {
    "objectID": "w06-1/index.html#the-takeaway-python-and-r",
    "href": "w06-1/index.html#the-takeaway-python-and-r",
    "title": "Introduction to Quarto = Python + R",
    "section": "The Takeaway: Python and R",
    "text": "The Takeaway: Python and R\n\nQuarto enables switching from Python to R at any point!\nSo, as we start on our R journey, try to identify its strengths and weaknesses relative to Python\nGiven a particular task‚Äîweb scraping, data cleaning, exploratory data analysis, training a machine learning model, etc.‚Äîlearn how to do it in both Python and R, then evaluate which one ‚Äúclicks‚Äù more with you\n(In other words, my ask: if you already know how to do something in Python, pls be open to learning it in R as well! You might find it‚Äôs easier‚Äîtry your best to consciously avoid getting ‚Äúlocked into‚Äù one language)\n\n\nThis also holds for Base R to Tidyverse!"
  },
  {
    "objectID": "w06-1/slides.html#setting-up-your-environment",
    "href": "w06-1/slides.html#setting-up-your-environment",
    "title": "Introduction to Quarto = Python + R",
    "section": "Setting Up Your Environment",
    "text": "Setting Up Your Environment\nTie yourself to the mast! Please!\n\nUlysses and the Sirens, J. W. Waterhouse (1891)\n\n\n\n\n\n\n\nDive right into coding(Bc you think data science = coding)\n\\(\\implies\\)\nSpend 75% of your time wrestling with environment issues üòî\n\n\nThink about + set up environment before diving into coding\n\\(\\implies\\)\nSpend 25% of your time wrestling with environment issues üòé"
  },
  {
    "objectID": "w06-1/slides.html#if-you-were-just-coding-in-python",
    "href": "w06-1/slides.html#if-you-were-just-coding-in-python",
    "title": "Introduction to Quarto = Python + R",
    "section": "If You Were Just Coding in Python",
    "text": "If You Were Just Coding in Python\n\n\n\n\n\nGUI wrapper around Python (IDE)\nRun blocks of Python code (from .ipynb)\n\n\n\n\nThe Python Language\n\nProgramming language\npython &lt;script&gt;.py"
  },
  {
    "objectID": "w06-1/slides.html#python-on-its-own-demonstration",
    "href": "w06-1/slides.html#python-on-its-own-demonstration",
    "title": "Introduction to Quarto = Python + R",
    "section": "Python-On-Its-Own Demonstration",
    "text": "Python-On-Its-Own Demonstration\n\n Environment! Create a bootcamp-w06 folder, and open this folder in VSCode!\nCreate a hello.py file, with the following content:\n\n\nhello.py\n\nprint(\"Hello from Python!\")\n\nNow open Terminal (in VSCode: Right click in Explorer panel ‚Üí ‚ÄúOpen in Integrated Terminal‚Äù) and execute\npython hello.py\nYou should see the following output:\nHello from Python!"
  },
  {
    "objectID": "w06-1/slides.html#python-within-jupyter-demo",
    "href": "w06-1/slides.html#python-within-jupyter-demo",
    "title": "Introduction to Quarto = Python + R",
    "section": "Python-Within-Jupyter Demo",
    "text": "Python-Within-Jupyter Demo\n\nStill within the Integrated Terminal, type jupyter and press Enter‚Ä¶\n(If Python is correctly set up and Jupyter has been correctly installed) You‚Äôll see an interface allowing you to create Notebooks"
  },
  {
    "objectID": "w06-1/slides.html#jupyter-notebooks-.ipynb-files",
    "href": "w06-1/slides.html#jupyter-notebooks-.ipynb-files",
    "title": "Introduction to Quarto = Python + R",
    "section": "Jupyter Notebooks (.ipynb Files)",
    "text": "Jupyter Notebooks (.ipynb Files)\n\nYou saw these in more detail during Python section!\nAll you need to remember here is: this is a wrapper around the core python executable: all it does is\n\nTakes the code you enter into a cell\nRuns it using python &lt;temporary file&gt;.py\nStores the output within the .ipynb file itself\n\n\n\n(Make sure to terminate Jupyter using  once you‚Äôre done using it!)"
  },
  {
    "objectID": "w06-1/slides.html#if-you-were-just-coding-in-r",
    "href": "w06-1/slides.html#if-you-were-just-coding-in-r",
    "title": "Introduction to Quarto = Python + R",
    "section": "If You Were Just Coding in R",
    "text": "If You Were Just Coding in R\n\n\n\n\n\nGUI wrapper around R (Integrated Development Environment = IDE)\nRun blocks of R code (from .Rmd)\n\n\n\nThe R Language \n\nProgramming language\nRscript &lt;script&gt;.r"
  },
  {
    "objectID": "w06-1/slides.html#r-on-its-own-demonstration",
    "href": "w06-1/slides.html#r-on-its-own-demonstration",
    "title": "Introduction to Quarto = Python + R",
    "section": "R-On-Its-Own Demonstration",
    "text": "R-On-Its-Own Demonstration\n\nCreate a hello.r file, with the following content:\n\n\nhello.r\n\nprint(\"Hello from R!\")\n\nNow open Terminal (in VSCode: Right click in Explorer panel ‚Üí ‚ÄúOpen in Integrated Terminal‚Äù) and execute\nRscript hello.r\nYou should see the following output:\n[1] \"Hello from R!\"\n(Plz notice the similarity with Python!)"
  },
  {
    "objectID": "w06-1/slides.html#r-in-rstudio-demonstration",
    "href": "w06-1/slides.html#r-in-rstudio-demonstration",
    "title": "Introduction to Quarto = Python + R",
    "section": "R-in-RStudio Demonstration",
    "text": "R-in-RStudio Demonstration\n\nSimilarly to Jupyter, you can think of RStudio as a fancy ‚Äúwrapper‚Äù around R (an IDE)\nYou can (probably should) install RStudio locally, BUT‚Ä¶\nI want to instead use this as an opportunity to introduce you to Posit.Cloud!\nThe resources provided by the free account will be sufficient for any assignments/projects in my sections! (The Jeff Guarantee‚Ñ¢)"
  },
  {
    "objectID": "w06-1/slides.html#r-markdown-.rmd-files",
    "href": "w06-1/slides.html#r-markdown-.rmd-files",
    "title": "Introduction to Quarto = Python + R",
    "section": "R Markdown (.rmd) Files",
    "text": "R Markdown (.rmd) Files\n\n(Warning: Soon to be obsolete! Replaced by very similar .qmd, Quarto Markdown üòâ)\nChoose ‚ÄúNew Blank File‚Äù ‚Üí ‚ÄúR Markdown‚Ä¶‚Äù (in the Files Pane, bottom right of RStudio) to create hello.Rmd:\n\n\n\n\nhello.Rmd\n\n---\ntitle: \"Hello from R Markdown!\"\n---\n\n## Introduction\n\nHello here is some R code\n\n```{r}\nprint(\"Hello from R\")\n```\n\n## A Cool Table\n\n| Problem | Solution |\n|:-:|:-:|\n| $3^5$ | 243 |\n\n\n\n‚Üí"
  },
  {
    "objectID": "w06-1/slides.html#literate-programming-transparent-science",
    "href": "w06-1/slides.html#literate-programming-transparent-science",
    "title": "Introduction to Quarto = Python + R",
    "section": "Literate Programming = Transparent Science!",
    "text": "Literate Programming = Transparent Science!\n\nAcademic papers, video demonstrations, etc., can hide more than they reveal\n\nEx: Look at all these UI Templates on Canva!\n\nGiven a plot in some paper‚Ä¶ How do we know they didn‚Äôt just ‚Äútweak‚Äù the settings, for hours on end, to produce the result they wanted? (\\(\\neq\\) ethical science)\nOne answer: if they provide the code that produced the figure, then we can interrogate their settings/choices, and change them, to see if the result still holds!"
  },
  {
    "objectID": "w06-1/slides.html#markdown-r-python-rightarrow-quarto",
    "href": "w06-1/slides.html#markdown-r-python-rightarrow-quarto",
    "title": "Introduction to Quarto = Python + R",
    "section": "Markdown + R + Python \\(\\rightarrow\\) Quarto",
    "text": "Markdown + R + Python \\(\\rightarrow\\) Quarto\n\nMarkdown is basically glorified plaintext: text+basic formatting (bold, italics, headings, links, tables)\nR is just a program that lives on your computer and executes R code\nPython is just a program that lives on your computer and executes Python code\nQuarto is a wrapper around R and Python, allowing you to write .qmd (Quarto MarkDown) files: Markdown documents containing R and Python code!"
  },
  {
    "objectID": "w06-1/slides.html#quarto-building-blocks",
    "href": "w06-1/slides.html#quarto-building-blocks",
    "title": "Introduction to Quarto = Python + R",
    "section": "Quarto Building Blocks",
    "text": "Quarto Building Blocks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGUI wrapper around R (Integrated Development Environment = IDE)\nRun blocks of R code (from .Rmd)\n\n\n\nThe R Language \n\nProgramming language\nRscript &lt;script&gt;.r\n\n\n\n\n\n\n+\n\n\n\n\n\n\n\n\n\nGUI wrapper around Python (IDE)\nRun blocks of Python code (from .ipynb)\n\n\n\n\nThe Python Language\n\nProgramming language\npython &lt;script&gt;.py"
  },
  {
    "objectID": "w06-1/slides.html#reproducibility-and-literate-programming",
    "href": "w06-1/slides.html#reproducibility-and-literate-programming",
    "title": "Introduction to Quarto = Python + R",
    "section": "Reproducibility and Literate Programming",
    "text": "Reproducibility and Literate Programming\n\nReproducible document: includes both the content (text, tables, figures) and the code that generated it\n\ntldr: If you‚Äôre copying-and-pasting results from your code output to your results document, a red flag should go off in your head!\n\nLiterate programming: Human-readable explanations are included alongside code, within a single document."
  },
  {
    "objectID": "w06-1/slides.html#so-what-is-r",
    "href": "w06-1/slides.html#so-what-is-r",
    "title": "Introduction to Quarto = Python + R",
    "section": "So‚Ä¶ What is R?",
    "text": "So‚Ä¶ What is R?\n\nPython was created mainly for software engineers\n\nStatistical computing functionality requires 3rd-party imports: NumPy, SciPy, scikit-learn\n\nR was created mainly for statisticians\n\nSoftware engineering functionality often requires 3rd-party libraries: e.g., purrr (for Python-style lambda functions)\n\nOne key implication for DSAN: probability distributions (Normal, Binomial, etc.) are built into R! (Available through NumPy in Python)"
  },
  {
    "objectID": "w06-1/slides.html#probability-distribution-example",
    "href": "w06-1/slides.html#probability-distribution-example",
    "title": "Introduction to Quarto = Python + R",
    "section": "Probability Distribution Example",
    "text": "Probability Distribution Example\nDon‚Äôt worry about the details of the code for now! Just note how‚Ä¶\n\n\nrbinom() is built into R, whereas\n\nset.seed(1234)\ncoin_results &lt;- rbinom(n=20, size=10, prob=0.5)\nprint(coin_results)\n\n [1] 3 5 5 6 7 6 1 4 6 5 6 5 4 7 4 7 4 4 4 4\n\nclass(coin_results)\n\n[1] \"integer\"\n\n\n\n\nCode\nlibrary(tidyverse)\ncoin_flip_df &lt;- tibble(num_heads = coin_results)\nggplot(coin_flip_df, aes(x=num_heads)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\nrng.binomial() requires NumPy\n\nimport numpy as np\nrng = np.random.default_rng(seed=1234)\nten_coin_results = rng.binomial(n=10, p=0.5, size=20)\nprint(ten_coin_results)\n\n[8 5 7 4 4 3 4 4 8 4 5 5 7 7 6 6 6 4 4 7]\n\ntype(ten_coin_results)\n\n&lt;class 'numpy.ndarray'&gt;\n\n\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nresult_plot = plt.figure()\nresult_plot.set_figheight(3.5)\ncoin_flip_df = pd.DataFrame({'num_heads': ten_coin_results})\nresult_plot = sns.histplot(data=coin_flip_df, x='num_heads')\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "w06-1/slides.html#the-moment-youve-been-waiting-for",
    "href": "w06-1/slides.html#the-moment-youve-been-waiting-for",
    "title": "Introduction to Quarto = Python + R",
    "section": "The Moment You‚Äôve Been Waiting For ü§Ø",
    "text": "The Moment You‚Äôve Been Waiting For ü§Ø\n\nHow did I include both R and Python code (and its outputs) in the previous slide?\nQuarto allows integration of R+Python via code blocks!\n\n\n\n\nmy_file.qmd\n\n```{python}\nprint(\"Hello from Python!\")\n```\n\n```{r}\nprint(\"Hello from R!\")\n```\n\n\n‚Üí\n\nHello from Python!\n\nHello from R!"
  },
  {
    "objectID": "w06-1/slides.html#the-takeaway-python-and-r",
    "href": "w06-1/slides.html#the-takeaway-python-and-r",
    "title": "Introduction to Quarto = Python + R",
    "section": "The Takeaway: Python and R",
    "text": "The Takeaway: Python and R\n\nQuarto enables switching from Python to R at any point!\nSo, as we start on our R journey, try to identify its strengths and weaknesses relative to Python\nGiven a particular task‚Äîweb scraping, data cleaning, exploratory data analysis, training a machine learning model, etc.‚Äîlearn how to do it in both Python and R, then evaluate which one ‚Äúclicks‚Äù more with you\n(In other words, my ask: if you already know how to do something in Python, pls be open to learning it in R as well! You might find it‚Äôs easier‚Äîtry your best to consciously avoid getting ‚Äúlocked into‚Äù one language)\n\n\nThis also holds for Base R to Tidyverse!\n\n\n\n\n2024 DSAN Bootcamp W6.1: Intro to Quarto"
  },
  {
    "objectID": "w06.html",
    "href": "w06.html",
    "title": "Bootcamp Week 6",
    "section": "",
    "text": "Welcome to Week 6 of the 2024 DSAN Bootcamp! This week we will be covering the following topics:"
  },
  {
    "objectID": "w06.html#lectures",
    "href": "w06.html#lectures",
    "title": "Bootcamp Week 6",
    "section": "Lectures",
    "text": "Lectures\n\nPart 1: Introduction to Quarto\nClick to open slides in a separate tab \n\n\n\n\nPart 2a: Installing Quarto on macOS\n\n\n\n\nPart 2b: Installing Quarto on Windows\n\n\n\n\nPart 3: Introduction to R\nClick to open slides in a separate tab"
  },
  {
    "objectID": "w06.html#assignment",
    "href": "w06.html#assignment",
    "title": "Bootcamp Week 6",
    "section": "Assignment",
    "text": "Assignment\nOnce you have digested the lectures, you will be able to do the assignment for week 6!\n\nTo preview the assignment, click here\nOnce you‚Äôre ready to begin working on it, however, you should download the .zip file, which contains both the assignment .qmd file and the required data files.\n\nFor submission:\n\nPlease create a separate directory for each assignment in your computer.\nRender the answers to html OR pdf with the filename YOUR_NAME_Assignment_6\nPlease submit this inside a .zip file named FIRSTNAME_LASTNAME_Assignment_6.zip. For example: JANE_DOE_Assignment_6.zip\nPlease DO NOT send the .qmd file. If you can‚Äôt render the .qmd file to HTML or PDF then that means there might be an error. Please fix it and only send the rendered version of the .qmd file.\nPlease email the rendered file in .zip format to your TA only."
  },
  {
    "objectID": "w07-2/index.html",
    "href": "w07-2/index.html",
    "title": "Introduction to the Tidyverse",
    "section": "",
    "text": "Open slides in new window ‚Üí"
  },
  {
    "objectID": "w07-2/index.html#tidyverse",
    "href": "w07-2/index.html#tidyverse",
    "title": "Introduction to the Tidyverse",
    "section": "Tidyverse",
    "text": "Tidyverse\n\nThink of data science tasks as involving pipelines:\n\n\n\n\n\n\n\n\nG\n\n\ncluster_00\n\nData-Processing Pipeline 1\n\n\n\nraw\n\nRaw Data\n\n\n\ntr1\n\nTransformation A\n(select(), filter())\n\n\n\nraw-&gt;tr1\n\n\n\n\n\ntr2\n\nTransformation B\n(mutate(), summarize())\n\n\n\ntr1-&gt;tr2\n\n\n\n\n\nviz\n\nVisualization\n\n\n\ntr2-&gt;viz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG\n\n\ncluster_00\n\nData-Processing Pipeline 2\n\n\n\nraw\n\nRaw Data\n\n\n\ntr1\n\nTransformation C\n(select(), filter())\n\n\n\nraw-&gt;tr1\n\n\n\n\n\ntr2\n\nTransformation D\n(mutate(), summarize())\n\n\n\ntr1-&gt;tr2\n\n\n\n\n\nviz\n\n ¬†¬†¬†¬†¬†Result ¬†¬†¬†¬†\n\n\n\ntr2-&gt;viz\n\n\n\n\n\n\n\n\n\n\n\nTidyverse lets you pipe output from one transformation as the input to another:\n\nraw_data |&gt; select() |&gt; mutate() |&gt; visualize()\nraw_data |&gt; filter() |&gt; summarize() |&gt; check_result()"
  },
  {
    "objectID": "w07-2/index.html#selecting-columns",
    "href": "w07-2/index.html#selecting-columns",
    "title": "Introduction to the Tidyverse",
    "section": "Selecting Columns",
    "text": "Selecting Columns\nselect() lets you keep only the columns you care about in your current analysis:\n\nCode\nlibrary(tidyverse)\ntable1\ntable1 |&gt; select(country, year, population)\n\n\n\n\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.2     ‚úî readr     2.1.4\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.4.3     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.2     ‚úî tidyr     1.3.0\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\n\ncountry\nyear\ncases\npopulation\n\n\n\n\nAfghanistan\n1999\n745\n19987071\n\n\nAfghanistan\n2000\n2666\n20595360\n\n\nBrazil\n1999\n37737\n172006362\n\n\nBrazil\n2000\n80488\n174504898\n\n\nChina\n1999\n212258\n1272915272\n\n\nChina\n2000\n213766\n1280428583\n\n\n\n\n\n\n\n\n\n\n\n\ncountry\nyear\npopulation\n\n\n\n\nAfghanistan\n1999\n19987071\n\n\nAfghanistan\n2000\n20595360\n\n\nBrazil\n1999\n172006362\n\n\nBrazil\n2000\n174504898\n\n\nChina\n1999\n1272915272\n\n\nChina\n2000\n1280428583"
  },
  {
    "objectID": "w07-2/index.html#filtering-rows",
    "href": "w07-2/index.html#filtering-rows",
    "title": "Introduction to the Tidyverse",
    "section": "Filtering Rows",
    "text": "Filtering Rows\nfilter() lets you keep only the rows you care about in your current analysis:\n\nCode\ntable1 |&gt; filter(year == 2000)\ntable1 |&gt; filter(country == \"Afghanistan\")\n\n\n\n\n\n\n\n\n\ncountry\nyear\ncases\npopulation\n\n\n\n\nAfghanistan\n2000\n2666\n20595360\n\n\nBrazil\n2000\n80488\n174504898\n\n\nChina\n2000\n213766\n1280428583\n\n\n\n\n\n\n\n\n\n\n\n\ncountry\nyear\ncases\npopulation\n\n\n\n\nAfghanistan\n1999\n745\n19987071\n\n\nAfghanistan\n2000\n2666\n20595360"
  },
  {
    "objectID": "w07-2/index.html#merging-data",
    "href": "w07-2/index.html#merging-data",
    "title": "Introduction to the Tidyverse",
    "section": "Merging Data",
    "text": "Merging Data\n\nThe task: Analyze relationship between population and GDP (in 2000)\nThe data: One dataset on population in 2000, another on GDP in 2000\nLet‚Äôs get the data ready for merging using R\n\n\n\n\n\nCode\ndf &lt;- table1 |&gt;\n  select(country, year, population) |&gt;\n  filter(year == 2000)\ndf |&gt; write_csv(\"assets/pop_2000.csv\")\ndf\n\n\n\n\n\n\ncountry\nyear\npopulation\n\n\n\n\nAfghanistan\n2000\n20595360\n\n\nBrazil\n2000\n174504898\n\n\nChina\n2000\n1280428583\n\n\n\n\n\n\n\n\n\nCode\ngdp_df &lt;- read_csv(\"https://gist.githubusercontent.com/jpowerj/c83e87f61c166dea8ba7e4453f08a404/raw/29b03e6320bc3ffc9f528c2ac497a21f2d801c00/gdp_2000_2010.csv\")\n\n\nRows: 403 Columns: 4\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\nchr (2): Country Name, Country Code\ndbl (2): Year, Value\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\ngdp_df |&gt; head(5)\n\n\n\n\n\n\nCountry Name\nCountry Code\nYear\nValue\n\n\n\n\nAfghanistan\nAFG\n2010\n15936800636\n\n\nAlbania\nALB\n2000\n3632043908\n\n\nAlbania\nALB\n2010\n11926953259\n\n\nAlgeria\nDZA\n2000\n54790245601\n\n\nAlgeria\nDZA\n2010\n161207268655"
  },
  {
    "objectID": "w07-2/index.html#selectingfiltering-in-action",
    "href": "w07-2/index.html#selectingfiltering-in-action",
    "title": "Introduction to the Tidyverse",
    "section": "Selecting/Filtering in Action",
    "text": "Selecting/Filtering in Action\n\n\nCode\ngdp_2000_df &lt;- gdp_df |&gt;\n  select(`Country Name`,Year,Value) |&gt;\n  filter(Year == \"2000\") |&gt;\n  rename(country=`Country Name`, year=`Year`, gdp=`Value`)\ngdp_2000_df |&gt; write_csv(\"assets/gdp_2000.csv\")\ngdp_2000_df |&gt; head()\n\n\n\n\n\n\ncountry\nyear\ngdp\n\n\n\n\nAlbania\n2000\n3632043908\n\n\nAlgeria\n2000\n54790245601\n\n\nAndorra\n2000\n1434429703\n\n\nAngola\n2000\n9129594819\n\n\nAntigua and Barbuda\n2000\n830158769\n\n\nArgentina\n2000\n284203750000"
  },
  {
    "objectID": "w07-2/index.html#recommended-language-python",
    "href": "w07-2/index.html#recommended-language-python",
    "title": "Introduction to the Tidyverse",
    "section": "Recommended Language: Python",
    "text": "Recommended Language: Python\nPandas provides an easy-to-use df.merge(other_df)!\n\n\n\nLeft Join\n\n\n\nCode\nmerged_df = pop_df.merge(gdp_df,\n  on='country', how='left', indicator=True\n)\nMarkdown(merged_df.to_markdown())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncountry\nyear_x\npopulation\nyear_y\ngdp\n_merge\n\n\n\n\n0\nAfghanistan\n2000\n20595360\nnan\nnan\nleft_only\n\n\n1\nBrazil\n2000\n174504898\n2000\n6.55421e+11\nboth\n\n\n2\nChina\n2000\n1280428583\n2000\n1.21135e+12\nboth\n\n\n\n\n\n\n\nInner join (‚âà Intersection (\\(\\cap\\)))\n\n\n\nCode\nmerged_df = pop_df.merge(gdp_df,\n  on='country', how='inner', indicator=True\n)\nMarkdown(merged_df.to_markdown())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncountry\nyear_x\npopulation\nyear_y\ngdp\n_merge\n\n\n\n\n0\nBrazil\n2000\n174504898\n2000\n6.55421e+11\nboth\n\n\n1\nChina\n2000\n1280428583\n2000\n1.21135e+12\nboth"
  },
  {
    "objectID": "w07-2/index.html#reshaping-data",
    "href": "w07-2/index.html#reshaping-data",
    "title": "Introduction to the Tidyverse",
    "section": "Reshaping Data",
    "text": "Reshaping Data\nSometimes you can‚Äôt merge because one of the datasets looks like the table on the left, but we want it to look like the table on the right\n\n\nIn data-cleaning jargon, this dataset is long (more than one row per observation)\n\n\nCode\ntable2 |&gt; write_csv(\"assets/long_data.csv\")\ntable2 |&gt; head()\n\n\n\n\n\n\ncountry\nyear\ntype\ncount\n\n\n\n\nAfghanistan\n1999\ncases\n745\n\n\nAfghanistan\n1999\npopulation\n19987071\n\n\nAfghanistan\n2000\ncases\n2666\n\n\nAfghanistan\n2000\npopulation\n20595360\n\n\nBrazil\n1999\ncases\n37737\n\n\nBrazil\n1999\npopulation\n172006362\n\n\n\n\n\n\n\nIn data-cleaning jargon, this dataset is wide (one row per obs; usually tidy)\n\n\nCode\ntable1 |&gt; write_csv(\"assets/wide_data.csv\")\ntable1 |&gt; head()\n\n\n\n\n\n\ncountry\nyear\ncases\npopulation\n\n\n\n\nAfghanistan\n1999\n745\n19987071\n\n\nAfghanistan\n2000\n2666\n20595360\n\n\nBrazil\n1999\n37737\n172006362\n\n\nBrazil\n2000\n80488\n174504898\n\n\nChina\n1999\n212258\n1272915272\n\n\nChina\n2000\n213766\n1280428583"
  },
  {
    "objectID": "w07-2/index.html#reshaping-long-to-wide-in-python-pd.pivot",
    "href": "w07-2/index.html#reshaping-long-to-wide-in-python-pd.pivot",
    "title": "Introduction to the Tidyverse",
    "section": "Reshaping Long-to-Wide in Python: pd.pivot()",
    "text": "Reshaping Long-to-Wide in Python: pd.pivot()\n\n\nCreate unique ID for wide version:\n\n\nCode\nlong_df['id'] = long_df['country'] + '_' + long_df['year'].apply(str)\n# Reorder the columns, so it shows the id first\nlong_df = long_df[['id','country','year','type','count']]\nprint(long_df.head(6).to_markdown())\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\ncountry\nyear\ntype\ncount\n\n\n\n\n0\nAfghanistan_1999\nAfghanistan\n1999\ncases\n745\n\n\n1\nAfghanistan_1999\nAfghanistan\n1999\npopulation\n19987071\n\n\n2\nAfghanistan_2000\nAfghanistan\n2000\ncases\n2666\n\n\n3\nAfghanistan_2000\nAfghanistan\n2000\npopulation\n20595360\n\n\n4\nBrazil_1999\nBrazil\n1999\ncases\n37737\n\n\n5\nBrazil_1999\nBrazil\n1999\npopulation\n172006362\n\n\n\n\n\n\n\nCode\nreshaped_df = pd.pivot(long_df,\n  index='id',\n  columns='type',\n  values='count'\n)\nprint(reshaped_df.to_markdown())\n\n\n\n\nid\ncases\npopulation\n\n\n\n\nAfghanistan_1999\n745\n1.99871e+07\n\n\nAfghanistan_2000\n2666\n2.05954e+07\n\n\nBrazil_1999\n37737\n1.72006e+08\n\n\nBrazil_2000\n80488\n1.74505e+08\n\n\nChina_1999\n212258\n1.27292e+09\n\n\nChina_2000\n213766\n1.28043e+09"
  },
  {
    "objectID": "w07-2/index.html#the-other-direction-wide-to-long-pd.melt",
    "href": "w07-2/index.html#the-other-direction-wide-to-long-pd.melt",
    "title": "Introduction to the Tidyverse",
    "section": "The Other Direction (Wide-to-Long): pd.melt()",
    "text": "The Other Direction (Wide-to-Long): pd.melt()\n\n\n\n\nCode\nwide_df = pd.read_csv(\"assets/wide_data.csv\")\nprint(wide_df.to_markdown())\n\n\n\n\n\ncountry\nyear\ncases\npopulation\n\n\n\n\n0\nAfghanistan\n1999\n745\n19987071\n\n\n1\nAfghanistan\n2000\n2666\n20595360\n\n\n2\nBrazil\n1999\n37737\n172006362\n\n\n3\nBrazil\n2000\n80488\n174504898\n\n\n4\nChina\n1999\n212258\n1272915272\n\n\n5\nChina\n2000\n213766\n1280428583\n\n\n\n\n\n\n\nCode\nlong_df = pd.melt(wide_df,\n  id_vars=['country','year'],\n  value_vars=['cases','population']\n)\nprint(long_df.head(6).to_markdown())\n\n\n\n\n\ncountry\nyear\nvariable\nvalue\n\n\n\n\n0\nAfghanistan\n1999\ncases\n745\n\n\n1\nAfghanistan\n2000\ncases\n2666\n\n\n2\nBrazil\n1999\ncases\n37737\n\n\n3\nBrazil\n2000\ncases\n80488\n\n\n4\nChina\n1999\ncases\n212258\n\n\n5\nChina\n2000\ncases\n213766"
  },
  {
    "objectID": "w07-2/index.html#wide-to-long-in-r-gather",
    "href": "w07-2/index.html#wide-to-long-in-r-gather",
    "title": "Introduction to the Tidyverse",
    "section": "Wide-to-Long in R: gather()",
    "text": "Wide-to-Long in R: gather()\n\n\n\n\nCode\ntable1\n\n\n\n\n\n\ncountry\nyear\ncases\npopulation\n\n\n\n\nAfghanistan\n1999\n745\n19987071\n\n\nAfghanistan\n2000\n2666\n20595360\n\n\nBrazil\n1999\n37737\n172006362\n\n\nBrazil\n2000\n80488\n174504898\n\n\nChina\n1999\n212258\n1272915272\n\n\nChina\n2000\n213766\n1280428583\n\n\n\n\n\n\n\n\n\nCode\nlong_df &lt;- gather(table1,\n  key = \"variable\",\n  value = cases,\n  -c(country, year)\n)\nlong_df |&gt; head()\n\n\n\n\n\n\ncountry\nyear\nvariable\ncases\n\n\n\n\nAfghanistan\n1999\ncases\n745\n\n\nAfghanistan\n2000\ncases\n2666\n\n\nBrazil\n1999\ncases\n37737\n\n\nBrazil\n2000\ncases\n80488\n\n\nChina\n1999\ncases\n212258\n\n\nChina\n2000\ncases\n213766"
  },
  {
    "objectID": "w07-2/slides.html#tidyverse",
    "href": "w07-2/slides.html#tidyverse",
    "title": "Introduction to the Tidyverse",
    "section": "Tidyverse",
    "text": "Tidyverse\n\nThink of data science tasks as involving pipelines:\n\n\n\n\n\n\n\n\nG\n\n\ncluster_00\n\nData-Processing Pipeline 1\n\n\n\nraw\n\nRaw Data\n\n\n\ntr1\n\nTransformation A\n(select(), filter())\n\n\n\nraw-&gt;tr1\n\n\n\n\n\ntr2\n\nTransformation B\n(mutate(), summarize())\n\n\n\ntr1-&gt;tr2\n\n\n\n\n\nviz\n\nVisualization\n\n\n\ntr2-&gt;viz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG\n\n\ncluster_00\n\nData-Processing Pipeline 2\n\n\n\nraw\n\nRaw Data\n\n\n\ntr1\n\nTransformation C\n(select(), filter())\n\n\n\nraw-&gt;tr1\n\n\n\n\n\ntr2\n\nTransformation D\n(mutate(), summarize())\n\n\n\ntr1-&gt;tr2\n\n\n\n\n\nviz\n\n ¬†¬†¬†¬†¬†Result ¬†¬†¬†¬†\n\n\n\ntr2-&gt;viz\n\n\n\n\n\n\n\n\n\n\n\nTidyverse lets you pipe output from one transformation as the input to another:\n\nraw_data |&gt; select() |&gt; mutate() |&gt; visualize()\nraw_data |&gt; filter() |&gt; summarize() |&gt; check_result()"
  },
  {
    "objectID": "w07-2/slides.html#selecting-columns",
    "href": "w07-2/slides.html#selecting-columns",
    "title": "Introduction to the Tidyverse",
    "section": "Selecting Columns",
    "text": "Selecting Columns\nselect() lets you keep only the columns you care about in your current analysis:\nlibrary(tidyverse)\ntable1\ntable1 |&gt; select(country, year, population)\n\n\n\n\n\n\n\n\ncountry\nyear\ncases\npopulation\n\n\n\n\nAfghanistan\n1999\n745\n19987071\n\n\nAfghanistan\n2000\n2666\n20595360\n\n\nBrazil\n1999\n37737\n172006362\n\n\nBrazil\n2000\n80488\n174504898\n\n\nChina\n1999\n212258\n1272915272\n\n\nChina\n2000\n213766\n1280428583\n\n\n\n\n\n\n\n\n\n\n\n\ncountry\nyear\npopulation\n\n\n\n\nAfghanistan\n1999\n19987071\n\n\nAfghanistan\n2000\n20595360\n\n\nBrazil\n1999\n172006362\n\n\nBrazil\n2000\n174504898\n\n\nChina\n1999\n1272915272\n\n\nChina\n2000\n1280428583"
  },
  {
    "objectID": "w07-2/slides.html#filtering-rows",
    "href": "w07-2/slides.html#filtering-rows",
    "title": "Introduction to the Tidyverse",
    "section": "Filtering Rows",
    "text": "Filtering Rows\nfilter() lets you keep only the rows you care about in your current analysis:\ntable1 |&gt; filter(year == 2000)\ntable1 |&gt; filter(country == \"Afghanistan\")\n\n\n\n\n\n\n\n\ncountry\nyear\ncases\npopulation\n\n\n\n\nAfghanistan\n2000\n2666\n20595360\n\n\nBrazil\n2000\n80488\n174504898\n\n\nChina\n2000\n213766\n1280428583\n\n\n\n\n\n\n\n\n\n\n\n\ncountry\nyear\ncases\npopulation\n\n\n\n\nAfghanistan\n1999\n745\n19987071\n\n\nAfghanistan\n2000\n2666\n20595360"
  },
  {
    "objectID": "w07-2/slides.html#merging-data",
    "href": "w07-2/slides.html#merging-data",
    "title": "Introduction to the Tidyverse",
    "section": "Merging Data",
    "text": "Merging Data\n\nThe task: Analyze relationship between population and GDP (in 2000)\nThe data: One dataset on population in 2000, another on GDP in 2000\nLet‚Äôs get the data ready for merging using R\n\n\n\n\ndf &lt;- table1 |&gt;\n  select(country, year, population) |&gt;\n  filter(year == 2000)\ndf |&gt; write_csv(\"assets/pop_2000.csv\")\ndf\n\n\n\n\n\ncountry\nyear\npopulation\n\n\n\n\nAfghanistan\n2000\n20595360\n\n\nBrazil\n2000\n174504898\n\n\nChina\n2000\n1280428583\n\n\n\n\n\n\n\n\n\nCode\ngdp_df &lt;- read_csv(\"https://gist.githubusercontent.com/jpowerj/c83e87f61c166dea8ba7e4453f08a404/raw/29b03e6320bc3ffc9f528c2ac497a21f2d801c00/gdp_2000_2010.csv\")\ngdp_df |&gt; head(5)\n\n\n\n\n\n\nCountry Name\nCountry Code\nYear\nValue\n\n\n\n\nAfghanistan\nAFG\n2010\n15936800636\n\n\nAlbania\nALB\n2000\n3632043908\n\n\nAlbania\nALB\n2010\n11926953259\n\n\nAlgeria\nDZA\n2000\n54790245601\n\n\nAlgeria\nDZA\n2010\n161207268655"
  },
  {
    "objectID": "w07-2/slides.html#selectingfiltering-in-action",
    "href": "w07-2/slides.html#selectingfiltering-in-action",
    "title": "Introduction to the Tidyverse",
    "section": "Selecting/Filtering in Action",
    "text": "Selecting/Filtering in Action\n\n\nCode\ngdp_2000_df &lt;- gdp_df |&gt;\n  select(`Country Name`,Year,Value) |&gt;\n  filter(Year == \"2000\") |&gt;\n  rename(country=`Country Name`, year=`Year`, gdp=`Value`)\ngdp_2000_df |&gt; write_csv(\"assets/gdp_2000.csv\")\ngdp_2000_df |&gt; head()\n\n\n\n\n\n\ncountry\nyear\ngdp\n\n\n\n\nAlbania\n2000\n3632043908\n\n\nAlgeria\n2000\n54790245601\n\n\nAndorra\n2000\n1434429703\n\n\nAngola\n2000\n9129594819\n\n\nAntigua and Barbuda\n2000\n830158769\n\n\nArgentina\n2000\n284203750000"
  },
  {
    "objectID": "w07-2/slides.html#recommended-language-python",
    "href": "w07-2/slides.html#recommended-language-python",
    "title": "Introduction to the Tidyverse",
    "section": "Recommended Language: Python",
    "text": "Recommended Language: Python\nPandas provides an easy-to-use df.merge(other_df)!\n\n\n\nLeft Join\n\n\n\nCode\nmerged_df = pop_df.merge(gdp_df,\n  on='country', how='left', indicator=True\n)\nMarkdown(merged_df.to_markdown())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncountry\nyear_x\npopulation\nyear_y\ngdp\n_merge\n\n\n\n\n0\nAfghanistan\n2000\n20595360\nnan\nnan\nleft_only\n\n\n1\nBrazil\n2000\n174504898\n2000\n6.55421e+11\nboth\n\n\n2\nChina\n2000\n1280428583\n2000\n1.21135e+12\nboth\n\n\n\n\n\n\n\nInner join (‚âà Intersection (\\(\\cap\\)))\n\n\n\nCode\nmerged_df = pop_df.merge(gdp_df,\n  on='country', how='inner', indicator=True\n)\nMarkdown(merged_df.to_markdown())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncountry\nyear_x\npopulation\nyear_y\ngdp\n_merge\n\n\n\n\n0\nBrazil\n2000\n174504898\n2000\n6.55421e+11\nboth\n\n\n1\nChina\n2000\n1280428583\n2000\n1.21135e+12\nboth"
  },
  {
    "objectID": "w07-2/slides.html#reshaping-data",
    "href": "w07-2/slides.html#reshaping-data",
    "title": "Introduction to the Tidyverse",
    "section": "Reshaping Data",
    "text": "Reshaping Data\nSometimes you can‚Äôt merge because one of the datasets looks like the table on the left, but we want it to look like the table on the right\n\n\nIn data-cleaning jargon, this dataset is long (more than one row per observation)\n\ntable2 |&gt; write_csv(\"assets/long_data.csv\")\ntable2 |&gt; head()\n\n\n\n\n\ncountry\nyear\ntype\ncount\n\n\n\n\nAfghanistan\n1999\ncases\n745\n\n\nAfghanistan\n1999\npopulation\n19987071\n\n\nAfghanistan\n2000\ncases\n2666\n\n\nAfghanistan\n2000\npopulation\n20595360\n\n\nBrazil\n1999\ncases\n37737\n\n\nBrazil\n1999\npopulation\n172006362\n\n\n\n\n\n\n\nIn data-cleaning jargon, this dataset is wide (one row per obs; usually tidy)\n\ntable1 |&gt; write_csv(\"assets/wide_data.csv\")\ntable1 |&gt; head()\n\n\n\n\n\ncountry\nyear\ncases\npopulation\n\n\n\n\nAfghanistan\n1999\n745\n19987071\n\n\nAfghanistan\n2000\n2666\n20595360\n\n\nBrazil\n1999\n37737\n172006362\n\n\nBrazil\n2000\n80488\n174504898\n\n\nChina\n1999\n212258\n1272915272\n\n\nChina\n2000\n213766\n1280428583"
  },
  {
    "objectID": "w07-2/slides.html#reshaping-long-to-wide-in-python-pd.pivot",
    "href": "w07-2/slides.html#reshaping-long-to-wide-in-python-pd.pivot",
    "title": "Introduction to the Tidyverse",
    "section": "Reshaping Long-to-Wide in Python: pd.pivot()",
    "text": "Reshaping Long-to-Wide in Python: pd.pivot()\n\n\nCreate unique ID for wide version:\n\n\nCode\nlong_df['id'] = long_df['country'] + '_' + long_df['year'].apply(str)\n# Reorder the columns, so it shows the id first\nlong_df = long_df[['id','country','year','type','count']]\nprint(long_df.head(6).to_markdown())\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\ncountry\nyear\ntype\ncount\n\n\n\n\n0\nAfghanistan_1999\nAfghanistan\n1999\ncases\n745\n\n\n1\nAfghanistan_1999\nAfghanistan\n1999\npopulation\n19987071\n\n\n2\nAfghanistan_2000\nAfghanistan\n2000\ncases\n2666\n\n\n3\nAfghanistan_2000\nAfghanistan\n2000\npopulation\n20595360\n\n\n4\nBrazil_1999\nBrazil\n1999\ncases\n37737\n\n\n5\nBrazil_1999\nBrazil\n1999\npopulation\n172006362\n\n\n\n\n\n\n\nCode\nreshaped_df = pd.pivot(long_df,\n  index='id',\n  columns='type',\n  values='count'\n)\nprint(reshaped_df.to_markdown())\n\n\n\n\nid\ncases\npopulation\n\n\n\n\nAfghanistan_1999\n745\n1.99871e+07\n\n\nAfghanistan_2000\n2666\n2.05954e+07\n\n\nBrazil_1999\n37737\n1.72006e+08\n\n\nBrazil_2000\n80488\n1.74505e+08\n\n\nChina_1999\n212258\n1.27292e+09\n\n\nChina_2000\n213766\n1.28043e+09"
  },
  {
    "objectID": "w07-2/slides.html#the-other-direction-wide-to-long-pd.melt",
    "href": "w07-2/slides.html#the-other-direction-wide-to-long-pd.melt",
    "title": "Introduction to the Tidyverse",
    "section": "The Other Direction (Wide-to-Long): pd.melt()",
    "text": "The Other Direction (Wide-to-Long): pd.melt()\n\n\n\n\nCode\nwide_df = pd.read_csv(\"assets/wide_data.csv\")\nprint(wide_df.to_markdown())\n\n\n\n\n\ncountry\nyear\ncases\npopulation\n\n\n\n\n0\nAfghanistan\n1999\n745\n19987071\n\n\n1\nAfghanistan\n2000\n2666\n20595360\n\n\n2\nBrazil\n1999\n37737\n172006362\n\n\n3\nBrazil\n2000\n80488\n174504898\n\n\n4\nChina\n1999\n212258\n1272915272\n\n\n5\nChina\n2000\n213766\n1280428583\n\n\n\n\n\n\n\nCode\nlong_df = pd.melt(wide_df,\n  id_vars=['country','year'],\n  value_vars=['cases','population']\n)\nprint(long_df.head(6).to_markdown())\n\n\n\n\n\ncountry\nyear\nvariable\nvalue\n\n\n\n\n0\nAfghanistan\n1999\ncases\n745\n\n\n1\nAfghanistan\n2000\ncases\n2666\n\n\n2\nBrazil\n1999\ncases\n37737\n\n\n3\nBrazil\n2000\ncases\n80488\n\n\n4\nChina\n1999\ncases\n212258\n\n\n5\nChina\n2000\ncases\n213766"
  },
  {
    "objectID": "w07-2/slides.html#wide-to-long-in-r-gather",
    "href": "w07-2/slides.html#wide-to-long-in-r-gather",
    "title": "Introduction to the Tidyverse",
    "section": "Wide-to-Long in R: gather()",
    "text": "Wide-to-Long in R: gather()\n\n\n\n\nCode\ntable1\n\n\n\n\n\n\ncountry\nyear\ncases\npopulation\n\n\n\n\nAfghanistan\n1999\n745\n19987071\n\n\nAfghanistan\n2000\n2666\n20595360\n\n\nBrazil\n1999\n37737\n172006362\n\n\nBrazil\n2000\n80488\n174504898\n\n\nChina\n1999\n212258\n1272915272\n\n\nChina\n2000\n213766\n1280428583\n\n\n\n\n\n\n\n\n\nCode\nlong_df &lt;- gather(table1,\n  key = \"variable\",\n  value = cases,\n  -c(country, year)\n)\nlong_df |&gt; head()\n\n\n\n\n\n\ncountry\nyear\nvariable\ncases\n\n\n\n\nAfghanistan\n1999\ncases\n745\n\n\nAfghanistan\n2000\ncases\n2666\n\n\nBrazil\n1999\ncases\n37737\n\n\nBrazil\n2000\ncases\n80488\n\n\nChina\n1999\ncases\n212258\n\n\nChina\n2000\ncases\n213766\n\n\n\n\n\n\n\n\n\n\n\n2024 DSAN Bootcamp W07-2: Tidyverse"
  },
  {
    "objectID": "w07-assignment.html",
    "href": "w07-assignment.html",
    "title": "Assignment 7",
    "section": "",
    "text": "Let‚Äôs create a function for the \\(K\\)-means clustering algorithm, in R!\n\nDetails of the Above Figure:\nThe progress of the \\(K\\)-means algorithm with \\(K = 3\\).\n\nTop left: The observations are shown.\nTop center: In Step 1 of the algorithm, each observation is randomly assigned to a cluster using some kind of a label. It could be ‚Äú1‚Äù, ‚Äú2‚Äù or ‚Äúgreen‚Äù, ‚Äúred‚Äù etc.\nTop right: In Step 2(a), the cluster centroids are computed by taking the mean of each cluster assignment. These are shown as large colored disks. Initially the centroids are almost completely overlapping because the initial cluster assignments were chosen at random.\nBottom left: In Step 2(b), each observation is assigned to the nearest centroid. This is done by computing the euclidean distance between each point and each of the cluster centers. Each point is assigned to the centroid that resulted in the smallest euclidean distance.\nBottom center: Step 2(a) is once again performed, leading to new cluster centroids.\nBottom right: The results obtained after 10 iterations.\n\nThink about:\n\nThe iterative steps for the algorithm. What is the starting point? What is the update rule for the centroids? What is the update rule for the ‚Äúassignment‚Äù of each data point to a cluster?\nWhat data structures might you use for implementing this algorithm? DataFrames or vectors would be fine, just think about what you need to keep track of during each iteration.\nWithin your implementation, create a way to visualize our 2D dataset during each implementation. That is, it is helpful to visualize the cluster ‚Äúassignments‚Äù and centroids during each iteration.\n\nLet‚Äôs first look at a simple simulated example in which there are only two real clusters in the data. We will create a dataset where the first 25 observations have a mean shift relative to the next 25 observations.\n\nlibrary(tidyverse)\nset.seed(2024)\nN &lt;- 200\ngen_clusters = function(N, dist) {\n  cluster_size &lt;- round(N / 2)\n  mu_1 &lt;- c(-dist/2,-dist/2)\n  mu_2 &lt;- c(dist/2, dist/2)\n  Sigma &lt;- matrix(c(1, 0, 0, 1), nrow=2, ncol=2, byrow=TRUE)\n  c1_points &lt;- MASS::mvrnorm(cluster_size, mu_1, Sigma)\n  colnames(c1_points) &lt;- c(\"X1\", \"X2\")\n  c1_points &lt;- as_tibble(c1_points)\n  c1_points &lt;- c1_points |&gt; mutate(label = \"1\")\n  c2_points &lt;- MASS::mvrnorm(cluster_size, mu_2, Sigma)\n  colnames(c2_points) &lt;- c(\"X1\", \"X2\")\n  c2_points &lt;- as_tibble(c2_points)\n  c2_points &lt;- c2_points |&gt; mutate(label = \"2\")\n  return(rbind(c1_points, c2_points))\n}\nlinear_data &lt;- gen_clusters(N, 4.5)\nlinear_data |&gt;\n  ggplot(aes(x=X1, y=X2, color=label)) +\n  geom_point() +\n  theme_classic()"
  },
  {
    "objectID": "w07-assignment.html#k-means-clustering-overview",
    "href": "w07-assignment.html#k-means-clustering-overview",
    "title": "Assignment 7",
    "section": "",
    "text": "Let‚Äôs create a function for the \\(K\\)-means clustering algorithm, in R!\n\nDetails of the Above Figure:\nThe progress of the \\(K\\)-means algorithm with \\(K = 3\\).\n\nTop left: The observations are shown.\nTop center: In Step 1 of the algorithm, each observation is randomly assigned to a cluster using some kind of a label. It could be ‚Äú1‚Äù, ‚Äú2‚Äù or ‚Äúgreen‚Äù, ‚Äúred‚Äù etc.\nTop right: In Step 2(a), the cluster centroids are computed by taking the mean of each cluster assignment. These are shown as large colored disks. Initially the centroids are almost completely overlapping because the initial cluster assignments were chosen at random.\nBottom left: In Step 2(b), each observation is assigned to the nearest centroid. This is done by computing the euclidean distance between each point and each of the cluster centers. Each point is assigned to the centroid that resulted in the smallest euclidean distance.\nBottom center: Step 2(a) is once again performed, leading to new cluster centroids.\nBottom right: The results obtained after 10 iterations.\n\nThink about:\n\nThe iterative steps for the algorithm. What is the starting point? What is the update rule for the centroids? What is the update rule for the ‚Äúassignment‚Äù of each data point to a cluster?\nWhat data structures might you use for implementing this algorithm? DataFrames or vectors would be fine, just think about what you need to keep track of during each iteration.\nWithin your implementation, create a way to visualize our 2D dataset during each implementation. That is, it is helpful to visualize the cluster ‚Äúassignments‚Äù and centroids during each iteration.\n\nLet‚Äôs first look at a simple simulated example in which there are only two real clusters in the data. We will create a dataset where the first 25 observations have a mean shift relative to the next 25 observations.\n\nlibrary(tidyverse)\nset.seed(2024)\nN &lt;- 200\ngen_clusters = function(N, dist) {\n  cluster_size &lt;- round(N / 2)\n  mu_1 &lt;- c(-dist/2,-dist/2)\n  mu_2 &lt;- c(dist/2, dist/2)\n  Sigma &lt;- matrix(c(1, 0, 0, 1), nrow=2, ncol=2, byrow=TRUE)\n  c1_points &lt;- MASS::mvrnorm(cluster_size, mu_1, Sigma)\n  colnames(c1_points) &lt;- c(\"X1\", \"X2\")\n  c1_points &lt;- as_tibble(c1_points)\n  c1_points &lt;- c1_points |&gt; mutate(label = \"1\")\n  c2_points &lt;- MASS::mvrnorm(cluster_size, mu_2, Sigma)\n  colnames(c2_points) &lt;- c(\"X1\", \"X2\")\n  c2_points &lt;- as_tibble(c2_points)\n  c2_points &lt;- c2_points |&gt; mutate(label = \"2\")\n  return(rbind(c1_points, c2_points))\n}\nlinear_data &lt;- gen_clusters(N, 4.5)\nlinear_data |&gt;\n  ggplot(aes(x=X1, y=X2, color=label)) +\n  geom_point() +\n  theme_classic()"
  },
  {
    "objectID": "w07-assignment.html#writing-the-k-means-clustering-function",
    "href": "w07-assignment.html#writing-the-k-means-clustering-function",
    "title": "Assignment 7",
    "section": "Writing the K-Means Clustering Function",
    "text": "Writing the K-Means Clustering Function\n\nQuestion 1\nMake a copy of linear_data named df, and then display the first six rows of df by using the pipe operator |&gt; and R‚Äôs built-in head() function.\n\n# your code goes here\n\nSolution:\n\ndf &lt;- linear_data\ndf |&gt; head()\n\n# A tibble: 6 √ó 3\n      X1     X2 label\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;\n1 -4.46  -1.27  1    \n2 -2.69  -1.78  1    \n3 -3.29  -2.36  1    \n4 -2.38  -2.46  1    \n5 -0.985 -1.09  1    \n6 -2.62  -0.958 1    \n\ndim(df)\n\n[1] 200   3\n\n\n\n\nQuestion 2\nCreate a vector named \"labels\" containing the value \"1\" 100 times, followed by the value \"2\" 100 times.\n\n# your code goes here\n\nSolution:\n\n# df &lt;- df |&gt; mutate(\n#   label = c(rep(\"1\", 100), rep(\"2\", 100))\n# )\n# head(df)\n# tail(df)\nlabels &lt;- c(rep(\"1\", N/2), rep(\"2\", N/2))\n\n\n\nQuestion 3\nCreate a new vector named cl_labels, by taking a random sample of size 200 from labels without replacement.\n\n# your code goes here\n\nSolution:\n\ncl_labels &lt;- sample(labels, N)\n\n\n\nQuestion 4\nCreate a new column in df named label, with the entries in cl_labels as its values.\n\n# your code goes here\n\nSolution:\n\ndf &lt;- df |&gt; mutate(\n  label = cl_labels\n)\ndf |&gt; head()\n\n# A tibble: 6 √ó 3\n      X1     X2 label\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;\n1 -4.46  -1.27  1    \n2 -2.69  -1.78  1    \n3 -3.29  -2.36  2    \n4 -2.38  -2.46  1    \n5 -0.985 -1.09  2    \n6 -2.62  -0.958 1    \n\n\n\n\nQuestion 5\nCalculate the cluster centroids, by creating a variable named c1 representing the centroid (mean vector) of all points with the label \"1\" and c2 representing the centroid (mean vector) of all points with the label \"2\".\n\n# your code goes here\n\nSolution:\n\nc1 &lt;- df |&gt; filter(label == \"1\") |&gt;\n  select(X1, X2) |&gt;\n  summarize(X1c=mean(X1), X2c=mean(X2)) |&gt;\n  as.numeric()\nc2 &lt;- df |&gt; filter(label == \"2\") |&gt;\n  select(X1, X2) |&gt;\n  summarize(X1c=mean(X1), X2c=mean(X2)) |&gt;\n  as.numeric()\nc1\n\n[1] -0.3311804 -0.4124585\n\nc2\n\n[1] 0.1457285 0.4076980\n\n\n\n\nQuestion 6\nPlot the entries in df, with X1 on the x-axis and X2 on the y-axis, and color them according to the label column. Are they separated yet?\n\n# your code goes here\n\nSolution:\n\ndf |&gt;\n  ggplot(aes(x=X1, y=X2, color=label)) +\n  geom_point() +\n  geom_point(data=data.frame(X1=c1[1], X2=c1[2], label=\"C1\")) +\n  geom_point(data=data.frame(X1=c2[1], X2=c2[2], label=\"C2\")) +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\nQuestion 7\nWrite a function called compute_distance which takes in coordinates X1 and X2 for a given point, along with coordinates X1c and X2c for a given cluster centroid, and returns the euclidean distance between these two points. Then, test that your function works correctly by calling it to compute the distance between the example point \\(X = (0.5, 1.0)\\) and the example centroid \\(c = (3.2,3.0)\\) (the answer, for this case, should be 3.36006)\n\n# your code goes here\n\nSolution:\n\ncompute_distance &lt;- function(X1, X2, X1c, X2c) {\n  X1_dist &lt;- (X1c - X1)^2\n  X2_dist &lt;- (X2c - X2)^2\n  return(sqrt(X1_dist + X2_dist))\n}\ncompute_distance(0.5, 1.0, 3.2, 3.0)\n\n[1] 3.36006\n\n\n\n\nQuestion 8\nNext you need to re-assign the cluster labels according to the minimum distance between the cluster centroid and each point. You can accomplish this using for loops over the points (rows) in df.\nIn Questions 8.1 and 8.2 you will write functions for carrying out the two main steps of the \\(K\\)-means clustering algorithm, and then in Question 8.3 you will run the two functions 10 times. Then, in Question 9, you will visualize the resulting clusters, to see whether the 10 iterations worked!\n\nQuestion 8.1\nWrite a function called update_labels. This function should take in the following arguments:\n\ninput_df: A data.frame where each row corresponds to a point in the dataset\ninput_c1: A centroid for the label \"1\" (represented as a length-2 numeric vector)\ninput_c2: A centroid for the label \"2\" (represented as a length-2 numeric vector)\n\nThe function should then loop over each point (row) in input_df, using an an if-else statement to check which cluster centroid (input_c1 or input_c2) is closer to the point and re-assign the point‚Äôs label accordingly. Once all of the points (rows in input_df) have been processed, the function should return the newly-updated input_df.\n\n# your code goes here\n\nSolution:\n\nget_label &lt;- function(x1, x2, c1, c2) {\n  c1_dist &lt;- compute_distance(x1, x2, c1[1], c1[2])\n  c2_dist &lt;- compute_distance(x1, x2, c2[1], c2[2])\n  if (c1_dist &lt; c2_dist) {\n    return(\"1\")\n  } else {\n    return(\"2\")\n  }\n}\nupdate_labels &lt;- function(df, c1, c2) {\n  for (i in 1:nrow(df)) {\n    cur_X1 &lt;- df[i, \"X1\"]\n    cur_X2 &lt;- df[i, \"X2\"]\n    c1_dist &lt;- compute_distance(cur_X1, cur_X2, c1[1], c1[2])\n    c2_dist &lt;- compute_distance(cur_X1, cur_X2, c2[1], c2[2])\n    if (c1_dist &lt; c2_dist) {\n      df[i, \"label\"] &lt;- \"1\"\n    } else {\n      df[i, \"label\"] &lt;- \"2\"\n    }\n  }\n}\n\n\n\nQuestion 8.2\nWrite another function called update_centroids. This function should accept just one argument, called input_df, and should calculate new cluster centroids for each label (\"1\" and \"2\"), similar to what you did in Question 5. Once the centroids have been calculated, they should be returned as a list, whose first element is the centroid (the length-2 numeric vector) of the points with label \"1\" and whose sectond element is the centroid (the length-2 numeric vector) of the points with label \"2\".\n\n# Your code here\n\nSolution:\n\nupdate_centroids &lt;- function(df, c1, c2) {\n  c1 &lt;- df |&gt; filter(label == \"1\") |&gt;\n    select(X1, X2) |&gt;\n    summarize(X1mean=mean(X1), X2mean=mean(X2)) |&gt;\n    as.numeric()\n  c2 &lt;- df |&gt; filter(label == \"2\") |&gt;\n    select(X1, X2) |&gt;\n    summarize(X1mean=mean(X1), X2mean=mean(X2)) |&gt;\n    as.numeric()\n}\n\n\n\nQuestion 8.3\nNow you will use the functions written in Questions 8.1 and 8.2 to carry out the \\(K\\)-means algorithm. Using a for loop, use these two functions to update df, c1, and c2 ten times in total.\n\n# Your code here\n\n\nfor (i in 1:10) {\n  update_labels(df, c1, c2)\n  update_centroids(df, c1, c2)\n  print(list(c1, c2))\n}\n\n[[1]]\n[1] -0.3311804 -0.4124585\n\n[[2]]\n[1] 0.1457285 0.4076980\n\n[[1]]\n[1] -0.3311804 -0.4124585\n\n[[2]]\n[1] 0.1457285 0.4076980\n\n[[1]]\n[1] -0.3311804 -0.4124585\n\n[[2]]\n[1] 0.1457285 0.4076980\n\n[[1]]\n[1] -0.3311804 -0.4124585\n\n[[2]]\n[1] 0.1457285 0.4076980\n\n[[1]]\n[1] -0.3311804 -0.4124585\n\n[[2]]\n[1] 0.1457285 0.4076980\n\n[[1]]\n[1] -0.3311804 -0.4124585\n\n[[2]]\n[1] 0.1457285 0.4076980\n\n[[1]]\n[1] -0.3311804 -0.4124585\n\n[[2]]\n[1] 0.1457285 0.4076980\n\n[[1]]\n[1] -0.3311804 -0.4124585\n\n[[2]]\n[1] 0.1457285 0.4076980\n\n[[1]]\n[1] -0.3311804 -0.4124585\n\n[[2]]\n[1] 0.1457285 0.4076980\n\n[[1]]\n[1] -0.3311804 -0.4124585\n\n[[2]]\n[1] 0.1457285 0.4076980\n\n\n\n\n\nQuestion 9\nPlot the points, the same way you did in Question 6, to see if two visibly-separated clusters have emerged after the ten iterations of the \\(K\\)-means clustering algorithm you carried out in the previous question.\n\n# Your code here\n\nSolution:\n\ndf |&gt;\n  ggplot(aes(x=X1, y=X2, color=label)) +\n  geom_point() +\n  geom_point(data=data.frame(X1=c1[1], X2=c1[2], label=\"C1\")) +\n  geom_point(data=data.frame(X1=c2[1], X2=c2[2], label=\"C2\")) +\n  theme_classic()"
  },
  {
    "objectID": "w08-2/index.html",
    "href": "w08-2/index.html",
    "title": "Introduction to APIs in R",
    "section": "",
    "text": "Open slides in new window ‚Üí"
  },
  {
    "objectID": "w06-2/index.html",
    "href": "w06-2/index.html",
    "title": "Installing Quarto",
    "section": "",
    "text": "Open slides in new window ‚Üí"
  },
  {
    "objectID": "w06-2/index.html#quarto-projects-in-vscode",
    "href": "w06-2/index.html#quarto-projects-in-vscode",
    "title": "Installing Quarto",
    "section": "Quarto Projects in VSCode",
    "text": "Quarto Projects in VSCode\n\nQuarto Websites \nQuarto Manuscripts \nQuarto Books"
  },
  {
    "objectID": "w06-2/index.html#quarto-projects-in-posit.cloud",
    "href": "w06-2/index.html#quarto-projects-in-posit.cloud",
    "title": "Installing Quarto",
    "section": "Quarto Projects in Posit.Cloud",
    "text": "Quarto Projects in Posit.Cloud\n\nQuarto Websites \nQuarto Manuscripts \nQuarto Books"
  },
  {
    "objectID": "w06-2/slides.html#quarto-projects-in-vscode",
    "href": "w06-2/slides.html#quarto-projects-in-vscode",
    "title": "Installing Quarto",
    "section": "Quarto Projects in VSCode",
    "text": "Quarto Projects in VSCode\n\nQuarto Websites \nQuarto Manuscripts \nQuarto Books"
  },
  {
    "objectID": "w06-2/slides.html#quarto-projects-in-posit.cloud",
    "href": "w06-2/slides.html#quarto-projects-in-posit.cloud",
    "title": "Installing Quarto",
    "section": "Quarto Projects in Posit.Cloud",
    "text": "Quarto Projects in Posit.Cloud\n\nQuarto Websites \nQuarto Manuscripts \nQuarto Books \n\n\n\n\n2024 DSAN Bootcamp W06-2: Installing Quarto"
  }
]