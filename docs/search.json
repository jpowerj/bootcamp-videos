[
  {
    "objectID": "w07-1/slides.html#code-blocks",
    "href": "w07-1/slides.html#code-blocks",
    "title": "Control Flow in R",
    "section": "Code Blocks",
    "text": "Code Blocks\n\nPython: Indentation\nR: Curly braces"
  },
  {
    "objectID": "w07-1/slides.html#if-statements",
    "href": "w07-1/slides.html#if-statements",
    "title": "Control Flow in R",
    "section": "If Statements",
    "text": "If Statements\n\n\n\nimport datetime\ncur_time = datetime.datetime.now()\nprint(f\"The current time is {cur_time.hour}:{cur_time.minute}\")\n\nThe current time is 20:42\n\nif cur_time.hour &lt; 12:\n    print(\"Good morning!\")\nelif cur_time.hour &lt; 18:\n    print(\"Good afternoon!\")\nelse:\n    print(\"Good evening!\")\n\nGood evening!\n\n\n\n\nlibrary(lubridate)\ncur_time &lt;- Sys.time()\nwriteLines(paste0(\n    \"The current time is \",\n    hour(cur_time),\":\",\n    minute(cur_time)\n))\n\nThe current time is 20:42\n\nif (hour(cur_time) &lt; 12) {\n    print(\"Good morning!\")\n} else if (hour(cur_time) &lt; 18) {\n    print(\"Good afternoon!\")\n} else {\n    print(\"Good evening!\")\n}\n\n[1] \"Good evening!\"\n\n\n\n\n(We’ll learn about lubridate  soon!)"
  },
  {
    "objectID": "w07-1/slides.html#the-ternary-operator",
    "href": "w07-1/slides.html#the-ternary-operator",
    "title": "Control Flow in R",
    "section": "The Ternary Operator",
    "text": "The Ternary Operator\n\n\n\n\"morning\" if cur_time.hour &lt; 12 else \"evening\"\n\n'evening'\n\n\n\n\nifelse(\n    hour(cur_time) &lt; 12,\n    \"morning\",\n    \"evening\"\n)\n\n[1] \"evening\""
  },
  {
    "objectID": "w07-1/slides.html#for-loops-the-software-engineers-bread-and-butter",
    "href": "w07-1/slides.html#for-loops-the-software-engineers-bread-and-butter",
    "title": "Control Flow in R",
    "section": "For Loops: The Software Engineer’s Bread and Butter",
    "text": "For Loops: The Software Engineer’s Bread and Butter\n\nMany different ways to loop (find one that clicks for you!)\nFor loops often the “default” approach (because of C)\n\n\n\n\nfor i in range(1, 10):\n    print(i)\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n\nfor (i in 1:10) {\n    print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10"
  },
  {
    "objectID": "w07-1/slides.html#vectorized-operations-the-data-scientists-bread-and-margarine",
    "href": "w07-1/slides.html#vectorized-operations-the-data-scientists-bread-and-margarine",
    "title": "Control Flow in R",
    "section": "Vectorized Operations: The Data Scientist’s Bread and Margarine",
    "text": "Vectorized Operations: The Data Scientist’s Bread and Margarine\n\nYou’ve been hired as the lead data scientist for a food delivery service (congratulations!)\nYou’re given data on (a) number of miles traveled and (b) number of hours driven, for each driver\nYour goal: find the distribution of average speeds!\n\n\n\n\nimport pandas as pd\nmiles_data = [11, 52, 13]\nhrs_data = [2, 3, 5]\ndriver_df = pd.DataFrame({\n    'miles': miles_data,\n    'hrs': hrs_data\n})\ndriver_df\n\n   miles  hrs\n0     11    2\n1     52    3\n2     13    5\n\n\n\n\nmiles_data &lt;- c(11, 52, 13)\nhrs_data &lt;- c(2, 3, 5)\ndriver_df &lt;- data.frame(\n    miles=miles_data,\n    hrs=hrs_data\n)\ndriver_df\n\n\n\n\n\nmiles\nhrs\n\n\n\n\n11\n2\n\n\n52\n3\n\n\n13\n5"
  },
  {
    "objectID": "w07-1/slides.html#the-loop-approach",
    "href": "w07-1/slides.html#the-loop-approach",
    "title": "Control Flow in R",
    "section": "The Loop Approach",
    "text": "The Loop Approach"
  },
  {
    "objectID": "w07-1/slides.html#the-vectorized-approach",
    "href": "w07-1/slides.html#the-vectorized-approach",
    "title": "Control Flow in R",
    "section": "The Vectorized Approach",
    "text": "The Vectorized Approach\n\n\nCode\ndriver_df['mph'] = driver_df['miles'] / driver_df['hrs']\ndriver_df\n\n\n   miles  hrs        mph\n0     11    2   5.500000\n1     52    3  17.333333\n2     13    5   2.600000\n\n\n\n\nCode\ndriver_df['mph'] = driver_df$miles / driver_df$hrs\ndriver_df\n\n\n\n\n\n\nmiles\nhrs\nmph\n\n\n\n\n11\n2\n5.50000\n\n\n52\n3\n17.33333\n\n\n13\n5\n2.60000"
  },
  {
    "objectID": "w07-1/slides.html#anonymous-functions",
    "href": "w07-1/slides.html#anonymous-functions",
    "title": "Control Flow in R",
    "section": "Anonymous Functions",
    "text": "Anonymous Functions\n\nIn Python you declare the name of a function using def\nIn R, you make the function without a name, then assign it to a variable:\n\n\n\n\ndef multiply_by_5(num):\n  return num * 5\nmultiply_by_5(10)\n\n50\n\n\n\n\nmultiply_by_5 &lt;- function(num) {\n  return(num * 5)\n}\nmultiply_by_5(10)\n\n[1] 50\n\n\n\n\n\nPython also has anonymous functions, via lambda:\n\n\ndouble_it = lambda x: x * 2\ndouble_it(10)\n\n20\n\n\n\n\n\n2024 DSAN Bootcamp W07-1: Control Flow"
  },
  {
    "objectID": "w07-1/index.html",
    "href": "w07-1/index.html",
    "title": "Control Flow in R",
    "section": "",
    "text": "Open slides in new window →"
  },
  {
    "objectID": "w07-1/index.html#code-blocks",
    "href": "w07-1/index.html#code-blocks",
    "title": "Control Flow in R",
    "section": "Code Blocks",
    "text": "Code Blocks\n\nPython: Indentation\nR: Curly braces"
  },
  {
    "objectID": "w07-1/index.html#if-statements",
    "href": "w07-1/index.html#if-statements",
    "title": "Control Flow in R",
    "section": "If Statements",
    "text": "If Statements\n\n\n\nimport datetime\ncur_time = datetime.datetime.now()\nprint(f\"The current time is {cur_time.hour}:{cur_time.minute}\")\n\nThe current time is 20:42\n\nif cur_time.hour &lt; 12:\n    print(\"Good morning!\")\nelif cur_time.hour &lt; 18:\n    print(\"Good afternoon!\")\nelse:\n    print(\"Good evening!\")\n\nGood evening!\n\n\n\n\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\ncur_time &lt;- Sys.time()\nwriteLines(paste0(\n    \"The current time is \",\n    hour(cur_time),\":\",\n    minute(cur_time)\n))\n\nThe current time is 20:42\n\nif (hour(cur_time) &lt; 12) {\n    print(\"Good morning!\")\n} else if (hour(cur_time) &lt; 18) {\n    print(\"Good afternoon!\")\n} else {\n    print(\"Good evening!\")\n}\n\n[1] \"Good evening!\"\n\n\n\n\n(We’ll learn about lubridate  soon!)"
  },
  {
    "objectID": "w07-1/index.html#the-ternary-operator",
    "href": "w07-1/index.html#the-ternary-operator",
    "title": "Control Flow in R",
    "section": "The Ternary Operator",
    "text": "The Ternary Operator\n\n\n\n\"morning\" if cur_time.hour &lt; 12 else \"evening\"\n\n'evening'\n\n\n\n\nifelse(\n    hour(cur_time) &lt; 12,\n    \"morning\",\n    \"evening\"\n)\n\n[1] \"evening\""
  },
  {
    "objectID": "w07-1/index.html#for-loops-the-software-engineers-bread-and-butter",
    "href": "w07-1/index.html#for-loops-the-software-engineers-bread-and-butter",
    "title": "Control Flow in R",
    "section": "For Loops: The Software Engineer’s Bread and Butter",
    "text": "For Loops: The Software Engineer’s Bread and Butter\n\nMany different ways to loop (find one that clicks for you!)\nFor loops often the “default” approach (because of C)\n\n\n\n\nfor i in range(1, 10):\n    print(i)\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n\nfor (i in 1:10) {\n    print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10"
  },
  {
    "objectID": "w07-1/index.html#vectorized-operations-the-data-scientists-bread-and-margarine",
    "href": "w07-1/index.html#vectorized-operations-the-data-scientists-bread-and-margarine",
    "title": "Control Flow in R",
    "section": "Vectorized Operations: The Data Scientist’s Bread and Margarine",
    "text": "Vectorized Operations: The Data Scientist’s Bread and Margarine\n\nYou’ve been hired as the lead data scientist for a food delivery service (congratulations!)\nYou’re given data on (a) number of miles traveled and (b) number of hours driven, for each driver\nYour goal: find the distribution of average speeds!\n\n\n\n\nimport pandas as pd\nmiles_data = [11, 52, 13]\nhrs_data = [2, 3, 5]\ndriver_df = pd.DataFrame({\n    'miles': miles_data,\n    'hrs': hrs_data\n})\ndriver_df\n\n   miles  hrs\n0     11    2\n1     52    3\n2     13    5\n\n\n\n\nmiles_data &lt;- c(11, 52, 13)\nhrs_data &lt;- c(2, 3, 5)\ndriver_df &lt;- data.frame(\n    miles=miles_data,\n    hrs=hrs_data\n)\ndriver_df\n\n\n\n\n\nmiles\nhrs\n\n\n\n\n11\n2\n\n\n52\n3\n\n\n13\n5"
  },
  {
    "objectID": "w07-1/index.html#the-loop-approach",
    "href": "w07-1/index.html#the-loop-approach",
    "title": "Control Flow in R",
    "section": "The Loop Approach",
    "text": "The Loop Approach"
  },
  {
    "objectID": "w07-1/index.html#the-vectorized-approach",
    "href": "w07-1/index.html#the-vectorized-approach",
    "title": "Control Flow in R",
    "section": "The Vectorized Approach",
    "text": "The Vectorized Approach\n\n\nCode\ndriver_df['mph'] = driver_df['miles'] / driver_df['hrs']\ndriver_df\n\n\n   miles  hrs        mph\n0     11    2   5.500000\n1     52    3  17.333333\n2     13    5   2.600000\n\n\n\n\nCode\ndriver_df['mph'] = driver_df$miles / driver_df$hrs\ndriver_df\n\n\n\n\n\n\nmiles\nhrs\nmph\n\n\n\n\n11\n2\n5.50000\n\n\n52\n3\n17.33333\n\n\n13\n5\n2.60000"
  },
  {
    "objectID": "w07-1/index.html#anonymous-functions",
    "href": "w07-1/index.html#anonymous-functions",
    "title": "Control Flow in R",
    "section": "Anonymous Functions",
    "text": "Anonymous Functions\n\nIn Python you declare the name of a function using def\nIn R, you make the function without a name, then assign it to a variable:\n\n\n\n\ndef multiply_by_5(num):\n  return num * 5\nmultiply_by_5(10)\n\n50\n\n\n\n\nmultiply_by_5 &lt;- function(num) {\n  return(num * 5)\n}\nmultiply_by_5(10)\n\n[1] 50\n\n\n\n\n\nPython also has anonymous functions, via lambda:\n\n\ndouble_it = lambda x: x * 2\ndouble_it(10)\n\n20"
  },
  {
    "objectID": "w06-3/slides.html#the-most-immediately-jarring-differences",
    "href": "w06-3/slides.html#the-most-immediately-jarring-differences",
    "title": "Introduction to R",
    "section": "The Most Immediately-Jarring Differences",
    "text": "The Most Immediately-Jarring Differences\n\n\n\n\n\nPython\n\n\n\nR\n\n\n\n\n\nValue Assignment\n\n&lt;varname&gt; = &lt;value&gt;\n\nx = 3\nx\n\n3\n\n\n\n&lt;varname&gt; &lt;- &lt;value&gt;\n\nx &lt;- 3\nx\n\n[1] 3\n\n\n\n\n\n\nIndices\n\nStart from 0\n\nmy_list = [\"a\", \"b\", \"c\"]\nmy_list[0] # Accesses first element\n\n'a'\n\nmy_list[1] # Accesses second element\n\n'b'\n\n\n\nStart from 1\n\nmy_vector &lt;- c(\"a\", \"b\", \"c\")\nmy_vector[0] # Invalid index in R!\n\ncharacter(0)\n\nmy_vector[1] # Accesses first element\n\n[1] \"a\"\n\nmy_vector[2] # Accesses second element\n\n[1] \"b\"\n\n\n\n\n\n\nBooleans\n\nTrue, False\n\nresult = 2 * 2 == 4\nresult\n\nTrue\n\n\n\nTRUE (or T), FALSE (or F)\n\nresult &lt;- 2 * 2 == 4\nresult\n\n[1] TRUE"
  },
  {
    "objectID": "w06-3/slides.html#everything-is-a-vector",
    "href": "w06-3/slides.html#everything-is-a-vector",
    "title": "Introduction to R",
    "section": "Everything is a Vector",
    "text": "Everything is a Vector\n\nAlthough there are R equivalents for most Python data types, one big difference is that…\nIn R, everything is a vector!\n\n\n\nNumbers\n\nx &lt;- 3\nprint(x)\n\n[1] 3\n\nclass(x)\n\n[1] \"numeric\"\n\nlength(x)\n\n[1] 1\n\n\n\nLength-1 Vectors\n\ny &lt;- c(3)\nprint(y)\n\n[1] 3\n\nclass(y)\n\n[1] \"numeric\"\n\nlength(y)\n\n[1] 1\n\n\n\nLength-N Vectors\n\nz &lt;- c(3, 4, 5)\nprint(z)\n\n[1] 3 4 5\n\nclass(z)\n\n[1] \"numeric\"\n\nlength(z)\n\n[1] 3"
  },
  {
    "objectID": "w06-3/slides.html#careful-with-basic-operators-like",
    "href": "w06-3/slides.html#careful-with-basic-operators-like",
    "title": "Introduction to R",
    "section": "Careful With “Basic” Operators Like +!",
    "text": "Careful With “Basic” Operators Like +!\n\nIf you’re used to Python, + feels like a natural way to combine things\nR forces you to think explicitly about combining (\\(\\neq\\) adding): more restrictive +\nFor strings:\n\n\nIn Python: + means concatenate\n\nmessage = \"Hi\" + \" \" + \"Jeff\"\nprint(message)\n\nHi Jeff\n\n\n\nIn R: + is not allowed!\n\nmy_message &lt;- \"Hi\" + \" \" + \"Jeff\"\n\nError in \"Hi\" + \" \": non-numeric argument to binary operator\n\n\n\n\nFor numeric lists…\n\n\nIn Python: + means concatenate\n\n[1, 2] + [3, 4]\n\n[1, 2, 3, 4]\n\n\n\nIn R: + means vector addition!\n\nc(1,2) + c(3,4)\n\n[1] 4 6"
  },
  {
    "objectID": "w06-3/slides.html#immensely-important-distinction",
    "href": "w06-3/slides.html#immensely-important-distinction",
    "title": "Introduction to R",
    "section": "Immensely Important Distinction",
    "text": "Immensely Important Distinction\n\nThroughout bootcamp, throughout DSAN, throughout your career, you’ll use two different “flavors” of R:\n\n\n\nBase R\n\nbase_df &lt;- data.frame(\n  x=c(1,2,3),\n  y=c(\"a\",\"b\",\"c\")\n)\nbase_df\n\n\n\n\n\nx\ny\n\n\n\n\n1\na\n\n\n2\nb\n\n\n3\nc\n\n\n\n\n\nclass(base_df)\n\n[1] \"data.frame\"\n\n\n\nTidyverse\n\nlibrary(tidyverse) # Imports \"tibble\" library\ntv_df &lt;- tribble(\n  ~x, ~y,\n  1, \"a\",\n  2, \"b\",\n  3, \"c\"\n)\ntv_df\n\n\n\n\n\nx\ny\n\n\n\n\n1\na\n\n\n2\nb\n\n\n3\nc\n\n\n\n\n\nclass(tv_df)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n\n\n\nNote: There are ways to do row-wise and column-wise table creation in both! The key difference here is just data.frame vs. tibble"
  },
  {
    "objectID": "w06-3/slides.html#why-are-there-two-ways-to-do-everything",
    "href": "w06-3/slides.html#why-are-there-two-ways-to-do-everything",
    "title": "Introduction to R",
    "section": "Why Are There Two Ways to Do Everything?",
    "text": "Why Are There Two Ways to Do Everything?\n\nOne key reason: tidyverse built on the pipe operator |&gt;\nRecognition that data science often involves pipelines: chains of operations performed in sequence\n\nE.g., scrape data → clean data → save to DB\n\nBase R approach:\nresult &lt;- saveToDB(cleanData(scrapeData()))\nTidyverse approach:\nresult &lt;- scrapeData() |&gt; cleanData() |&gt; saveToDB()\nNow imagine pipelines used by giant companies, e.g., training Netflix’s recommendation engine!"
  },
  {
    "objectID": "w06-3/slides.html#good-news-and-bad-news",
    "href": "w06-3/slides.html#good-news-and-bad-news",
    "title": "Introduction to R",
    "section": "|>: Good News and Bad News",
    "text": "|&gt;: Good News and Bad News\n\nf() |&gt; g() just means: take the result of the call f() and pass it as the first argument to g()\nGood news: this means |&gt; is intuitively “backwards compatible” with many base R functions\nBad news: requires checking the first argument:\n\n\n\n\ngetSampleSize &lt;- function() {\n  return(20)\n}\ngetSampleSize() |&gt; rbinom(10, 0.5)\n\n [1] 4 4 6 2 5 4 5 3 6 7 4 3 5 2 3 7 4 5 3 2\n\n\n\n\ngetNumTrials &lt;- function() {\n  return(10)\n}\ngetNumTrials() |&gt; rbinom(100, 0.5)\n\n [1] 59 45 49 54 47 55 50 53 57 50\n\n\n\n\n[Quick Note:]\n\nIf you’ve used R before, you may have seen the %&gt;% operator from tidyverse\n…It got so popular that it is now built into R (as of 2023) as |&gt;!\n\\(\\implies\\) Switch from %&gt;% to |&gt; for instant efficiency boost 😎"
  },
  {
    "objectID": "w06-3/slides.html#combining-strings",
    "href": "w06-3/slides.html#combining-strings",
    "title": "Introduction to R",
    "section": "Combining Strings",
    "text": "Combining Strings\n\nEarlier we saw how R doesn’t allow \"Hi\" + \" \" + \"Jeff\"…\nSo how do we combine strings?\npaste() and paste0()!\n\npaste(\"Hi\", \"Jeff\")\n\n[1] \"Hi Jeff\"\n\npaste0(\"Hi\", \" \", \"Jeff\")\n\n[1] \"Hi Jeff\""
  },
  {
    "objectID": "w06-3/slides.html#python-lists-leftrightarrow-r-vectors",
    "href": "w06-3/slides.html#python-lists-leftrightarrow-r-vectors",
    "title": "Introduction to R",
    "section": "Python Lists \\(\\leftrightarrow\\) R Vectors",
    "text": "Python Lists \\(\\leftrightarrow\\) R Vectors\n\nCreation\n\n\n\n\nmy_list = [1, 2, 3]\nmy_list\n\n[1, 2, 3]\n\n\n\n\nmy_vector &lt;- c(1, 2, 3)\nmy_vector\n\n[1] 1 2 3\n\n\n\n\n\nInsertion\n\n\n\n\nmy_list.append(4)\nmy_list\n\n[1, 2, 3, 4]\n\n\n\n\nmy_vector &lt;- c(my_vector, 4)\nmy_vector\n\n[1] 1 2 3 4\n\n\n\n\n\nReplicating Elements\n\n\n\n\nmy_list * 3\n\n[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n\n\n\n\nrep(my_vector, 3)\n\n [1] 1 2 3 4 1 2 3 4 1 2 3 4\n\n\n\n\n\nPython range() \\(\\leftrightarrow\\) R seq()\n\n\n\n\nlist(range(5, 10))\n\n[5, 6, 7, 8, 9]\n\n\n\n\nseq(5, 10)\n\n[1]  5  6  7  8  9 10"
  },
  {
    "objectID": "w06-3/slides.html#paste0-with-vectors",
    "href": "w06-3/slides.html#paste0-with-vectors",
    "title": "Introduction to R",
    "section": "paste0() with Vectors!",
    "text": "paste0() with Vectors!\n\nnames &lt;- c(\"Aaliya\", \"Brandon\", \"Cyrus\")\npaste0(names, collapse=\" \")\n\n[1] \"Aaliya Brandon Cyrus\"\n\npaste0(names, collapse=\", \")\n\n[1] \"Aaliya, Brandon, Cyrus\"\n\npaste(names, collapse=\", \")\n\n[1] \"Aaliya, Brandon, Cyrus\""
  },
  {
    "objectID": "w06-3/slides.html#semi-confusing-point-r-also-has-lists",
    "href": "w06-3/slides.html#semi-confusing-point-r-also-has-lists",
    "title": "Introduction to R",
    "section": "Semi-Confusing Point: R Also Has Lists…",
    "text": "Semi-Confusing Point: R Also Has Lists…\n\nRarely used, despite greater similarity to Python lists 😵‍💫\nKey difference: all elements of a vector must have same type; elements of a list may have different types\n\nmy_list &lt;- list(\"A\", 2, TRUE)\nmy_list\n\n[[1]]\n[1] \"A\"\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] TRUE\n\n\n(Note how each element is a vector: character vector, integer vector, and boolean vector)"
  },
  {
    "objectID": "w06-3/slides.html#pandas-dataframe-leftrightarrow-r-data.frame",
    "href": "w06-3/slides.html#pandas-dataframe-leftrightarrow-r-data.frame",
    "title": "Introduction to R",
    "section": "Pandas DataFrame \\(\\leftrightarrow\\) R data.frame",
    "text": "Pandas DataFrame \\(\\leftrightarrow\\) R data.frame\n\n\n\nimport pandas as pd\nx_data = [1, 2, 3]\ny_data = [4, 5, 6]\ndf = pd.DataFrame({\n  'x': x_data, 'y': y_data\n})\nprint(df.to_markdown())\n\n\n\n\nx\ny\n\n\n\n\n0\n1\n4\n\n\n1\n2\n5\n\n\n2\n3\n6\n\n\n\n\n\n\nx_data &lt;- c(1, 2, 3)\ny_data &lt;- c(4, 5, 6)\ndf &lt;- data.frame(\n  x=x_data,\n  y=y_data\n)\ndf\n\n\n\n\n\nx\ny\n\n\n\n\n1\n4\n\n\n2\n5\n\n\n3\n6"
  },
  {
    "objectID": "w06-3/slides.html#the-inevitable-headaches-of-missing-data-in-python",
    "href": "w06-3/slides.html#the-inevitable-headaches-of-missing-data-in-python",
    "title": "Introduction to R",
    "section": "The Inevitable Headaches of Missing Data in Python",
    "text": "The Inevitable Headaches of Missing Data in Python\n\n\n Given a .csv with missing entries:\n\n\nmy_data.csv\n\nid,name,email\n0,jeff,jeff@jeff.com\n1,,nobody@no.com\n3,zayd,z@email.biz\n\n Python defaults to object columns with NaN (Not-a-Number) values\n\nimport pandas as pd\ndf = pd.read_csv(\"my_data.csv\")\ndf\n\n   id  name          email\n0   0  jeff  jeff@jeff.com\n1   1   NaN  nobody@no.com\n2   3  zayd    z@email.biz\n\ndf.dtypes\n\nid        int64\nname     object\nemail    object\ndtype: object\n\n\n\n Intuitive fix usually isn’t what you want:\n\ndf_bad = df.copy()\ndf_bad['name'] = df_bad['name'].astype(str)\ndf_bad\n\n   id  name          email\n0   0  jeff  jeff@jeff.com\n1   1   nan  nobody@no.com\n2   3  zayd    z@email.biz\n\ndf_bad.iloc[1]['name']\n\n'nan'\n\n\n This alternative approach ensures missing values are empty strings\n\ndf_better = df.copy()\ndf_better['name'] = df_better['name'].fillna('').astype(str)\ndf_better\n\n   id  name          email\n0   0  jeff  jeff@jeff.com\n1   1        nobody@no.com\n2   3  zayd    z@email.biz\n\ndf_better.iloc[1]['name']\n\n''"
  },
  {
    "objectID": "w06-3/slides.html#the-slightly-less-headachey-r-approach",
    "href": "w06-3/slides.html#the-slightly-less-headachey-r-approach",
    "title": "Introduction to R",
    "section": "The Slightly-Less-Headachey R Approach!",
    "text": "The Slightly-Less-Headachey R Approach!\n\n\nR reads missing values in character columns as empty strings by default\n\ndf &lt;- read.csv(\"my_data.csv\")\ndf\n\n\n\n\n\nid\nname\nemail\n\n\n\n\n0\njeff\njeff@jeff.com\n\n\n1\n\nnobody@no.com\n\n\n3\nzayd\nz@email.biz\n\n\n\n\n\ndf$name\n\n[1] \"jeff\" \"\"     \"zayd\"\n\n# We'll learn about sapply() next week!\nsapply(df, class)\n\n         id        name       email \n  \"integer\" \"character\" \"character\" \n\n\n\n…And also has a built-in NA value!\n\n\nmy_data_2.csv\n\nid,name,email,fav_num\n0,jeff,jeff@jeff.com,3.14\n1,,nobody@no.com,\n3,zayd,z@email.biz,11\n\n\ndf2 &lt;- read.csv(\"my_data_2.csv\")\ndf2\n\n\n\n\n\nid\nname\nemail\nfav_num\n\n\n\n\n0\njeff\njeff@jeff.com\n3.14\n\n\n1\n\nnobody@no.com\nNA\n\n\n3\nzayd\nz@email.biz\n11.00\n\n\n\n\n\nsapply(df2, class)\n\n         id        name       email     fav_num \n  \"integer\" \"character\" \"character\"   \"numeric\""
  },
  {
    "objectID": "w06-3/slides.html#bonus-built-in-matrices",
    "href": "w06-3/slides.html#bonus-built-in-matrices",
    "title": "Introduction to R",
    "section": "Bonus: Built-In Matrices",
    "text": "Bonus: Built-In Matrices\n\nFor data analysis (cleaning, plotting), data.frame is usually the way to go\nFor linear algebra (inverting, multiplying matrices)…\n\n\nUse 2D vectors!\n\nmy_matrix &lt;- matrix(\n  data=c(1, 2, 3, 4),\n  nrow=2, ncol=2, byrow=TRUE\n)\nmy_matrix\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\nclass(my_matrix)\n\n[1] \"matrix\" \"array\" \n\n\n\nBeware! Matrix multiply operator is %*%, NOT *:\n\nmy_matrix * my_matrix\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    9   16\n\nmy_matrix %*% my_matrix\n\n     [,1] [,2]\n[1,]    7   10\n[2,]   15   22\n\n\n\n\n\n\n\n\n2024 DSAN Bootcamp W06-3: Intro to R"
  },
  {
    "objectID": "w06-3/index.html",
    "href": "w06-3/index.html",
    "title": "Introduction to R",
    "section": "",
    "text": "Open slides in new window →"
  },
  {
    "objectID": "w06-3/index.html#the-most-immediately-jarring-differences",
    "href": "w06-3/index.html#the-most-immediately-jarring-differences",
    "title": "Introduction to R",
    "section": "The Most Immediately-Jarring Differences",
    "text": "The Most Immediately-Jarring Differences\n\n\n\n\n\nPython\n\n\n\nR\n\n\n\n\n\nValue Assignment\n\n&lt;varname&gt; = &lt;value&gt;\n\nx = 3\nx\n\n3\n\n\n\n&lt;varname&gt; &lt;- &lt;value&gt;\n\nx &lt;- 3\nx\n\n[1] 3\n\n\n\n\n\n\nIndices\n\nStart from 0\n\nmy_list = [\"a\", \"b\", \"c\"]\nmy_list[0] # Accesses first element\n\n'a'\n\nmy_list[1] # Accesses second element\n\n'b'\n\n\n\nStart from 1\n\nmy_vector &lt;- c(\"a\", \"b\", \"c\")\nmy_vector[0] # Invalid index in R!\n\ncharacter(0)\n\nmy_vector[1] # Accesses first element\n\n[1] \"a\"\n\nmy_vector[2] # Accesses second element\n\n[1] \"b\"\n\n\n\n\n\n\nBooleans\n\nTrue, False\n\nresult = 2 * 2 == 4\nresult\n\nTrue\n\n\n\nTRUE (or T), FALSE (or F)\n\nresult &lt;- 2 * 2 == 4\nresult\n\n[1] TRUE"
  },
  {
    "objectID": "w06-3/index.html#everything-is-a-vector",
    "href": "w06-3/index.html#everything-is-a-vector",
    "title": "Introduction to R",
    "section": "Everything is a Vector",
    "text": "Everything is a Vector\n\nAlthough there are R equivalents for most Python data types, one big difference is that…\nIn R, everything is a vector!\n\n\n\nNumbers\n\nx &lt;- 3\nprint(x)\n\n[1] 3\n\nclass(x)\n\n[1] \"numeric\"\n\nlength(x)\n\n[1] 1\n\n\n\nLength-1 Vectors\n\ny &lt;- c(3)\nprint(y)\n\n[1] 3\n\nclass(y)\n\n[1] \"numeric\"\n\nlength(y)\n\n[1] 1\n\n\n\nLength-N Vectors\n\nz &lt;- c(3, 4, 5)\nprint(z)\n\n[1] 3 4 5\n\nclass(z)\n\n[1] \"numeric\"\n\nlength(z)\n\n[1] 3"
  },
  {
    "objectID": "w06-3/index.html#careful-with-basic-operators-like",
    "href": "w06-3/index.html#careful-with-basic-operators-like",
    "title": "Introduction to R",
    "section": "Careful With “Basic” Operators Like +!",
    "text": "Careful With “Basic” Operators Like +!\n\nIf you’re used to Python, + feels like a natural way to combine things\nR forces you to think explicitly about combining (\\(\\neq\\) adding): more restrictive +\nFor strings:\n\n\nIn Python: + means concatenate\n\nmessage = \"Hi\" + \" \" + \"Jeff\"\nprint(message)\n\nHi Jeff\n\n\n\nIn R: + is not allowed!\n\nmy_message &lt;- \"Hi\" + \" \" + \"Jeff\"\n\nError in \"Hi\" + \" \": non-numeric argument to binary operator\n\n\n\n\nFor numeric lists…\n\n\nIn Python: + means concatenate\n\n[1, 2] + [3, 4]\n\n[1, 2, 3, 4]\n\n\n\nIn R: + means vector addition!\n\nc(1,2) + c(3,4)\n\n[1] 4 6"
  },
  {
    "objectID": "w06-3/index.html#immensely-important-distinction",
    "href": "w06-3/index.html#immensely-important-distinction",
    "title": "Introduction to R",
    "section": "Immensely Important Distinction",
    "text": "Immensely Important Distinction\n\nThroughout bootcamp, throughout DSAN, throughout your career, you’ll use two different “flavors” of R:\n\n\n\nBase R\n\nbase_df &lt;- data.frame(\n  x=c(1,2,3),\n  y=c(\"a\",\"b\",\"c\")\n)\nbase_df\n\n\n\n\n\nx\ny\n\n\n\n\n1\na\n\n\n2\nb\n\n\n3\nc\n\n\n\n\n\nclass(base_df)\n\n[1] \"data.frame\"\n\n\n\nTidyverse\n\nlibrary(tidyverse) # Imports \"tibble\" library\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntv_df &lt;- tribble(\n  ~x, ~y,\n  1, \"a\",\n  2, \"b\",\n  3, \"c\"\n)\ntv_df\n\n\n\n\n\nx\ny\n\n\n\n\n1\na\n\n\n2\nb\n\n\n3\nc\n\n\n\n\n\nclass(tv_df)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n\n\n\nNote: There are ways to do row-wise and column-wise table creation in both! The key difference here is just data.frame vs. tibble"
  },
  {
    "objectID": "w06-3/index.html#why-are-there-two-ways-to-do-everything",
    "href": "w06-3/index.html#why-are-there-two-ways-to-do-everything",
    "title": "Introduction to R",
    "section": "Why Are There Two Ways to Do Everything?",
    "text": "Why Are There Two Ways to Do Everything?\n\nOne key reason: tidyverse built on the pipe operator |&gt;\nRecognition that data science often involves pipelines: chains of operations performed in sequence\n\nE.g., scrape data → clean data → save to DB\n\nBase R approach:\nresult &lt;- saveToDB(cleanData(scrapeData()))\nTidyverse approach:\nresult &lt;- scrapeData() |&gt; cleanData() |&gt; saveToDB()\nNow imagine pipelines used by giant companies, e.g., training Netflix’s recommendation engine!"
  },
  {
    "objectID": "w06-3/index.html#good-news-and-bad-news",
    "href": "w06-3/index.html#good-news-and-bad-news",
    "title": "Introduction to R",
    "section": "|>: Good News and Bad News",
    "text": "|&gt;: Good News and Bad News\n\nf() |&gt; g() just means: take the result of the call f() and pass it as the first argument to g()\nGood news: this means |&gt; is intuitively “backwards compatible” with many base R functions\nBad news: requires checking the first argument:\n\n\n\n\ngetSampleSize &lt;- function() {\n  return(20)\n}\ngetSampleSize() |&gt; rbinom(10, 0.5)\n\n [1] 8 4 3 7 7 7 4 4 5 2 4 6 4 5 5 6 8 6 3 4\n\n\n\n\ngetNumTrials &lt;- function() {\n  return(10)\n}\ngetNumTrials() |&gt; rbinom(100, 0.5)\n\n [1] 51 50 52 52 51 48 50 56 50 46\n\n\n\n\n[Quick Note:]\n\nIf you’ve used R before, you may have seen the %&gt;% operator from tidyverse\n…It got so popular that it is now built into R (as of 2023) as |&gt;!\n\\(\\implies\\) Switch from %&gt;% to |&gt; for instant efficiency boost 😎"
  },
  {
    "objectID": "w06-3/index.html#combining-strings",
    "href": "w06-3/index.html#combining-strings",
    "title": "Introduction to R",
    "section": "Combining Strings",
    "text": "Combining Strings\n\nEarlier we saw how R doesn’t allow \"Hi\" + \" \" + \"Jeff\"…\nSo how do we combine strings?\npaste() and paste0()!\n\npaste(\"Hi\", \"Jeff\")\n\n[1] \"Hi Jeff\"\n\npaste0(\"Hi\", \" \", \"Jeff\")\n\n[1] \"Hi Jeff\""
  },
  {
    "objectID": "w06-3/index.html#python-lists-leftrightarrow-r-vectors",
    "href": "w06-3/index.html#python-lists-leftrightarrow-r-vectors",
    "title": "Introduction to R",
    "section": "Python Lists \\(\\leftrightarrow\\) R Vectors",
    "text": "Python Lists \\(\\leftrightarrow\\) R Vectors\n\nCreation\n\n\n\n\nmy_list = [1, 2, 3]\nmy_list\n\n[1, 2, 3]\n\n\n\n\nmy_vector &lt;- c(1, 2, 3)\nmy_vector\n\n[1] 1 2 3\n\n\n\n\n\nInsertion\n\n\n\n\nmy_list.append(4)\nmy_list\n\n[1, 2, 3, 4]\n\n\n\n\nmy_vector &lt;- c(my_vector, 4)\nmy_vector\n\n[1] 1 2 3 4\n\n\n\n\n\nReplicating Elements\n\n\n\n\nmy_list * 3\n\n[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n\n\n\n\nrep(my_vector, 3)\n\n [1] 1 2 3 4 1 2 3 4 1 2 3 4\n\n\n\n\n\nPython range() \\(\\leftrightarrow\\) R seq()\n\n\n\n\nlist(range(5, 10))\n\n[5, 6, 7, 8, 9]\n\n\n\n\nseq(5, 10)\n\n[1]  5  6  7  8  9 10"
  },
  {
    "objectID": "w06-3/index.html#paste0-with-vectors",
    "href": "w06-3/index.html#paste0-with-vectors",
    "title": "Introduction to R",
    "section": "paste0() with Vectors!",
    "text": "paste0() with Vectors!\n\nnames &lt;- c(\"Aaliya\", \"Brandon\", \"Cyrus\")\npaste0(names, collapse=\" \")\n\n[1] \"Aaliya Brandon Cyrus\"\n\npaste0(names, collapse=\", \")\n\n[1] \"Aaliya, Brandon, Cyrus\"\n\npaste(names, collapse=\", \")\n\n[1] \"Aaliya, Brandon, Cyrus\""
  },
  {
    "objectID": "w06-3/index.html#semi-confusing-point-r-also-has-lists",
    "href": "w06-3/index.html#semi-confusing-point-r-also-has-lists",
    "title": "Introduction to R",
    "section": "Semi-Confusing Point: R Also Has Lists…",
    "text": "Semi-Confusing Point: R Also Has Lists…\n\nRarely used, despite greater similarity to Python lists 😵‍💫\nKey difference: all elements of a vector must have same type; elements of a list may have different types\n\nmy_list &lt;- list(\"A\", 2, TRUE)\nmy_list\n\n[[1]]\n[1] \"A\"\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] TRUE\n\n\n(Note how each element is a vector: character vector, integer vector, and boolean vector)"
  },
  {
    "objectID": "w06-3/index.html#pandas-dataframe-leftrightarrow-r-data.frame",
    "href": "w06-3/index.html#pandas-dataframe-leftrightarrow-r-data.frame",
    "title": "Introduction to R",
    "section": "Pandas DataFrame \\(\\leftrightarrow\\) R data.frame",
    "text": "Pandas DataFrame \\(\\leftrightarrow\\) R data.frame\n\n\n\nimport pandas as pd\nx_data = [1, 2, 3]\ny_data = [4, 5, 6]\ndf = pd.DataFrame({\n  'x': x_data, 'y': y_data\n})\nprint(df.to_markdown())\n\n\n\n\nx\ny\n\n\n\n\n0\n1\n4\n\n\n1\n2\n5\n\n\n2\n3\n6\n\n\n\n\n\n\nx_data &lt;- c(1, 2, 3)\ny_data &lt;- c(4, 5, 6)\ndf &lt;- data.frame(\n  x=x_data,\n  y=y_data\n)\ndf\n\n\n\n\n\nx\ny\n\n\n\n\n1\n4\n\n\n2\n5\n\n\n3\n6"
  },
  {
    "objectID": "w06-3/index.html#the-inevitable-headaches-of-missing-data-in-python",
    "href": "w06-3/index.html#the-inevitable-headaches-of-missing-data-in-python",
    "title": "Introduction to R",
    "section": "The Inevitable Headaches of Missing Data in Python",
    "text": "The Inevitable Headaches of Missing Data in Python\n\n\n Given a .csv with missing entries:\n\n\nmy_data.csv\n\nid,name,email\n0,jeff,jeff@jeff.com\n1,,nobody@no.com\n3,zayd,z@email.biz\n\n Python defaults to object columns with NaN (Not-a-Number) values\n\nimport pandas as pd\ndf = pd.read_csv(\"my_data.csv\")\ndf\n\n   id  name          email\n0   0  jeff  jeff@jeff.com\n1   1   NaN  nobody@no.com\n2   3  zayd    z@email.biz\n\ndf.dtypes\n\nid        int64\nname     object\nemail    object\ndtype: object\n\n\n\n Intuitive fix usually isn’t what you want:\n\ndf_bad = df.copy()\ndf_bad['name'] = df_bad['name'].astype(str)\ndf_bad\n\n   id  name          email\n0   0  jeff  jeff@jeff.com\n1   1   nan  nobody@no.com\n2   3  zayd    z@email.biz\n\ndf_bad.iloc[1]['name']\n\n'nan'\n\n\n This alternative approach ensures missing values are empty strings\n\ndf_better = df.copy()\ndf_better['name'] = df_better['name'].fillna('').astype(str)\ndf_better\n\n   id  name          email\n0   0  jeff  jeff@jeff.com\n1   1        nobody@no.com\n2   3  zayd    z@email.biz\n\ndf_better.iloc[1]['name']\n\n''"
  },
  {
    "objectID": "w06-3/index.html#the-slightly-less-headachey-r-approach",
    "href": "w06-3/index.html#the-slightly-less-headachey-r-approach",
    "title": "Introduction to R",
    "section": "The Slightly-Less-Headachey R Approach!",
    "text": "The Slightly-Less-Headachey R Approach!\n\n\nR reads missing values in character columns as empty strings by default\n\ndf &lt;- read.csv(\"my_data.csv\")\n\nWarning in read.table(file = file, header = header, sep = sep, quote = quote, :\nincomplete final line found by readTableHeader on 'my_data.csv'\n\ndf\n\n\n\n\n\nid\nname\nemail\n\n\n\n\n0\njeff\njeff@jeff.com\n\n\n1\n\nnobody@no.com\n\n\n3\nzayd\nz@email.biz\n\n\n\n\n\ndf$name\n\n[1] \"jeff\" \"\"     \"zayd\"\n\n# We'll learn about sapply() next week!\nsapply(df, class)\n\n         id        name       email \n  \"integer\" \"character\" \"character\" \n\n\n\n…And also has a built-in NA value!\n\n\nmy_data_2.csv\n\nid,name,email,fav_num\n0,jeff,jeff@jeff.com,3.14\n1,,nobody@no.com,\n3,zayd,z@email.biz,11\n\n\ndf2 &lt;- read.csv(\"my_data_2.csv\")\n\nWarning in read.table(file = file, header = header, sep = sep, quote = quote, :\nincomplete final line found by readTableHeader on 'my_data_2.csv'\n\ndf2\n\n\n\n\n\nid\nname\nemail\nfav_num\n\n\n\n\n0\njeff\njeff@jeff.com\n3.14\n\n\n1\n\nnobody@no.com\nNA\n\n\n3\nzayd\nz@email.biz\n11.00\n\n\n\n\n\nsapply(df2, class)\n\n         id        name       email     fav_num \n  \"integer\" \"character\" \"character\"   \"numeric\""
  },
  {
    "objectID": "w06-3/index.html#bonus-built-in-matrices",
    "href": "w06-3/index.html#bonus-built-in-matrices",
    "title": "Introduction to R",
    "section": "Bonus: Built-In Matrices",
    "text": "Bonus: Built-In Matrices\n\nFor data analysis (cleaning, plotting), data.frame is usually the way to go\nFor linear algebra (inverting, multiplying matrices)…\n\n\nUse 2D vectors!\n\nmy_matrix &lt;- matrix(\n  data=c(1, 2, 3, 4),\n  nrow=2, ncol=2, byrow=TRUE\n)\nmy_matrix\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\nclass(my_matrix)\n\n[1] \"matrix\" \"array\" \n\n\n\nBeware! Matrix multiply operator is %*%, NOT *:\n\nmy_matrix * my_matrix\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    9   16\n\nmy_matrix %*% my_matrix\n\n     [,1] [,2]\n[1,]    7   10\n[2,]   15   22"
  },
  {
    "objectID": "w07-assignment.html",
    "href": "w07-assignment.html",
    "title": "Assignment 7",
    "section": "",
    "text": "K-mean Clustering\nLet’s create a function for K-means clustering algorithm.\n\n\nDetails of Above Figure\nThe progress of the K-means algorithm with K=3.\n• Top left: The observations are shown.\n• Top center: In Step 1 of the algorithm, each observation is randomly assigned to a cluster using some kind of a label. It could be “1”, “2” or “green”, “red” etc.\n• Top right: In Step 2(a), the cluster centroids are computed by taking the mean of each cluster assignment. These are shown as large colored disks. Initially the centroids are almost completely overlapping because the initial cluster assignments were chosen at random.\n• Bottom left: In Step 2(b), each observation is assigned to the nearest centroid. This is done by computing the euclidean distance between each point and each of the cluster centers. Each point is assigned to the centroid that resulted in the smallest euclidean distance.\n• Bottom center: Step 2(a) is once again performed, leading to new cluster centroids.\n• Bottom right: The results obtained after 10 iterations.\nThink about:\n\nThe iterative steps for the algorithm. What is the starting point? What is the update rule for the centroids? What is the update rule for the “assignment” of each data point to a cluster?\nWhat data structures might you use for implementing this algorithm? DataFrames or vectors would be fine, just think about what you need to keep track of during each iteration.\nWithin your implementation, create a way to visualize our 2D dataset during each implementation. That is, it is helpful to visualize the cluster “assignments” and centroids during each iteration.\n\nLet’s first look at a simple simulated example in which there are only two real clusters in the data. We will create a dataset where the first 25 observations have a mean shift relative to the next 25 observations.\n\nmakelinear = function(N,dist, makeplot = T){\n  x=matrix(rnorm(4*N),2*N,2)\n  y=rep(c(2,1),c(N,N))\n  x[y==1,]=x[y==1,] + dist\n  if(makeplot){plot(x,col=y+3,pch=19)}\n  return(list(x=x,y=y))\n}\n\n\nlibrary(tidyverse)\n\n\nA = makelinear(100, dist = 4.5, makeplot = F)\nx = A$x\ny = A$y\n\nlinear.data = data.frame(x,y=as.factor(y))\n\nlinear.data %&gt;%\nggplot()+\n  geom_point(aes(x=X1,y=X2,colour = y))+\n  guides(colour=guide_legend(title=\"Cluster Labels\")) \n\n\n\n\n\n\n\n\nFollow these steps to write the function for the algorithm:\n\nMake a copy of “linear.data” and name it as df.\n\n\n# your code goes here\n\n\nCreate a variable name label that has 200 values of “1” and “2”; 100 each.\n\n\n# your code goes here\n\n\nGet a random sample of size 200 from this label without replacement; and name the sample as cl_label.\n\n\n# your code goes here\n\n\nReset labels in df using cl_label.\n\n\n# your code goes here\n\n\nCalculate the cluster centroids. c1 would be the centroid (mean vector) of points that has the label “1” and c2 would be the centroid (mean vector) of points that has the label “2”.\n\n\n# your code goes here\n\n\nPlot X1 vs X2 and color them according to the label. Are they separated yet?\n\n\n# your code goes here\n\n\nWrite a function to calculate the euclidean distance between each point and the cluster centroids.\n\n\n# your code goes here\n\nNext you need to re-assign the cluster labels according to the minimum distance between the cluster centroid and each point. We will do this inside a loop\n\nWrite a for loop to repeat this algorithm:\n\n\nUse an if-else statement to check which cluster centroid is closer to which point and re-assign the labels.\n\n\n# your code goes here\n\n\nCalculate new cluster centroids as mentioned in part 5.\n\n\n# your code goes here\n\n\nRepeat part a) and b) 10 times.\n\n\n# your code goes here\n\n\nPlot the to see if there are 2 clear clusters.\n\n\n# your code goes here"
  },
  {
    "objectID": "w06-1/slides.html#setting-up-your-environment",
    "href": "w06-1/slides.html#setting-up-your-environment",
    "title": "Introduction to Quarto = Python + R",
    "section": "Setting Up Your Environment",
    "text": "Setting Up Your Environment\nTie yourself to the mast! Please!\n\nUlysses and the Sirens, J. W. Waterhouse (1891)\n\n\n\n\n\n\n\nDive right into coding(Bc you think data science = coding)\n\\(\\implies\\)\nSpend 75% of your time wrestling with environment issues 😔\n\n\nThink about + set up environment before diving into coding\n\\(\\implies\\)\nSpend 25% of your time wrestling with environment issues 😎"
  },
  {
    "objectID": "w06-1/slides.html#if-you-were-just-coding-in-python",
    "href": "w06-1/slides.html#if-you-were-just-coding-in-python",
    "title": "Introduction to Quarto = Python + R",
    "section": "If You Were Just Coding in Python",
    "text": "If You Were Just Coding in Python\n\n\n\n\n\nGUI wrapper around Python (IDE)\nRun blocks of Python code (from .ipynb)\n\n\n\n\nThe Python Language\n\nProgramming language\npython &lt;script&gt;.py"
  },
  {
    "objectID": "w06-1/slides.html#python-on-its-own-demonstration",
    "href": "w06-1/slides.html#python-on-its-own-demonstration",
    "title": "Introduction to Quarto = Python + R",
    "section": "Python-On-Its-Own Demonstration",
    "text": "Python-On-Its-Own Demonstration\n\n Environment! Create a bootcamp-w06 folder, and open this folder in VSCode!\nCreate a hello.py file, with the following content:\n\n\nhello.py\n\nprint(\"Hello from Python!\")\n\nNow open Terminal (in VSCode: Right click in Explorer panel → “Open in Integrated Terminal”) and execute\npython hello.py\nYou should see the following output:\nHello from Python!"
  },
  {
    "objectID": "w06-1/slides.html#python-within-jupyter-demo",
    "href": "w06-1/slides.html#python-within-jupyter-demo",
    "title": "Introduction to Quarto = Python + R",
    "section": "Python-Within-Jupyter Demo",
    "text": "Python-Within-Jupyter Demo\n\nStill within the Integrated Terminal, type jupyter and press Enter…\n(If Python is correctly set up and Jupyter has been correctly installed) You’ll see an interface allowing you to create Notebooks"
  },
  {
    "objectID": "w06-1/slides.html#jupyter-notebooks-.ipynb-files",
    "href": "w06-1/slides.html#jupyter-notebooks-.ipynb-files",
    "title": "Introduction to Quarto = Python + R",
    "section": "Jupyter Notebooks (.ipynb Files)",
    "text": "Jupyter Notebooks (.ipynb Files)\n\nYou saw these in more detail during Python section!\nAll you need to remember here is: this is a wrapper around the core python executable: all it does is\n\nTakes the code you enter into a cell\nRuns it using python &lt;temporary file&gt;.py\nStores the output within the .ipynb file itself\n\n\n\n(Make sure to terminate Jupyter using  once you’re done using it!)"
  },
  {
    "objectID": "w06-1/slides.html#if-you-were-just-coding-in-r",
    "href": "w06-1/slides.html#if-you-were-just-coding-in-r",
    "title": "Introduction to Quarto = Python + R",
    "section": "If You Were Just Coding in R",
    "text": "If You Were Just Coding in R\n\n\n\n\n\nGUI wrapper around R (Integrated Development Environment = IDE)\nRun blocks of R code (from .Rmd)\n\n\n\nThe R Language \n\nProgramming language\nRscript &lt;script&gt;.r"
  },
  {
    "objectID": "w06-1/slides.html#r-on-its-own-demonstration",
    "href": "w06-1/slides.html#r-on-its-own-demonstration",
    "title": "Introduction to Quarto = Python + R",
    "section": "R-On-Its-Own Demonstration",
    "text": "R-On-Its-Own Demonstration\n\nCreate a hello.r file, with the following content:\n\n\nhello.r\n\nprint(\"Hello from R!\")\n\nNow open Terminal (in VSCode: Right click in Explorer panel → “Open in Integrated Terminal”) and execute\nRscript hello.r\nYou should see the following output:\n[1] \"Hello from R!\"\n(Plz notice the similarity with Python!)"
  },
  {
    "objectID": "w06-1/slides.html#r-in-rstudio-demonstration",
    "href": "w06-1/slides.html#r-in-rstudio-demonstration",
    "title": "Introduction to Quarto = Python + R",
    "section": "R-in-RStudio Demonstration",
    "text": "R-in-RStudio Demonstration\n\nSimilarly to Jupyter, you can think of RStudio as a fancy “wrapper” around R (an IDE)\nYou can (probably should) install RStudio locally, BUT…\nI want to instead use this as an opportunity to introduce you to Posit.Cloud!\nThe resources provided by the free account will be sufficient for any assignments/projects in my sections! (The Jeff Guarantee™)"
  },
  {
    "objectID": "w06-1/slides.html#r-markdown-.rmd-files",
    "href": "w06-1/slides.html#r-markdown-.rmd-files",
    "title": "Introduction to Quarto = Python + R",
    "section": "R Markdown (.rmd) Files",
    "text": "R Markdown (.rmd) Files\n\n(Warning: Soon to be obsolete! Replaced by very similar .qmd, Quarto Markdown 😉)\nChoose “New Blank File” → “R Markdown…” (in the Files Pane, bottom right of RStudio) to create hello.Rmd:\n\n\n\n\nhello.Rmd\n\n---\ntitle: \"Hello from R Markdown!\"\n---\n\n## Introduction\n\nHello here is some R code\n\n```{r}\nprint(\"Hello from R\")\n```\n\n## A Cool Table\n\n| Problem | Solution |\n|:-:|:-:|\n| $3^5$ | 243 |\n\n\n\n→"
  },
  {
    "objectID": "w06-1/slides.html#literate-programming-transparent-science",
    "href": "w06-1/slides.html#literate-programming-transparent-science",
    "title": "Introduction to Quarto = Python + R",
    "section": "Literate Programming = Transparent Science!",
    "text": "Literate Programming = Transparent Science!\n\nAcademic papers, video demonstrations, etc., can hide more than they reveal\n\nEx: Look at all these UI Templates on Canva!\n\nGiven a plot in some paper… How do we know they didn’t just “tweak” the settings, for hours on end, to produce the result they wanted? (\\(\\neq\\) ethical science)\nOne answer: if they provide the code that produced the figure, then we can interrogate their settings/choices, and change them, to see if the result still holds!"
  },
  {
    "objectID": "w06-1/slides.html#markdown-r-python-rightarrow-quarto",
    "href": "w06-1/slides.html#markdown-r-python-rightarrow-quarto",
    "title": "Introduction to Quarto = Python + R",
    "section": "Markdown + R + Python \\(\\rightarrow\\) Quarto",
    "text": "Markdown + R + Python \\(\\rightarrow\\) Quarto\n\nMarkdown is basically glorified plaintext: text+basic formatting (bold, italics, headings, links, tables)\nR is just a program that lives on your computer and executes R code\nPython is just a program that lives on your computer and executes Python code\nQuarto is a wrapper around R and Python, allowing you to write .qmd (Quarto MarkDown) files: Markdown documents containing R and Python code!"
  },
  {
    "objectID": "w06-1/slides.html#quarto-building-blocks",
    "href": "w06-1/slides.html#quarto-building-blocks",
    "title": "Introduction to Quarto = Python + R",
    "section": "Quarto Building Blocks",
    "text": "Quarto Building Blocks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGUI wrapper around R (Integrated Development Environment = IDE)\nRun blocks of R code (from .Rmd)\n\n\n\nThe R Language \n\nProgramming language\nRscript &lt;script&gt;.r\n\n\n\n\n\n\n+\n\n\n\n\n\n\n\n\n\nGUI wrapper around Python (IDE)\nRun blocks of Python code (from .ipynb)\n\n\n\n\nThe Python Language\n\nProgramming language\npython &lt;script&gt;.py"
  },
  {
    "objectID": "w06-1/slides.html#reproducibility-and-literate-programming",
    "href": "w06-1/slides.html#reproducibility-and-literate-programming",
    "title": "Introduction to Quarto = Python + R",
    "section": "Reproducibility and Literate Programming",
    "text": "Reproducibility and Literate Programming\n\nReproducible document: includes both the content (text, tables, figures) and the code that generated it\n\ntldr: If you’re copying-and-pasting results from your code output to your results document, a red flag should go off in your head!\n\nLiterate programming: Human-readable explanations are included alongside code, within a single document."
  },
  {
    "objectID": "w06-1/slides.html#so-what-is-r",
    "href": "w06-1/slides.html#so-what-is-r",
    "title": "Introduction to Quarto = Python + R",
    "section": "So… What is R?",
    "text": "So… What is R?\n\nPython was created mainly for software engineers\n\nStatistical computing functionality requires 3rd-party imports: NumPy, SciPy, scikit-learn\n\nR was created mainly for statisticians\n\nSoftware engineering functionality often requires 3rd-party libraries: e.g., purrr (for Python-style lambda functions)\n\nOne key implication for DSAN: probability distributions (Normal, Binomial, etc.) are built into R! (Available through NumPy in Python)"
  },
  {
    "objectID": "w06-1/slides.html#probability-distribution-example",
    "href": "w06-1/slides.html#probability-distribution-example",
    "title": "Introduction to Quarto = Python + R",
    "section": "Probability Distribution Example",
    "text": "Probability Distribution Example\nDon’t worry about the details of the code for now! Just note how…\n\n\nrbinom() is built into R, whereas\n\nset.seed(1234)\ncoin_results &lt;- rbinom(n=20, size=10, prob=0.5)\nprint(coin_results)\n\n [1] 3 5 5 6 7 6 1 4 6 5 6 5 4 7 4 7 4 4 4 4\n\nclass(coin_results)\n\n[1] \"integer\"\n\n\n\n\nCode\nlibrary(tidyverse)\ncoin_flip_df &lt;- tibble(num_heads = coin_results)\nggplot(coin_flip_df, aes(x=num_heads)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\nrng.binomial() requires NumPy\n\nimport numpy as np\nrng = np.random.default_rng(seed=1234)\nten_coin_results = rng.binomial(n=10, p=0.5, size=20)\nprint(ten_coin_results)\n\n[8 5 7 4 4 3 4 4 8 4 5 5 7 7 6 6 6 4 4 7]\n\ntype(ten_coin_results)\n\n&lt;class 'numpy.ndarray'&gt;\n\n\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nresult_plot = plt.figure()\nresult_plot.set_figheight(3.5)\ncoin_flip_df = pd.DataFrame({'num_heads': ten_coin_results})\nresult_plot = sns.histplot(data=coin_flip_df, x='num_heads')\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "w06-1/slides.html#the-moment-youve-been-waiting-for",
    "href": "w06-1/slides.html#the-moment-youve-been-waiting-for",
    "title": "Introduction to Quarto = Python + R",
    "section": "The Moment You’ve Been Waiting For 🤯",
    "text": "The Moment You’ve Been Waiting For 🤯\n\nHow did I include both R and Python code (and its outputs) in the previous slide?\nQuarto allows integration of R+Python via code blocks!\n\n\n\n\nmy_file.qmd\n\n```{python}\nprint(\"Hello from Python!\")\n```\n\n```{r}\nprint(\"Hello from R!\")\n```\n\n\n→\n\nHello from Python!\n\nHello from R!"
  },
  {
    "objectID": "w06-1/slides.html#the-takeaway-python-and-r",
    "href": "w06-1/slides.html#the-takeaway-python-and-r",
    "title": "Introduction to Quarto = Python + R",
    "section": "The Takeaway: Python and R",
    "text": "The Takeaway: Python and R\n\nQuarto enables switching from Python to R at any point!\nSo, as we start on our R journey, try to identify its strengths and weaknesses relative to Python\nGiven a particular task—web scraping, data cleaning, exploratory data analysis, training a machine learning model, etc.—learn how to do it in both Python and R, then evaluate which one “clicks” more with you\n(In other words, my ask: if you already know how to do something in Python, pls be open to learning it in R as well! You might find it’s easier—try your best to consciously avoid getting “locked into” one language)\n\n\nThis also holds for Base R to Tidyverse!\n\n\n\n\n2024 DSAN Bootcamp W6.1: Intro to Quarto"
  },
  {
    "objectID": "w06-1/index.html",
    "href": "w06-1/index.html",
    "title": "Introduction to Quarto = Python + R",
    "section": "",
    "text": "Open slides in new window →"
  },
  {
    "objectID": "w06-1/index.html#setting-up-your-environment",
    "href": "w06-1/index.html#setting-up-your-environment",
    "title": "Introduction to Quarto = Python + R",
    "section": "Setting Up Your Environment",
    "text": "Setting Up Your Environment\nTie yourself to the mast! Please!\n\n\n\nUlysses and the Sirens, J. W. Waterhouse (1891)\n\n\n\n\n\n\n\n\n\n\nDive right into coding(Bc you think data science = coding)\n\\(\\implies\\)\nSpend 75% of your time wrestling with environment issues 😔\n\n\nThink about + set up environment before diving into coding\n\\(\\implies\\)\nSpend 25% of your time wrestling with environment issues 😎"
  },
  {
    "objectID": "w06-1/index.html#if-you-were-just-coding-in-python",
    "href": "w06-1/index.html#if-you-were-just-coding-in-python",
    "title": "Introduction to Quarto = Python + R",
    "section": "If You Were Just Coding in Python",
    "text": "If You Were Just Coding in Python\n\n\n\n\n\nGUI wrapper around Python (IDE)\nRun blocks of Python code (from .ipynb)\n\n\n\n\nThe Python Language\n\nProgramming language\npython &lt;script&gt;.py"
  },
  {
    "objectID": "w06-1/index.html#python-on-its-own-demonstration",
    "href": "w06-1/index.html#python-on-its-own-demonstration",
    "title": "Introduction to Quarto = Python + R",
    "section": "Python-On-Its-Own Demonstration",
    "text": "Python-On-Its-Own Demonstration\n\n Environment! Create a bootcamp-w06 folder, and open this folder in VSCode!\nCreate a hello.py file, with the following content:\n\n\nhello.py\n\nprint(\"Hello from Python!\")\n\nNow open Terminal (in VSCode: Right click in Explorer panel → “Open in Integrated Terminal”) and execute\npython hello.py\nYou should see the following output:\nHello from Python!"
  },
  {
    "objectID": "w06-1/index.html#python-within-jupyter-demo",
    "href": "w06-1/index.html#python-within-jupyter-demo",
    "title": "Introduction to Quarto = Python + R",
    "section": "Python-Within-Jupyter Demo",
    "text": "Python-Within-Jupyter Demo\n\nStill within the Integrated Terminal, type jupyter and press Enter…\n(If Python is correctly set up and Jupyter has been correctly installed) You’ll see an interface allowing you to create Notebooks"
  },
  {
    "objectID": "w06-1/index.html#jupyter-notebooks-.ipynb-files",
    "href": "w06-1/index.html#jupyter-notebooks-.ipynb-files",
    "title": "Introduction to Quarto = Python + R",
    "section": "Jupyter Notebooks (.ipynb Files)",
    "text": "Jupyter Notebooks (.ipynb Files)\n\nYou saw these in more detail during Python section!\nAll you need to remember here is: this is a wrapper around the core python executable: all it does is\n\nTakes the code you enter into a cell\nRuns it using python &lt;temporary file&gt;.py\nStores the output within the .ipynb file itself\n\n\n\n\n\n(Make sure to terminate Jupyter using  once you’re done using it!)"
  },
  {
    "objectID": "w06-1/index.html#if-you-were-just-coding-in-r",
    "href": "w06-1/index.html#if-you-were-just-coding-in-r",
    "title": "Introduction to Quarto = Python + R",
    "section": "If You Were Just Coding in R",
    "text": "If You Were Just Coding in R\n\n\n\n\n\nGUI wrapper around R (Integrated Development Environment = IDE)\nRun blocks of R code (from .Rmd)\n\n\n\nThe R Language \n\nProgramming language\nRscript &lt;script&gt;.r"
  },
  {
    "objectID": "w06-1/index.html#r-on-its-own-demonstration",
    "href": "w06-1/index.html#r-on-its-own-demonstration",
    "title": "Introduction to Quarto = Python + R",
    "section": "R-On-Its-Own Demonstration",
    "text": "R-On-Its-Own Demonstration\n\nCreate a hello.r file, with the following content:\n\n\nhello.r\n\nprint(\"Hello from R!\")\n\nNow open Terminal (in VSCode: Right click in Explorer panel → “Open in Integrated Terminal”) and execute\nRscript hello.r\nYou should see the following output:\n[1] \"Hello from R!\"\n(Plz notice the similarity with Python!)"
  },
  {
    "objectID": "w06-1/index.html#r-in-rstudio-demonstration",
    "href": "w06-1/index.html#r-in-rstudio-demonstration",
    "title": "Introduction to Quarto = Python + R",
    "section": "R-in-RStudio Demonstration",
    "text": "R-in-RStudio Demonstration\n\nSimilarly to Jupyter, you can think of RStudio as a fancy “wrapper” around R (an IDE)\nYou can (probably should) install RStudio locally, BUT…\nI want to instead use this as an opportunity to introduce you to Posit.Cloud!\nThe resources provided by the free account will be sufficient for any assignments/projects in my sections! (The Jeff Guarantee™)"
  },
  {
    "objectID": "w06-1/index.html#r-markdown-.rmd-files",
    "href": "w06-1/index.html#r-markdown-.rmd-files",
    "title": "Introduction to Quarto = Python + R",
    "section": "R Markdown (.rmd) Files",
    "text": "R Markdown (.rmd) Files\n\n(Warning: Soon to be obsolete! Replaced by very similar .qmd, Quarto Markdown 😉)\nChoose “New Blank File” → “R Markdown…” (in the Files Pane, bottom right of RStudio) to create hello.Rmd:\n\n\n\n\nhello.Rmd\n\n---\ntitle: \"Hello from R Markdown!\"\n---\n\n## Introduction\n\nHello here is some R code\n\n```{r}\nprint(\"Hello from R\")\n```\n\n## A Cool Table\n\n| Problem | Solution |\n|:-:|:-:|\n| $3^5$ | 243 |\n\n\n\n→"
  },
  {
    "objectID": "w06-1/index.html#literate-programming-transparent-science",
    "href": "w06-1/index.html#literate-programming-transparent-science",
    "title": "Introduction to Quarto = Python + R",
    "section": "Literate Programming = Transparent Science!",
    "text": "Literate Programming = Transparent Science!\n\nAcademic papers, video demonstrations, etc., can hide more than they reveal\n\nEx: Look at all these UI Templates on Canva!\n\nGiven a plot in some paper… How do we know they didn’t just “tweak” the settings, for hours on end, to produce the result they wanted? (\\(\\neq\\) ethical science)\nOne answer: if they provide the code that produced the figure, then we can interrogate their settings/choices, and change them, to see if the result still holds!"
  },
  {
    "objectID": "w06-1/index.html#markdown-r-python-rightarrow-quarto",
    "href": "w06-1/index.html#markdown-r-python-rightarrow-quarto",
    "title": "Introduction to Quarto = Python + R",
    "section": "Markdown + R + Python \\(\\rightarrow\\) Quarto",
    "text": "Markdown + R + Python \\(\\rightarrow\\) Quarto\n\nMarkdown is basically glorified plaintext: text+basic formatting (bold, italics, headings, links, tables)\nR is just a program that lives on your computer and executes R code\nPython is just a program that lives on your computer and executes Python code\nQuarto is a wrapper around R and Python, allowing you to write .qmd (Quarto MarkDown) files: Markdown documents containing R and Python code!"
  },
  {
    "objectID": "w06-1/index.html#quarto-building-blocks",
    "href": "w06-1/index.html#quarto-building-blocks",
    "title": "Introduction to Quarto = Python + R",
    "section": "Quarto Building Blocks",
    "text": "Quarto Building Blocks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGUI wrapper around R (Integrated Development Environment = IDE)\nRun blocks of R code (from .Rmd)\n\n\n\nThe R Language \n\nProgramming language\nRscript &lt;script&gt;.r\n\n\n\n\n\n\n+\n\n\n\n\n\n\n\n\n\nGUI wrapper around Python (IDE)\nRun blocks of Python code (from .ipynb)\n\n\n\n\nThe Python Language\n\nProgramming language\npython &lt;script&gt;.py"
  },
  {
    "objectID": "w06-1/index.html#reproducibility-and-literate-programming",
    "href": "w06-1/index.html#reproducibility-and-literate-programming",
    "title": "Introduction to Quarto = Python + R",
    "section": "Reproducibility and Literate Programming",
    "text": "Reproducibility and Literate Programming\n\nReproducible document: includes both the content (text, tables, figures) and the code that generated it\n\ntldr: If you’re copying-and-pasting results from your code output to your results document, a red flag should go off in your head!\n\nLiterate programming: Human-readable explanations are included alongside code, within a single document."
  },
  {
    "objectID": "w06-1/index.html#so-what-is-r",
    "href": "w06-1/index.html#so-what-is-r",
    "title": "Introduction to Quarto = Python + R",
    "section": "So… What is R?",
    "text": "So… What is R?\n\nPython was created mainly for software engineers\n\nStatistical computing functionality requires 3rd-party imports: NumPy, SciPy, scikit-learn\n\nR was created mainly for statisticians\n\nSoftware engineering functionality often requires 3rd-party libraries: e.g., purrr (for Python-style lambda functions)\n\nOne key implication for DSAN: probability distributions (Normal, Binomial, etc.) are built into R! (Available through NumPy in Python)"
  },
  {
    "objectID": "w06-1/index.html#probability-distribution-example",
    "href": "w06-1/index.html#probability-distribution-example",
    "title": "Introduction to Quarto = Python + R",
    "section": "Probability Distribution Example",
    "text": "Probability Distribution Example\nDon’t worry about the details of the code for now! Just note how…\n\n\nrbinom() is built into R, whereas\n\nset.seed(1234)\ncoin_results &lt;- rbinom(n=20, size=10, prob=0.5)\nprint(coin_results)\n\n [1] 3 5 5 6 7 6 1 4 6 5 6 5 4 7 4 7 4 4 4 4\n\nclass(coin_results)\n\n[1] \"integer\"\n\n\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\ncoin_flip_df &lt;- tibble(num_heads = coin_results)\nggplot(coin_flip_df, aes(x=num_heads)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\nrng.binomial() requires NumPy\n\nimport numpy as np\nrng = np.random.default_rng(seed=1234)\nten_coin_results = rng.binomial(n=10, p=0.5, size=20)\nprint(ten_coin_results)\n\n[8 5 7 4 4 3 4 4 8 4 5 5 7 7 6 6 6 4 4 7]\n\ntype(ten_coin_results)\n\n&lt;class 'numpy.ndarray'&gt;\n\n\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nresult_plot = plt.figure()\nresult_plot.set_figheight(3.5)\ncoin_flip_df = pd.DataFrame({'num_heads': ten_coin_results})\nresult_plot = sns.histplot(data=coin_flip_df, x='num_heads')\n\n\n/Users/jpj/.virtualenvs/r-reticulate/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\nCode\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "w06-1/index.html#the-moment-youve-been-waiting-for",
    "href": "w06-1/index.html#the-moment-youve-been-waiting-for",
    "title": "Introduction to Quarto = Python + R",
    "section": "The Moment You’ve Been Waiting For 🤯",
    "text": "The Moment You’ve Been Waiting For 🤯\n\nHow did I include both R and Python code (and its outputs) in the previous slide?\nQuarto allows integration of R+Python via code blocks!\n\n\n\n\nmy_file.qmd\n\n```{python}\nprint(\"Hello from Python!\")\n```\n\n```{r}\nprint(\"Hello from R!\")\n```\n\n\n→\n\nHello from Python!\n\nHello from R!"
  },
  {
    "objectID": "w06-1/index.html#the-takeaway-python-and-r",
    "href": "w06-1/index.html#the-takeaway-python-and-r",
    "title": "Introduction to Quarto = Python + R",
    "section": "The Takeaway: Python and R",
    "text": "The Takeaway: Python and R\n\nQuarto enables switching from Python to R at any point!\nSo, as we start on our R journey, try to identify its strengths and weaknesses relative to Python\nGiven a particular task—web scraping, data cleaning, exploratory data analysis, training a machine learning model, etc.—learn how to do it in both Python and R, then evaluate which one “clicks” more with you\n(In other words, my ask: if you already know how to do something in Python, pls be open to learning it in R as well! You might find it’s easier—try your best to consciously avoid getting “locked into” one language)\n\n\nThis also holds for Base R to Tidyverse!"
  },
  {
    "objectID": "w06-assignment.html",
    "href": "w06-assignment.html",
    "title": "Assignment 6",
    "section": "",
    "text": "Create a vector for card suits with the variable name suits, containing the following four elements (as character strings): \"Diamonds\", \"Clubs\", \"Hearts\", \"Spades\"\n\n\nsuits &lt;- c(\"Diamonds\", \"Clubs\", \"Hearts\", \"Spades\")\n\n\nCreate a vector for card numbers with the variable name numbers, containing the character string \"Ace\" followed by the integers 2 through 10\n\n\nnumbers &lt;- c(\"Ace\", seq(2, 10))\n\n\nCreate a vector for face cards with the variable name faces, containing the character strings \"Jack\", \"Queen\", and \"King\"\n\n\nfaces &lt;- c(\"Jack\", \"Queen\", \"King\")\n\n\nCreate a new vector with the variable name card_names, formed by concatenating the elements of the faces vector to the end of the numbers vector.\n\n\ncard_names &lt;- c(numbers, faces)\ncard_names\n\n [1] \"Ace\"   \"2\"     \"3\"     \"4\"     \"5\"     \"6\"     \"7\"     \"8\"     \"9\"    \n[10] \"10\"    \"Jack\"  \"Queen\" \"King\" \n\n\n\nRepeat each element in card_names four times, and name the new variable card_names_4\n\n\ncard_names_4 &lt;- rep(card_names, 4)\n\n\nRepeat each element in suits 13 times, naming the new variable suits_13\n\n\nsuits_13 &lt;- rep(suits, 13)\nsuits_13\n\n [1] \"Diamonds\" \"Clubs\"    \"Hearts\"   \"Spades\"   \"Diamonds\" \"Clubs\"   \n [7] \"Hearts\"   \"Spades\"   \"Diamonds\" \"Clubs\"    \"Hearts\"   \"Spades\"  \n[13] \"Diamonds\" \"Clubs\"    \"Hearts\"   \"Spades\"   \"Diamonds\" \"Clubs\"   \n[19] \"Hearts\"   \"Spades\"   \"Diamonds\" \"Clubs\"    \"Hearts\"   \"Spades\"  \n[25] \"Diamonds\" \"Clubs\"    \"Hearts\"   \"Spades\"   \"Diamonds\" \"Clubs\"   \n[31] \"Hearts\"   \"Spades\"   \"Diamonds\" \"Clubs\"    \"Hearts\"   \"Spades\"  \n[37] \"Diamonds\" \"Clubs\"    \"Hearts\"   \"Spades\"   \"Diamonds\" \"Clubs\"   \n[43] \"Hearts\"   \"Spades\"   \"Diamonds\" \"Clubs\"    \"Hearts\"   \"Spades\"  \n[49] \"Diamonds\" \"Clubs\"    \"Hearts\"   \"Spades\"  \n\n\n\nCreate a data.frame variable named card_deck, constructed so that its first column is named card_name and contains the values of card_names_4, and its second column is named suit and contains the values of suits_13.\n\n\ncard_deck &lt;- data.frame(\n    card_name=card_names_4,\n    suit=suits_13\n)\ncard_deck\n\n   card_name     suit\n1        Ace Diamonds\n2          2    Clubs\n3          3   Hearts\n4          4   Spades\n5          5 Diamonds\n6          6    Clubs\n7          7   Hearts\n8          8   Spades\n9          9 Diamonds\n10        10    Clubs\n11      Jack   Hearts\n12     Queen   Spades\n13      King Diamonds\n14       Ace    Clubs\n15         2   Hearts\n16         3   Spades\n17         4 Diamonds\n18         5    Clubs\n19         6   Hearts\n20         7   Spades\n21         8 Diamonds\n22         9    Clubs\n23        10   Hearts\n24      Jack   Spades\n25     Queen Diamonds\n26      King    Clubs\n27       Ace   Hearts\n28         2   Spades\n29         3 Diamonds\n30         4    Clubs\n31         5   Hearts\n32         6   Spades\n33         7 Diamonds\n34         8    Clubs\n35         9   Hearts\n36        10   Spades\n37      Jack Diamonds\n38     Queen    Clubs\n39      King   Hearts\n40       Ace   Spades\n41         2 Diamonds\n42         3    Clubs\n43         4   Hearts\n44         5   Spades\n45         6 Diamonds\n46         7    Clubs\n47         8   Hearts\n48         9   Spades\n49        10 Diamonds\n50      Jack    Clubs\n51     Queen   Hearts\n52      King   Spades\n\n\n\nCreate a new column in card_deck named card by pasting the values in the first column (card_name) to the values in the second column (suit). Here you can use the built-in R function paste() to paste these 2 variables together.\n\n\ncard_deck[,\"card\"] &lt;- paste(card_deck$card_name, card_deck$suit)\ncard_deck\n\n   card_name     suit           card\n1        Ace Diamonds   Ace Diamonds\n2          2    Clubs        2 Clubs\n3          3   Hearts       3 Hearts\n4          4   Spades       4 Spades\n5          5 Diamonds     5 Diamonds\n6          6    Clubs        6 Clubs\n7          7   Hearts       7 Hearts\n8          8   Spades       8 Spades\n9          9 Diamonds     9 Diamonds\n10        10    Clubs       10 Clubs\n11      Jack   Hearts    Jack Hearts\n12     Queen   Spades   Queen Spades\n13      King Diamonds  King Diamonds\n14       Ace    Clubs      Ace Clubs\n15         2   Hearts       2 Hearts\n16         3   Spades       3 Spades\n17         4 Diamonds     4 Diamonds\n18         5    Clubs        5 Clubs\n19         6   Hearts       6 Hearts\n20         7   Spades       7 Spades\n21         8 Diamonds     8 Diamonds\n22         9    Clubs        9 Clubs\n23        10   Hearts      10 Hearts\n24      Jack   Spades    Jack Spades\n25     Queen Diamonds Queen Diamonds\n26      King    Clubs     King Clubs\n27       Ace   Hearts     Ace Hearts\n28         2   Spades       2 Spades\n29         3 Diamonds     3 Diamonds\n30         4    Clubs        4 Clubs\n31         5   Hearts       5 Hearts\n32         6   Spades       6 Spades\n33         7 Diamonds     7 Diamonds\n34         8    Clubs        8 Clubs\n35         9   Hearts       9 Hearts\n36        10   Spades      10 Spades\n37      Jack Diamonds  Jack Diamonds\n38     Queen    Clubs    Queen Clubs\n39      King   Hearts    King Hearts\n40       Ace   Spades     Ace Spades\n41         2 Diamonds     2 Diamonds\n42         3    Clubs        3 Clubs\n43         4   Hearts       4 Hearts\n44         5   Spades       5 Spades\n45         6 Diamonds     6 Diamonds\n46         7    Clubs        7 Clubs\n47         8   Hearts       8 Hearts\n48         9   Spades       9 Spades\n49        10 Diamonds    10 Diamonds\n50      Jack    Clubs     Jack Clubs\n51     Queen   Hearts   Queen Hearts\n52      King   Spades    King Spades\n\n\nNow you have a deck of cards, and you could use this deck of cards to find probabilities, like the probability of drawing a spade followed by a heart card!\n\n\nConsider how you might approach the problem a bit differently if you wanted to model the game Blackjack. In Blackjack, the suits are irrelevant, and only the value of each card matters. Regardless of suit, for example, if you are dealt an Ace (worth 1 or 11) and a face card (worth 10), this is called a “Natural 21” and you win automatically. We can compute the probability of this happening with a different data.frame from the previous question, since here we only care about the values\n\nCreate a vector for card numbers with the variable name “other” and add the elements as characters –&gt; “Ace”, “Two”, “Three”, “Four”, “Five”, “Six”, “Seven”, “Eight”, “Nine”, “Ten”, “Jack”, “Queen”, “King”\nNow use the function expand.grid() to create a data frame of all combinations without going through parts (d)-(i). Name this data frame as “deck 2”. Here the first value inside the function as “others” and the second value as “suits”.\nCreate a new variable call “deck _2” by pasting the first column of the “deck_2” data frame with the second column. Here you can use paste() function to paste these 2 variables together. Name the new data frame as “new_deck”. Check the length and see if it has 52 cards.\nAssuming you are playing poker, sample 5 cards from the “new_deck (don’t forget to put a set.seed()) and see if you get any poker hands. Comment on what you get. Are you any closer to any of the poker hands?\n\n\n\n\n\nFor this problem, rather than creating our own dataset from scratch, we will load and analyze a pre-existing dataset on global superstore orders.\n\nImport the data set named Global_Superstore_Orders_2016.csv using R’s built-in read.csv() function, storing the result into a data.frame variable named orders. Read more about the function by typing ??read.csv in the Console. Here, you have to define the file name and path. But if you have created a R project as mentioned in my first video, and your data set is in that folder, then you don’t have to specify the path.\n\n\nRemember to provide the header = TRUE argument to the read.csv() function.\nAlso view the head of the dataset using head()\n\n\nUse str() to check the type of each variable. You’ll see that read.csv() did not correctly identify the data types for all columns loaded from the .csv file. Which variables have inappropriate types, and what should their data types be instead?\nCreate a separate data frame variable named sales_data, containing only the following columns from the full : Order.Date, Ship.Date, State, Country, Sales, Profit, and Order.Priority\nUse str() to check the type of each variable and correct them to the correct type (factor, Date/Time,..etc.) as necessary.\n\nHint 1: to convert to Date/Time type us as.Date(). You can read more about the function by typing ??as.Date in Console. one example is done below.\nRead more: https://www.ibm.com/docs/en/cmofz/10.1.0?topic=SSQHWE_10.1.0/com.ibm.ondemand.mp.doc/arsa0257.htm\nHint 2: Also, you can see that the “Sales” and “Profit” variables are character type and they have a $ sign and a comma in the middle. To remove these and create a numeric variable you can use gsub() and as.numeric() functions.\n-&gt; gsub(pattern, replacement, string that needs to be changed)\n\n# Sales.data$Order.Date &lt;- as.Date(Sales.data$Order.Date,\"%m/%d/%y\")\n\n\nNow again Use str() on the Sales.data to confirm the correct type of each variable.\nCheck whether there are any NA/missing values in your “Sales.data”.\nTake the names of the variables into a new variable called “VarNames”. Also find out how many rows that the dataset has and assign it to the variable “length”. We may use this dataset and these variables in your next assignments.\nFind the mean of Sales when the order priority is “Critical” and “High”. Which one is higher?\nBONUS: (+1) Find the average sales in different states in the USA. Hint: you can use the aggregate() function."
  },
  {
    "objectID": "w06-assignment.html#part-2-computing-probabilities",
    "href": "w06-assignment.html#part-2-computing-probabilities",
    "title": "Assignment 6",
    "section": "",
    "text": "Consider how you might approach the problem a bit differently if you wanted to model the game Blackjack. In Blackjack, the suits are irrelevant, and only the value of each card matters. Regardless of suit, for example, if you are dealt an Ace (worth 1 or 11) and a face card (worth 10), this is called a “Natural 21” and you win automatically. We can compute the probability of this happening with a different data.frame from the previous question, since here we only care about the values\n\nCreate a vector for card numbers with the variable name “other” and add the elements as characters –&gt; “Ace”, “Two”, “Three”, “Four”, “Five”, “Six”, “Seven”, “Eight”, “Nine”, “Ten”, “Jack”, “Queen”, “King”\nNow use the function expand.grid() to create a data frame of all combinations without going through parts (d)-(i). Name this data frame as “deck 2”. Here the first value inside the function as “others” and the second value as “suits”.\nCreate a new variable call “deck _2” by pasting the first column of the “deck_2” data frame with the second column. Here you can use paste() function to paste these 2 variables together. Name the new data frame as “new_deck”. Check the length and see if it has 52 cards.\nAssuming you are playing poker, sample 5 cards from the “new_deck (don’t forget to put a set.seed()) and see if you get any poker hands. Comment on what you get. Are you any closer to any of the poker hands?"
  },
  {
    "objectID": "w06-assignment.html#problem-2",
    "href": "w06-assignment.html#problem-2",
    "title": "Assignment 6",
    "section": "",
    "text": "For this problem, rather than creating our own dataset from scratch, we will load and analyze a pre-existing dataset on global superstore orders.\n\nImport the data set named Global_Superstore_Orders_2016.csv using R’s built-in read.csv() function, storing the result into a data.frame variable named orders. Read more about the function by typing ??read.csv in the Console. Here, you have to define the file name and path. But if you have created a R project as mentioned in my first video, and your data set is in that folder, then you don’t have to specify the path.\n\n\nRemember to provide the header = TRUE argument to the read.csv() function.\nAlso view the head of the dataset using head()\n\n\nUse str() to check the type of each variable. You’ll see that read.csv() did not correctly identify the data types for all columns loaded from the .csv file. Which variables have inappropriate types, and what should their data types be instead?\nCreate a separate data frame variable named sales_data, containing only the following columns from the full : Order.Date, Ship.Date, State, Country, Sales, Profit, and Order.Priority\nUse str() to check the type of each variable and correct them to the correct type (factor, Date/Time,..etc.) as necessary.\n\nHint 1: to convert to Date/Time type us as.Date(). You can read more about the function by typing ??as.Date in Console. one example is done below.\nRead more: https://www.ibm.com/docs/en/cmofz/10.1.0?topic=SSQHWE_10.1.0/com.ibm.ondemand.mp.doc/arsa0257.htm\nHint 2: Also, you can see that the “Sales” and “Profit” variables are character type and they have a $ sign and a comma in the middle. To remove these and create a numeric variable you can use gsub() and as.numeric() functions.\n-&gt; gsub(pattern, replacement, string that needs to be changed)\n\n# Sales.data$Order.Date &lt;- as.Date(Sales.data$Order.Date,\"%m/%d/%y\")\n\n\nNow again Use str() on the Sales.data to confirm the correct type of each variable.\nCheck whether there are any NA/missing values in your “Sales.data”.\nTake the names of the variables into a new variable called “VarNames”. Also find out how many rows that the dataset has and assign it to the variable “length”. We may use this dataset and these variables in your next assignments.\nFind the mean of Sales when the order priority is “Critical” and “High”. Which one is higher?\nBONUS: (+1) Find the average sales in different states in the USA. Hint: you can use the aggregate() function."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "2024 DSAN Bootcamp: Weeks 6-8",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nAssignment 6\n\n\n \n\n\n\n\nAssignment 7\n\n\n \n\n\n\n\nControl Flow in R\n\n\nJeff Jacobs\n\n\n\n\nInstalling Quarto\n\n\nJeff Jacobs\n\n\n\n\nIntroduction to Quarto = Python + R\n\n\nJeff Jacobs\n\n\n\n\nIntroduction to R\n\n\nJeff Jacobs\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "w06-2/index.html",
    "href": "w06-2/index.html",
    "title": "Installing Quarto",
    "section": "",
    "text": "Open slides in new window →"
  },
  {
    "objectID": "w06-2/index.html#quarto-projects-in-vscode",
    "href": "w06-2/index.html#quarto-projects-in-vscode",
    "title": "Installing Quarto",
    "section": "Quarto Projects in VSCode",
    "text": "Quarto Projects in VSCode\n\nQuarto Websites \nQuarto Manuscripts \nQuarto Books"
  },
  {
    "objectID": "w06-2/index.html#quarto-projects-in-posit.cloud",
    "href": "w06-2/index.html#quarto-projects-in-posit.cloud",
    "title": "Installing Quarto",
    "section": "Quarto Projects in Posit.Cloud",
    "text": "Quarto Projects in Posit.Cloud\n\nQuarto Websites \nQuarto Manuscripts \nQuarto Books"
  },
  {
    "objectID": "w06-2/slides.html#quarto-projects-in-vscode",
    "href": "w06-2/slides.html#quarto-projects-in-vscode",
    "title": "Installing Quarto",
    "section": "Quarto Projects in VSCode",
    "text": "Quarto Projects in VSCode\n\nQuarto Websites \nQuarto Manuscripts \nQuarto Books"
  },
  {
    "objectID": "w06-2/slides.html#quarto-projects-in-posit.cloud",
    "href": "w06-2/slides.html#quarto-projects-in-posit.cloud",
    "title": "Installing Quarto",
    "section": "Quarto Projects in Posit.Cloud",
    "text": "Quarto Projects in Posit.Cloud\n\nQuarto Websites \nQuarto Manuscripts \nQuarto Books \n\n\n\n\n2024 DSAN Bootcamp W06-2: Installing Quarto"
  }
]