---
title: "Control Flow in R"
subtitle: "Week 7, Part 1"
author: "Jeff Jacobs"
institute: "DSAN Summer Bootcamp 2024<br>Georgetown University"
format:
  revealjs:
    echo: true
    code-fold: false
    slide-number: true
    df-print: kable
    html-math-method: mathjax
    scrollable: true
    footer: "2024 DSAN Bootcamp W07-1: Control Flow"
    theme: ["../_jjslides.scss"]
    output-file: "slides.html"
    include-in-header:
      text: "<link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH' crossorigin='anonymous'><link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css'><script src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js' integrity='sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz' crossorigin='anonymous'></script>"
    simplemenu:
      flat: true
      barhtml:
        header: "<div class='menubar'><span style='position: absolute; left: 8; padding-left: 8px;'><a href='./index.html'>&larr; Return to Notes</a></span><ul class='menu'></ul></div>"
      scale: 0.5
    revealjs-plugins:
      - simplemenu
  html:
    df-print: kable
    html-math-format: mathjax
    echo: true
    code-fold: true
    output-file: "index.html"
    include-in-header:
      text: "<link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH' crossorigin='anonymous'><link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css'><script src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js' integrity='sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz' crossorigin='anonymous'></script>"
---

::: {.content-visible unless-format="revealjs"}

<center>
<a class="h2" href="./slides.html" target="_blank">Open slides in new window &rarr;</a>
</center>

:::

# Control Flow {data-stack-name="Overview" .crunch-ul}

* In case you haven't heard this term...
* **Control flow** is just the idea of: how do we **control** the **flow** of program execution (individual statements or *blocks*) in [programming language]

  ::: {.columns}
  ::: {.column width="45%"}

  ![](images/control_flow.svg){width="90%" fig-align="center"}

  :::
  ::: {.column width="55%"}

  ![](images/loops.svg){width="100%"}

  :::
  :::

## Code Blocks

::: {.columns}
::: {.column width="50%"}

Python uses **Indentation** &rarr;&rarr;

```{python}
#| label: py-indentation
#| echo: true
#| code-fold: false
for i in range(5):
  print("Hello")
  print("Please run this code 5 times")
```

:::
::: {.column width="50%"}

R uses **curly braces `{}`**

```{r}
#| label: r-curly-braces
#| echo: true
#| code-fold: false
for (i in 1:5) {
  print("Hello")
  print("Please run this code 5 times")
}
```

:::
:::

# Conditional Statements {data-stack-name="Conditionals"}

## If Statements

::: {.columns}
::: {.column width="50%"}

```{python}
#| label: py-conditionals
#| echo: true
#| code-fold: false
import datetime
cur_time = datetime.datetime.now()
print(f"The current time is {cur_time.hour}:{cur_time.minute}")
if cur_time.hour < 12:
    print("Good morning!")
elif cur_time.hour < 18:
    print("Good afternoon!")
else:
    print("Good evening!")
```

:::
::: {.column width="50%"}

```{r}
#| label: r-conditionals
#| echo: true
#| code-fold: false
library(lubridate)
cur_time <- Sys.time()
writeLines(paste0(
    "The current time is ",
    hour(cur_time),":",
    minute(cur_time)
))
if (hour(cur_time) < 12) {
    print("Good morning!")
} else if (hour(cur_time) < 18) {
    print("Good afternoon!")
} else {
    print("Good evening!")
}
```

:::
:::

(We'll learn about [`lubridate` <i class='bi bi-box-arrow-up-right'></i>](https://lubridate.tidyverse.org/){target='_blank'} soon!)

## The Ternary Operator

::: {.columns}
::: {.column width="50%"}

```{python}
#| label: py-ternary
#| echo: true
#| code-fold: false
"morning" if cur_time.hour < 12 else "evening"
```

:::
::: {.column width="50%"}

```{r}
#| label: r-ternary
#| echo: true
#| code-fold: false
ifelse(
    hour(cur_time) < 12,
    "morning",
    "evening"
)
```

:::
:::

# Loops {data-stack-name="Loops"}

## For Loops: The Software Engineer's Bread and Butter

* Many different ways to loop (find one that clicks for you!)
* **For loops** often the "default" approach (because of `C`)

::: {.columns}
::: {.column width="50%"}

```{python}
#| label: py-for-loop
#| echo: true
#| code-fold: false
for i in range(1, 10):
    print(i)
```

:::
::: {.column width="50%"}

```{r}
#| label: r-for-loop
#| echo: true
#| code-fold: false
for (i in 1:10) {
    print(i)
}
```

:::
:::

## Vectorized Operations: The Data Scientist's Bread and Margarine {.smaller}

* You've been hired as the lead data scientist for a food delivery service (congrats!)
* You're given data on (a) miles traveled and (b) hours driven, for each driver
* Your goal: find the distribution of **average speeds!** 

::: {.columns}
::: {.column width="50%"}

```{python}
#| label: py-vectorized
#| echo: true
#| code-fold: false
#| output: asis
#| fig-align: center
import pandas as pd
miles_data = [11, 52, 13]
hrs_data = [2, 3, 5]
driver_df = pd.DataFrame({
    'miles': miles_data,
    'hrs': hrs_data
})
print(driver_df.to_markdown())
```

:::
::: {.column width="50%"}

```{r}
#| label: r-vectorized
#| echo: true
#| code-fold: false
miles_data <- c(11, 52, 13)
hrs_data <- c(2, 3, 5)
driver_df <- data.frame(
    miles=miles_data,
    hrs=hrs_data
)
driver_df
```

:::
:::

## The Loop Approach ![](images/50.png){width="60"} {.crunch-title}

```{r}
#| label: r-driver-loop
#| echo: true
#| code-fold: false
for (i in 1:nrow(driver_df)) {
  driver_df[i, 'mph'] <- driver_df[i, 'miles'] / driver_df[i, 'hrs']
}
driver_df
```

* It works! But CPUs have hyper-optimized **linear algebra**
* $\implies$ Operations on a **length-1000 vector** significantly faster than a loop performing an operation 1000 times

## The Vectorized Approach ðŸ’¯ {.smaller}

::: {.columns}
::: {.column width="50%"}

```{python}
#| label: py-vectorized-divide
#| echo: true
#| code-fold: false
#| output: asis
#| fig-align: center
driver_df['mph'] = driver_df['miles'] / driver_df['hrs']
print(driver_df.to_markdown())
```

:::
::: {.column width="50%"}

```{r}
#| label: r-vectorized-divide
#| echo: true
#| code-fold: false
driver_df['mph'] = driver_df$miles / driver_df$hrs
driver_df
```

:::
:::

## Vectorizing Your Brain

* Thinking in terms of vectors will be annoying at first! Many common algorithms are "naturally" described via loops...
* It will pay off over the course of your career, I promise!

::: {.columns}
::: {.column width="50%"}

```{r}
#| label: r-vectorized-demo
#| echo: true
#| code-fold: false
N <- 50000
set.seed(2024)
vec_start_time <- Sys.time()
big_vec1 <- rnorm(N, 0, 1)
big_vec2 <- rnorm(N, 0, 1)
product <- big_vec1 * big_vec2
vec_end_time <- Sys.time()
vec_end_time - vec_start_time
```

:::
::: {.column width="50%"}

```{r}
#| label: r-loop-demo
#| echo: true
#| code-fold: false
loop_start_time <- Sys.time()
product <- c()
for (i in 1:N) {
  elt1 <- big_vec1[i]
  elt2 <- big_vec2[i]
  product <- c(product, elt1 * elt2)
}
loop_end_time <- Sys.time()
loop_end_time - loop_start_time
```

:::
:::

* (For $N = 100K$, 0.006 vs. 9.08 seconds!)

## How is it *That* Much Faster?

* The long answer: take DSAN 5500 ðŸ˜œ The short answer:
* Simple math operations (addition, multiplication) are easily **parallelized** under the hood;
* **Sequential** memory reads are significantly faster than non-sequential reads---vectors can be stored in contiguous "chunks" of memory that computer can rapidly scan over
  * (Think of how it's easier to count people standing in a line than people scattered around a room!)

# Functions {data-stack-name="Functions"}

## Anonymous Functions

* In Python you **declare** the name of a function using `def`
* In R, you make the function **without a name**, then assign it to a variable:

::: {.columns}
::: {.column width="50%"}

```{python}
#| label: py-functions
#| echo: true
#| code-fold: false
def multiply_by_5(num):
  return num * 5
multiply_by_5(10)
```

:::
::: {.column width="50%"}

```{r}
#| label: r-functions
#| echo: true
#| code-fold: false
multiply_by_5 <- function(num) {
  return(num * 5)
}
multiply_by_5(10)
```

:::
:::

* (Python also has anonymous functions, via `lambda`:)

```{python}
#| label: py-lambda
#| echo: true
#| code-fold: false
double_it = lambda x: x * 2
double_it(10)
```

## Variable Scope {.crunch-title}

* Huge point (especially for Week 7 Assignment)!
* Think of functions as "mini-programs", where variables (including arguments) get **created** when the function starts and then **destroyed** when the function finishes. Compare:

::: {.columns}
::: {.column width="50%"}

```{r}
#| label: r-no-return-value
val <- c(1, 2, 3)
print(val)
update_val <- function() {
  val <- val * 5
}
update_val()
print(val) # ðŸ˜µ
```

:::
::: {.column width="50%"}

```{r}
#| label: r-return-value
val <- c(1, 2, 3)
print(val)
compute_new_val <- function(orig_val) {
  return(orig_val * 5)
}
val <- compute_new_val(val)
print(val) # ðŸ˜Ž
```

:::
:::

## Positional vs. Keyword Arguments

* Just like Python, R functions can accept two types of arguments...

::: {.columns}
::: {.column width="50%"}

**Positional** arguments are required (function call will produce error if any positional argument is missing)

```{r}
#| label: r-positional-args
#| echo: true
#| code-fold: false
div_by_2 <- function(num) {
  return(num / 2)
}
div_by_2(11)
```

:::
::: {.column width="50%"}

**Keyword** arguments are optional

```{r}
#| label: r-keyword-args
#| echo: true
#| code-fold: false
div_by_2 <- function(num, round=FALSE) {
  div_result <- num / 2
  final_result <- ifelse(round,
    round(div_result),
    div_result
  )
  return(final_result)
}
div_by_2(11, round=TRUE)
```

:::
:::

## Applying Functions to Vectors {.crunch-title .crunch-ul}

* We've been "manually" calling functions, like `func(arg)`
* What if we want to apply a function to a **vector** of elements? Ex: capitalize a big list of names

::: {.columns}
::: {.column width="50%"}

* Base R provides a family of `apply()` functions: `sapply()` for vectors; `lapply()` for lists; `apply()` for matrices (requires specifying **axis**: columns or rows)

:::
::: {.column width="50%"}

```{r}
#| label: r-capitalize
#| echo: true
#| code-fold: false
capitalize <- function(name) {
  return(tools::toTitleCase(name))
}
capitalize("jeff")
names <- c("ali", "boris", "chad")
sapply(names, capitalize)
```

:::
:::
