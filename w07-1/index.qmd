---
title: "Control Flow in R"
subtitle: "Week 7, Part 1"
author: "Jeff Jacobs"
institute: "DSAN Summer Bootcamp 2024<br>Georgetown University"
format:
  revealjs:
    echo: true
    code-fold: true
    slide-number: true
    df-print: kable
    html-math-method: mathjax
    scrollable: true
    footer: "2024 DSAN Bootcamp W07-1: Control Flow"
    theme: ["../_jjslides.scss"]
    output-file: "slides.html"
    include-in-header:
      text: "<link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH' crossorigin='anonymous'><link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css'><script src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js' integrity='sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz' crossorigin='anonymous'></script>"
    simplemenu:
      flat: true
      barhtml:
        header: "<div class='menubar'><span style='position: absolute; left: 8; padding-left: 8px;'><a href='./index.html'>&larr; Return to Notes</a></span><ul class='menu'></ul></div>"
      scale: 0.5
    revealjs-plugins:
      - simplemenu
  html:
    df-print: kable
    html-math-format: mathjax
    echo: true
    code-fold: true
    output-file: "index.html"
    include-in-header:
      text: "<link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH' crossorigin='anonymous'><link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css'><script src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js' integrity='sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz' crossorigin='anonymous'></script>"
---

::: {.content-visible unless-format="revealjs"}

<center>
<a class="h2" href="./slides.html" target="_blank">Open slides in new window &rarr;</a>
</center>

:::

# Control Flow {data-stack-name="Overview" .crunch-ul}

* In case you haven't heard this term...
* **Control flow** is just the idea of: how do we **control** the **flow** of program execution (individual statements or *blocks*) in [programming language]

  ::: {.columns}
  ::: {.column width="45%"}

  ![](images/control_flow.svg){width="90%" fig-align="center"}

  :::
  ::: {.column width="55%"}

  ![](images/loops.svg){width="100%"}

  :::
  :::

## Code Blocks

* Python: Indentation
* R: Curly braces

# Conditional Statements {data-stack-name="Conditionals"}

## If Statements

::: {.columns}
::: {.column width="50%"}

```{python}
#| label: py-conditionals
#| echo: true
#| code-fold: false
import datetime
cur_time = datetime.datetime.now()
print(f"The current time is {cur_time.hour}:{cur_time.minute}")
if cur_time.hour < 12:
    print("Good morning!")
elif cur_time.hour < 18:
    print("Good afternoon!")
else:
    print("Good evening!")
```

:::
::: {.column width="50%"}

```{r}
#| label: r-conditionals
#| echo: true
#| code-fold: false
library(lubridate)
cur_time <- Sys.time()
writeLines(paste0(
    "The current time is ",
    hour(cur_time),":",
    minute(cur_time)
))
if (hour(cur_time) < 12) {
    print("Good morning!")
} else if (hour(cur_time) < 18) {
    print("Good afternoon!")
} else {
    print("Good evening!")
}
```

:::
:::

(We'll learn about [`lubridate` <i class='bi bi-box-arrow-up-right'></i>](https://lubridate.tidyverse.org/){target='_blank'} soon!)

## The Ternary Operator

::: {.columns}
::: {.column width="50%"}

```{python}
#| label: py-ternary
#| echo: true
#| code-fold: false
"morning" if cur_time.hour < 12 else "evening"
```

:::
::: {.column width="50%"}

```{r}
#| label: r-ternary
#| echo: true
#| code-fold: false
ifelse(
    hour(cur_time) < 12,
    "morning",
    "evening"
)
```

:::
:::

# Loops {data-stack-name="Loops"}

## For Loops: The Software Engineer's Bread and Butter

* Many different ways to loop (find one that clicks for you!)
* **For loops** often the "default" approach (because of `C`)

::: {.columns}
::: {.column width="50%"}

```{python}
#| label: py-for-loop
#| echo: true
#| code-fold: false
for i in range(1, 10):
    print(i)
```

:::
::: {.column width="50%"}

```{r}
#| label: r-for-loop
#| echo: true
#| code-fold: false
for (i in 1:10) {
    print(i)
}
```

:::
:::

## Vectorized Operations: The Data Scientist's Bread and Margarine

* You've been hired as the lead data scientist for a food delivery service (congratulations!)
* You're given data on (a) number of miles traveled and (b) number of hours driven, for each driver
* Your goal: find the distribution of **average speeds!** 

::: {.columns}
::: {.column width="50%"}

```{python}
#| label: py-vectorized
#| echo: true
#| code-fold: false
import pandas as pd
miles_data = [11, 52, 13]
hrs_data = [2, 3, 5]
driver_df = pd.DataFrame({
    'miles': miles_data,
    'hrs': hrs_data
})
driver_df

```

:::
::: {.column width="50%"}

```{r}
#| label: r-vectorized
#| echo: true
#| code-fold: false
miles_data <- c(11, 52, 13)
hrs_data <- c(2, 3, 5)
driver_df <- data.frame(
    miles=miles_data,
    hrs=hrs_data
)
driver_df
```

:::
:::

## The Loop Approach

## The Vectorized Approach

```{python}
driver_df['mph'] = driver_df['miles'] / driver_df['hrs']
driver_df
```

```{r}
driver_df['mph'] = driver_df$miles / driver_df$hrs
driver_df
```

