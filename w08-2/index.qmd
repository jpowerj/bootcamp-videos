---
title: "Using APIs in R"
subtitle: "Week 8, Part 2"
author: "Jeff Jacobs"
institute: "DSAN Summer Bootcamp 2024<br>Georgetown University"
format:
  revealjs:
    echo: true
    code-fold: false
    slide-number: true
    df-print: kable
    html-math-method: mathjax
    scrollable: true
    footer: "2024 DSAN Bootcamp W08-2: Using APIs in R"
    theme: ["../_jjslides.scss"]
    output-file: "slides.html"
    include-in-header:
      text: "<link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH' crossorigin='anonymous'><link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css'><script src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js' integrity='sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz' crossorigin='anonymous'></script>"
    simplemenu:
      flat: true
      barhtml:
        header: "<div class='menubar'><span style='position: absolute; left: 8; padding-left: 8px;'><a href='./index.html'>&larr; Return to Notes</a></span><ul class='menu'></ul></div>"
      scale: 0.5
    revealjs-plugins:
      - simplemenu
  html:
    df-print: kable
    html-math-format: mathjax
    echo: true
    code-fold: true
    output-file: "index.html"
    include-in-header:
      text: "<link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH' crossorigin='anonymous'><link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css'><script src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js' integrity='sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz' crossorigin='anonymous'></script>"
---

::: {.content-visible unless-format="revealjs"}

<center>
<a class="h2" href="./slides.html" target="_blank">Open slides in new window &rarr;</a>
</center>

:::


## Web Scraping

* Fun fact: you can view a webpage's **HTML source code** by right-clicking on the page and selecting "View Source"
  * On older websites, this means we can just request page and parse the returned HTML
* Less fun fact: modern web frameworks (**React**, **Next.js**) generate pages dynamically using JS, meaning that what you see on the page will not be visible in the HTML source
  * Data scraping still possible for these sites! Using browser automation tools like <a href="https://www.selenium.dev/" target="_blank">**Selenium**</a>

## Scraping Difficulty {.crunch-title}

::: {.smallish}

| | | How is data loaded? | Solution | Example |
|:-:|-|-|-|:-:|
| üòä | **Easy** | Data in HTML source | "View Source" | [<i class="bi bi-box-arrow-up-right"></i>](https://ivanstat.com/en/gdp/ao.html){target="_blank"}
| üòê | **Medium** | Data loaded dynamically via API | "View Source", find API call, scrape programmatically | [<i class="bi bi-box-arrow-up-right"></i>](https://archive.org/details/killinghopeusmil0000blum/page/n3/mode/2up){target="_blank"}
| üò≥ | **Hard** | Data loaded dynamically [internally] via web framework | Use <a href="https://www.selenium.dev/" target="_blank">Selenium</a> | [<i class="bi bi-box-arrow-up-right"></i>](https://www.google.com/books/edition/Killing_Hope/-IbQvd13uToC?hl=en&gbpv=1&dq=killing%20hope&pg=PA215&printsec=frontcover){target="_blank"}

: {tbl-colwidths="[5,10,45,35,5]"}

:::

# APIs {.small-title .not-title-slide data-stack-name="APIs"}

**A**pplication **P**rogramming **I**nterfaces: **developer-facing** part of data pipeline/service. **Abstracts unnecessary details**:

| Example | Care about | Don't care about |
| - | - | - |
| Electrical outlet |  **Electricity** | Details of Alternating/Direct Currents |
| Water fountain | **Water** | Details of how it's pumped into the fountain |
| Car | **Accelerate**, **brake**, **reverse** | Details of combustion engine |

: {tbl-colwidths="[25,25,50]"}

<!-- * Can accept **parameters** for more fine-tuned usage:

| Example | Default | Options |
| - | - | - |
| Electrical outlet |  -->

## What Does an API Do?

Exposes **endpoints** for use by developers, without requiring them to know the nuts and bolts of your pipeline/service:

| Example | Endpoint | Not Exposed |
| - | - | - |
| Electrical outlet | **Socket** | Internal wiring |
| Water fountain | **Aerator** | Water pump |
| Car | **Pedals**, **Steering wheel**, etc. |Engine |

: {tbl-colwidths="[25,50,25]"}

::: {.notes}

When I'm teaching programming to students in refugee camps who may have never used a computer before, I try to use the idea of "robots": a program is a robot trained to sit there and wait for inputs, then process them in some way and spit out some output. APIs really capture this notion, honestly.

:::

## Example: Math API

* Base URL: <a href="https://newton.vercel.app/api/v2/" target="_blank">`https://newton.vercel.app/api/v2/`</a>
* The **endpoint**: `factor`
* The **argument**: `"x^2 - 1"`
* The **request**: <a href="https://newton.vercel.app/api/v2/factor/x^2-1" target="_blank">`https://newton.vercel.app/api/v2/factor/x^2-1`</a>
```{python}
#| label: math-api-call
#| echo: true
#| code-fold: show
import requests
response = requests.get("https://newton.vercel.app/api/v2/factor/x^2-1")
print(response.json())
```

## Math API Endpoints {.smaller}

| Operation | API Endpoint | Result |
| - | - | - |
| Simplify | `/simplify/2^2+2(2)` | `8` |
| Factor | `/factor/x^2 + 2x` | `x (x + 2)` |
| Derive | `/derive/x^2+2x` | `2 x + 2` |
| Integrate | `/integrate/x^2+2x` | `1/3 x^3 + x^2 + C` |
| Find 0's | `/zeroes/x^2+2x` | `[-2, 0]` |
| Find Tangent | `/tangent/2|x^3` | `12 x + -16` |
| Area Under Curve | `/area/2:4|x^3` | `60` |
| Cosine | `/cos/pi` | `-1` |
| Sine | `/sin/0` | `0` |
| Tangent | `/tan/0` | `0` |

<!-- | Inverse Cosine | `/arccos/1` | `0` |
Inverse Sine 	/arcsin/0 	0
Inverse Tangent 	/arctan/0 	0
Absolute Value 	/abs/-1 	1
Logarithm 	/log/2l8 	3 -->


## Authentication

* Unlike the math API, most APIs do not allow requests to be made by **anonymous** requesters, and require **authentication**.
* For example, you can access **public GitHub repos** anonymously, but to access **private GitHub repos** using GitHub's API, you'll need to authenticate that you are in fact the one making the request

## Scraping HTML with `httr2` and `xml2`

```{=html}
<a href="https://httr2.r-lib.org/" target="_blank">`httr2` Documentation</a> | <a href="https://xml2.r-lib.org/" target="_blank">`xml2` Documentation</a>
```

```{r}
#| label: httr2-example
#| echo: true
#| code-fold: show
# Get HTML
library(httr2)
request_obj <- request("https://en.wikipedia.org/wiki/Data_science")
response_obj <- req_perform(request_obj)
# Parse HTML
library(xml2)
html_obj <- response_obj %>% resp_body_html()
html_obj %>% xml_find_all('//h2//span[@class="mw-headline"]')
```

::: {.aside}

Note: `httr2` is a re-written version of the original `httr` package, which is now deprecated. You'll still see lots of code using `httr`, however, so it's good to know how both versions work. <a href="https://cran.r-project.org/web/packages/httr/vignettes/quickstart.html" target="_blank">Click here for a helpful vignette</a> on the original `httr` library.

:::

## Navigating HTML with XPath

<a href="https://devhints.io/xpath" target="_blank">XPath Cheatsheet</a>

* Notice the last line on the previous slide:

```r
html_obj %>% xml_find_all('//h2//span[@class="mw-headline"]')
```

* The string passed to `xml_find_all()` is an **XPath selector**

::: {.aside}

XPath selectors are used by many different libraries, including **Selenium** (which we'll look at very soon) and **jQuery** (a standard extension to plain JavaScript allowing easy searching/manipulation of the DOM), so it's good to learn it now!

:::

## XPath I: Selecting Elements

```html {filename="mypage.html"}
<div class="container">
  <h1>Header</h1>
  <p id="page-content">Content</p>
  <img class="footer-image m-5" src="footer.png">
</div>
```

* `'//div'` matches all elements `<div>` in the document:

    ```html
    <div class="container">
      <h1>Header</h1>
      <p id="page-content">Content</p>
      <img class="footer-image m-5" src="footer.png">
    </div>
    ```
* `'//div//img'` matches `<img>` elements which are **children of** `<div>` elements:

    ```html
    <img class="footer-image m-5" src="footer.png">
    ```

## XPath II: Filtering by Attributes {.smaller}



```html {filename="mypage.html"}
<div class="container">
  <h1>Header</h1>
  <p id="page-content">Content</p>
  <img class="footer-image m-5" src="footer.png">
</div>
```

* `'//p[id="page-content"]'` matches all `<p>` elements with id `page-content`[^unique-id]:

    ```html
    <p id="page-content">Content</p>
    ```
* Matching **classes** is a bit trickier:

    [`'//img[contains(concat(" ", normalize-space(@class), " "), " footer-image ")]'`]{.small-codeblock}

    matches all `<img>` elements with `page-content` as one of their classes[^multi-class]

    ```html
    <img class="footer-image m-5" src="footer.png">
    ```

[^unique-id]: In HTML, `id`s are required to be **unique** to particular elements (and elements cannot have more than one `id`), meaning that this should only return a **single** element, for valid HTML code (not followed by all webpages!). Also note the **double-quotes** after `id=`, which are required in XPath.

[^multi-class]: Your intuition may be to just use `'//img[@class="footer-image"]'`. Sadly, however, this will match only elements with `footer-image` as their **only** class. i.e., it will match `<img class="footer-image">` but not `<img class="footer-image another-class">`. This will usually fail, since most elements on modern webpages have several classes. For example, if the site is using <a href="https://getbootstrap.com/docs/5.3/getting-started/introduction/" target="_blank">Bootstrap</a>, `<p class="p-5 m-3"></p>` creates a paragraph element with a padding of 5 pixels and a margin of 3 pixels.

## Example: Math API

* Base URL: <a href="https://newton.vercel.app/api/v2/" target="_blank">`https://newton.vercel.app/api/v2/`</a>
* The **endpoint**: `factor`
* The **argument**: `"x^2 - 1"`
* The **request**: <a href="https://newton.vercel.app/api/v2/factor/x^2-1" target="_blank">`https://newton.vercel.app/api/v2/factor/x^2-1`</a>
```{r}
#| label: math-api-call-r
#| echo: true
#| code-fold: show
library(httr2)
request_obj <- request("https://newton.vercel.app/api/v2/factor/x^2-1")
response_obj <- req_perform(request_obj)
writeLines(response_obj %>% resp_body_string())
```
