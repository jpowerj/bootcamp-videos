---
title: "Introduction to the Tidyverse"
subtitle: "Week 7, Part 2"
author: "Jeff Jacobs"
institute: "DSAN Summer Bootcamp 2024<br>Georgetown University"
format:
  revealjs:
    tbl-cap-location: bottom
    echo: true
    code-fold: false
    slide-number: true
    df-print: kable
    html-math-method: mathjax
    scrollable: true
    footer: "2024 DSAN Bootcamp W07-2: Tidyverse"
    theme: ["../_jjslides.scss"]
    output-file: "slides.html"
    include-in-header:
      text: "<link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH' crossorigin='anonymous'><link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css'><script src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js' integrity='sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz' crossorigin='anonymous'></script>"
    simplemenu:
      flat: true
      barhtml:
        header: "<div class='menubar'><span style='position: absolute; left: 8; padding-left: 8px;'><a href='./index.html'>&larr; Return to Notes</a></span><ul class='menu'></ul></div>"
      scale: 0.5
    revealjs-plugins:
      - simplemenu
  html:
    df-print: kable
    html-math-format: mathjax
    echo: true
    code-fold: true
    output-file: "index.html"
    include-in-header:
      text: "<link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH' crossorigin='anonymous'><link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css'><script src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js' integrity='sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz' crossorigin='anonymous'></script>"
---

::: {.content-visible unless-format="revealjs"}

<center>
<a class="h2" href="./slides.html" target="_blank">Open slides in new window &rarr;</a>
</center>

:::

# Overview {data-stack-name="Tidy Data"}

* What is "tidy" data? (Next slide)
* Tidyverse = "universe" of add-on libraries for R, which **assume** tidy data so as to **streamline** data cleaning/analysis!

## Tidy Data {.smaller .crunch-title .crunch-ul .crunch-ol .crunch-p .crunch-hr .crunch-callout}

::: {.columns}
::: {.column width="50%"}

* Every **row** represents an <span class="cb1">**observation**</span>
* Every **column** represents an <span class="cb2">**attribute**</span>
* Every **cell** contains a <span class="cb3">**value**</span> [$V_{{\color{#E69F00}i}{\color{#56B4E9}j}}$]{.cb3} = attribute [$j$]{.cb2} for observation [$i$]{.cb1}

:::
::: {.column width="50%"}

| | [Var A]{.cb2} | [Var B]{.cb2} |
| - |:-:|:-:|
| [**Obs 1**]{.cb1} | [Val 1A]{.cb3} | [Val 1B]{.cb3} |
| [**Obs 2**]{.cb1} | [Val 2A]{.cb3} | [Val 2B]{.cb3} |

: A tidy dataset, with observation IDs in [orange]{.cb1}, column names in [blue]{.cb2}, and values in [green]{.cb3} {#tbl-tidy}

:::
:::

<hr>

::: {.columns}
::: {.column width="50%"}

<center>
<span class="badge text-bg-light">✅ Tidy!</span>
</center>

<!-- | id | [name]{.cb2} | [flights]{.cb2} |
|:-:| - | -:|
| [**DCA**]{.cb1} | [Reagan National]{.cb3} | [11.55]{.cb3} |
| [**BWI**]{.cb1} | [Baltimore-Wash Int'l]{.cb3} | [11.15]{.cb3} |
| [**IAD**]{.cb1} | [Dulles International]{.cb3} | [10.27]{.cb3} | -->

```{=html}
<table>
<thead>
<tr>
  <th>id</th>
  <th><span class='cb2'>name</span></th>
  <th><span class='cb2'>flights</span></th>
</tr>
</thead>
<tbody>
<tr>
  <td align="center"><b><span class='cb1'>DCA</span></b></td>
  <td><span class='cb3'>Reagan National</span></td>
  <td style="border: 4px solid green !important;"><span class='cb3'>11.55</span></td>
</tr>
<tr>
  <td><b><span class='cb1'>BWI</span></b></td>
  <td><span class='cb3'>Baltimore-Wash Int'l</span></td>
  <td><span class='cb3'>11.15</span></td>
</tr>
<tr>
  <td><b><span class='cb1'>IAD</span></b></td>
  <td><span class='cb3'>Dulles International</span></td>
  <td><span class='cb3'>10.27</span></td>
</tr>
</tbody>
</table>
```

::: {.callout-note icon="false" title="<i class='bi bi-lightbulb'></i> Tidy Data Check"}

1. Choose a row, take note of its ID
2. Go through values in row, asking yourself: **is this the value of some attribute of [observation]?**

:::

:::
::: {.column width="50%"}

<center>
<span class="badge text-bg-light">❌ Not Tidy!</span>
</center>

<!-- | id | var | value |
| - | - | - |
| `DCA` | name | Reagan National |
| `DCA` | flights | 11.55 |
| `BWI` | name | Baltimore-Wash. Int'l |
| `BWI` | flights | 11.15 |
| `IAD` | name | Dulles International |
| `IAD` | flights | 10.27 | -->

```{=html}
<table>
<thead>
<tr>
  <th>id</th>
  <th>var</th>
  <th>value</th>
</tr>
</thead>
<tbody>
<tr>
  <td align="center"><b><span class='cb1'>DCA</span></b></td>
  <td style="border: 4px solid red !important;"><span class='cb2'>name</span></td>
  <td><span class='cb3'>Reagan National</span></td>
</tr>
<tr>
  <td><b><span class='cb1'>DCA</span></b></td>
  <td><span class='cb2'>flights</span></td>
  <td><span class='cb3'>11.55</span></td>
</tr>
<tr>
  <td><b><span class='cb1'>BWI</span></b></td>
  <td><span class='cb2'>name</span></td>
  <td><span class='cb3'>Baltimore-Wash Int'l</span></td>
</tr>
<tr>
  <td><b><span class='cb1'>BWI</span></b></td>
  <td><span class='cb2'>flights</span></td>
  <td><span class='cb3'>11.15</span></td>
</tr>
<tr>
  <td><b><span class='cb1'>IAD</span></b></td>
  <td><span class='cb2'>name</span></td>
  <td><span class='cb3'>Dulles International</span></td>
</tr>
<tr>
  <td><b><span class='cb1'>IAD</span></b></td>
  <td><span class='cb2'>flights</span></td>
  <td><span class='cb3'>10.27</span></td>
</tr>
</tbody>
</table>
```

:::
:::

::: {.notes}

**Above:** <span style='border: 4px solid green;'>11.55</span> is the **value** of an **attribute** of DCA (number of flights in 2022, in millions); **Right:** <span style='border: 4px solid red;'>name</span> is **not** a property of DCA

:::

## Observation IDs Can Be Tuples!

::: {#fig-tidy-table1}

```{r}
#| label: tidy-table1
#| classes: some-right-margin
library(tidyverse)
table1
```

An example **panel** dataset in **tidy** format
:::

::: {#fig-tidy-table2}

```{r}
#| label: tidy-table2
#| classes: some-left-margin
table2 |> head(6)
```

An example **panel** dataset in **non-tidy** format
:::
:::

## So... How Do We Get Our Data Into Tidy Form?


## Tidyverse {.smaller}

::: {.hidden}

```{r}
#| label: r-source-globals
source("../_globals.r")
```

:::

* Think of data science tasks as involving **pipelines**:

```{dot}
//| fig-height: 1.5
//| echo: false
digraph G {
  rankdir=LR;
  node[label="Raw Data"] raw;
  subgraph cluster_00 {
    label="Data-Processing Pipeline 1"
    node[label="Transformation A\n(select(), filter())"] tr1;
    node[label="Transformation B\n(mutate(), summarize())"] tr2;
    tr1 -> tr2;
  }
  raw -> tr1;
  node [label="Visualization"] viz;
  tr2 -> viz;
}
```

```{dot}
//| fig-height: 1.5
//| echo: false
digraph G {
  rankdir=LR;
  node[label="Raw Data"] raw;
  subgraph cluster_00 {
    label="Data-Processing Pipeline 2"
    node[label="Transformation C\n(select(), filter())"] tr1;
    node[label="Transformation D\n(mutate(), summarize())"] tr2;
    tr1 -> tr2;
  }
  raw -> tr1;
  node [label="      Result     "] viz;
  tr2 -> viz;
}
```

* Tidyverse lets you **pipe output** from one transformation as the **input** to another:

```r
raw_data |> select() |> mutate() |> visualize()
raw_data |> filter() |> summarize() |> check_result()
```

# Tidy

| | | |
| - | - | - | - |
| [![](images/dplyr.png){width='100'}](https://dplyr.tidyverse.org){target='_blank'}<br>dplyr | [![](images/ggplot2.png){width='100'}](https://ggplot2.tidyverse.org){target='_blank'}<br>ggplot2 | 3 | 4 |
| 5 | 6 | 7 | 8 |

# The Tidyverse {.title-08 data-stack-name="The Tidyverse"}

::: columns
::: {.column width="50%"}

[tidyverse.org <i class='bi bi-box-arrow-up-right' style='font-size: 2rem;'></i>](https://www.tidyverse.org/){target='_blank'}

![](images/tidyverse_half.jpeg)

:::
::: {.column width="50%"}

* <a href="https://dplyr.tidyverse.org/" target="_blank">`dplyr.tidyverse.org` <i class='bi bi-box-arrow-up-right' style='font-size: 2rem;'></i></a>
* <a href="https://ggplot2.tidyverse.org/" target="_blank">`ggplot2.tidyverse.org` <i class='bi bi-box-arrow-up-right' style='font-size: 2rem;'></i></a>
* <a href="https://forcats.tidyverse.org/" target="_blank">forcats <i class='bi bi-box-arrow-up-right' style='font-size: 2rem;'></i></a>
* <a href="https://tibble.tidyverse.org/" target="_blank">tibble <i class='bi bi-box-arrow-up-right' style='font-size: 2rem;'></i></a>
* <a href="https://readr.tidyverse.org/" target="_blank">readr <i class='bi bi-box-arrow-up-right' style='font-size: 2rem;'></i></a>
* <a href="https://stringr.tidyverse.org/" target="_blank">`stringr` <i class='bi bi-box-arrow-up-right'></i></a>
* <a href="https://tidyr.tidyverse.org/" target="_blank">`tidyr` <i class='bi bi-box-arrow-up-right'></i></a>
* <a href="https://purrr.tidyverse.org/" target="_blank">`purrr` <i class='bi bi-box-arrow-up-right'></i></a>

:::
:::

## `tibble` {.smaller}

<a href="https://tibble.tidyverse.org/" target="_blank">Homepage</a> | <a href="https://r4ds.had.co.nz/tibbles.html" target="_blank">Overview</a> | <a href="https://raw.githubusercontent.com/rstudio/cheatsheets/main/tidyr.pdf" target="_blank">Cheatsheet</a>

::: {layout="[30,70]"}

::: {#tibble-backwards}

* Replaces `R`'s built-in `data.frame` objects, but retains syntax for backwards compatibility:

```{r}
#| label: tibble-backwards
#| echo: true
library(tibble)
data <- c(3.4,1.1,9.6)
labels <- c(0,1,0)
supervised_df <- tibble(x=data, y=labels)
supervised_df
```

:::

::: {#tribble}

* Provides a surprisingly useful function: `tribble()` (tibble defined row-by-row)

```{r}
#| label: tribble-example
#| echo: true
library(tibble)
dsan_df <- tibble::tribble(
    ~code, ~topic, ~credits,
    "dsan5000", "Data Science", 3,
    "dsan5100", "Probabilistic Modeling", 3
)
dsan_df
```

:::

:::

## `dplyr`

<a href="https://dplyr.tidyverse.org/" target="_blank">Homepage</a> | <a href="https://r4ds.had.co.nz/transform.html" target="_blank">Overview</a> | <a href="https://github.com/rstudio/cheatsheets/blob/main/data-transformation.pdf" target="_blank">Cheatsheet</a>

::: columns
::: {.column width="45%"}

**Grammar** of data manipulation (think **verbs**):

* `filter()`
* `select()`
* `arrange()`
* `mutate()`
* `summarize()`

:::
::: {.column .smallertext width="55%"}

`filter()`:

```{r}
#| label: dplyr-filter
#| echo: true
#| code-fold: show
table1 |> filter(year == 2000)
```

:::
:::

## {.smaller}

::: columns
::: {.column width="50%"}

`select()`:

```{r}
#| label: dplyr-select
#| echo: true
#| code-fold: show
table1 |> select(country)
```

:::
::: {.column width="50%"}

`arrange()`:

```{r}
#| label: dplyr-arrange
#| echo: true
#| code-fold: show
table1 |> arrange(population)
```

:::
:::

## {.smaller}

`mutate()`:

```{r}
#| label: dplyr-mutate
#| echo: true
#| code-fold: show
table1 |> mutate(newvar = 300)
```

## {.smaller}

::: columns
::: {.column width="50%"}

`summarize()`:

```{r}
#| label: dplyr-summarize
#| echo: true
#| code-fold: show
table1 |> 
  summarize(
    avg_cases = mean(cases),
    avg_pop = mean(population)
  )
```

:::
::: {.column width="50%"}

`summarize()` with **grouping**:

```{r}
#| label: dplyr-summarize-group
#| echo: true
#| code-fold: show
table1 |>
  group_by(country) |>
  summarize(
    avg_cases = mean(cases),
    avg_pop = mean(population)
  )
```

:::
:::

## The Rest of the Tidyverse

* `forcats`
* `readr`
* `stringr`
* `tidyr`
* `purrr`
* `lubridate`*

## `forcats`

<a href="https://forcats.tidyverse.org/" target="_blank">Homepage</a> | <a href="https://r4ds.had.co.nz/factors.html" target="_blank">Overview</a> | <a href="https://raw.githubusercontent.com/rstudio/cheatsheets/main/factors.pdf" target="_blank">Cheatsheet</a>

* Utilities for working with **factor** variables (`R`'s data structure for **categorical variables**)
* **factors** = **data** + **levels**:

::: {layout-ncol=2}

```{r}
#| label: forcats-example
#| echo: true
#| code-fold: show
month_levels <- c(
    "Jan", "Feb", "Mar", "Apr",
    "May", "Jun", "Jul", "Aug",
    "Sep", "Oct", "Nov", "Dec"
)
d <- c("Jan","Jan","Feb","Dec")
print(d)
```

```{r}
#| label: forcats-parse-factor
#| echo: true
#| code-fold: show
dataf <- parse_factor(
    d,
    levels=month_levels
)
print(dataf)
```

:::

## Factors for Ordering Plot Elements {.smaller}

::: columns
::: {.column width="50%"}

```{r}
#| label: relig-data
relig_summary <- gss_cat %>%
  group_by(relig) %>%
  summarise(
    age = mean(age, na.rm = TRUE),
    tvhours = mean(tvhours, na.rm = TRUE),
    n = n()
  )
relig_labs <- labs(
  x = "TV Hours / Day",
  y = "Religion"
)
```

Without `forcats`:

```{r}
#| label: relig-plot
#| fig-height: 7
#| echo: true
#| code-fold: show
relig_summary |>
  ggplot(aes(tvhours, relig)) +
  geom_point(size=g_pointsize) +
  geom_segment(aes(yend = relig, x=0, xend = tvhours)) +
  dsan_theme("half") +
  relig_labs
```
:::
::: {.column width="50%"}

With `forcats`:

```{r}
#| label: relig-plot-factors
#| fig-height: 7
#| echo: true
#| code-fold: show
relig_summary |>
  mutate(relig = fct_reorder(relig, tvhours)) |>
  ggplot(aes(x=tvhours, y=relig)) +
    geom_point(size=g_pointsize) +
    geom_segment(aes(yend = relig, x=0, xend = tvhours)) +
    dsan_theme("half") +
    relig_labs
```
:::
:::

## Sorting Barplots with `fct_infreq()`

```{r}
#| label: sorting-barplots-labs
barplot_labs <- labs(
  title = "Respondents by Marital Status",
  x = "Marital Status",
  y = "Count"
)
```

```{r}
#| label: sorting-barplots
#| echo: true
#| code-fold: show
gss_cat |>
  mutate(marital = marital |> fct_infreq() |> fct_rev()) |>
  ggplot(aes(marital)) + geom_bar() + barplot_labs +
  dsan_theme("full")
```

## Recoding/Combining Categories

::: columns
::: {.column width="50%"}

Automatically combining using `fct_lump()`:

```{r}
#| label: fct-lump
#| echo: true
#| code-fold: show
gss_cat |>
    mutate(relig = fct_lump(relig)) |>
    count(relig)
```

:::
::: {.column width="50%"}

Manually Combining using `fct_recode()`:

```{r}
#| label: fct-recode
#| echo: true
#| code-fold: true
gss_cat |>
    mutate(partyid = fct_recode(partyid,
    "Republican"  = "Strong republican",
    "Republican"  = "Not str republican",
    "Independent" = "Ind,near rep",
    "Independent" = "Ind,near dem",
    "Democrat"    = "Not str democrat",
    "Democrat"    = "Strong democrat",
    "Other"       = "No answer",
    "Other"       = "Don't know",
    "Other"       = "Other party"
  )) |>
  count(partyid)
```

:::
:::

## `readr` {.shift-footnotes .crunch-title .crunch-ul .smaller}

<a href="https://readr.tidyverse.org/" target="_blank">Homepage</a> | <a href="https://r4ds.had.co.nz/data-import.html" target="_blank">Overview</a> | <a href="https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-import.pdf" target="_blank">Cheatsheet</a>

* Two key functions: `read_csv()`, `write_csv()`[^delim]
  
  ::: {.callout-warning title="Warning! `read_csv()` vs. `read.csv()`"}
Note that these are **not the same** as `R`'s built-in `read.csv()` and `write.csv()`! The built-in `R` functions will produce a plain `data.frame` object, not a `tibble`
:::

::: {layout-ncol=2}

* Can handle URLs as well!
* **Share data+code** in seconds by using in combination with GitHub Gist
* (No more `read_csv()` path issues either...)
* [Gist dataset &rarr;](https://gist.github.com/jpowerj/fecd437b96d0954893de727383f2eaf2){target="_blank"}

```{r}
#| label: read-csv-gist
gdp_df <- read_csv("https://gist.githubusercontent.com/jpowerj/fecd437b96d0954893de727383f2eaf2/raw/fec58507f7095cb8341b229d6eb74ce53232d663/gdp_2010.csv")
gdp_df |> head(6)
```

:::

[^delim]: Plus a bonus `read_delim()` if `read_csv()` fails

## `purrr`: Functional Programming {.smaller}

<a href="https://purrr.tidyverse.org/" target="_blank">Homepage</a> | <a href="https://r4ds.had.co.nz/iteration.html" target="_blank">Overview</a> | <a href="https://github.com/rstudio/cheatsheets/blob/main/purrr.pdf" target="_blank">Cheatsheet</a> | <a href="https://jennybc.github.io/purrr-tutorial/index.html" target="_blank">Tutorials, with Applications</a>

::: columns
::: {.column width="50%"}

Provides an **anonymous function** operator `~`, arguments get named `.x`, `.y`:

```{r}
#| label: purrr-map
#| echo: true
#| code-fold: show
my_points <- c("Midterm"=18, "Final"=300)
total_points <- c("Midterm"=20, "Final"=400)
(avg_score <- map2(my_points, total_points,
  ~ list(frac=.x / .y, pct=(.x/.y)*100)))
```

:::
::: {.column width="50%"}

Along with helpful functions for transforming the output

```{r}
#| label: purrr-flatten
#| echo: true
#| code-fold: show
list_flatten(avg_score)
```

```{r}
#| label: purrr-every
#| echo: true
#| code-fold: show
every(avg_score, ~ .x$frac > 0.5)
```

:::
:::

## `lubridate`*

<a href="https://lubridate.tidyverse.org/" target="_blank">Homepage</a> | <a href="https://r4ds.had.co.nz/dates-and-times.html" target="_blank">Overview</a> | <a href="https://rawgit.com/rstudio/cheatsheets/main/lubridate.pdf" target="_blank">Cheatsheet</a>

::: {.callout-caution title="Caution: Importing `lubridate`"}
Note that `lubridate` **does not** get loaded with the other packages in the `tidyverse` when you call `library(tidyverse)`. It needs to be imported explicitly:

```r
library(tidyverse)
library(lubridate)
```

:::

# Cleaning Text Data {data-stack-name="Text Data"}

## One of the Scariest Papers of All Time {.smaller .crunch-title}

```{=html}
<style>
#fig-denny-spirling .caption {
    text-align: left !important;
}
#fig-denny-spirling figcaption {
    text-align: left !important;
}
</style>
```

*Text Preprocessing For Unsupervised Learning: Why It Matters, When It Misleads, And What To Do About It* [@denny_text_2018] ([PDF Link](https://www.cambridge.org/core/journals/political-analysis/article/abs/text-preprocessing-for-unsupervised-learning-why-it-matters-when-it-misleads-and-what-to-do-about-it/AA7D4DE0AA6AB208502515AE3EC6989E){target="_blank"})

::: {layout-ncol=2}

::: {#fig-denny-spirling}

<img src="images/denny_spirling.gif" width="200" align="center" style="margin-top: 0px !important; margin-bottom: 0px !important;"></img>

A plot where $x$-axis represents UK party manifestos (arranged on left-right ideology dimension, $y$-axis slots represent an ordering of preprocessing steps, and a filled bar means the manifesto was **placed incorrectly** on the ideological dimension when that preprocessing combination was used.
:::

![An ancient hieroglyph](images/missingno.svg){#fig-missingno fig-align="center" width="200"}

:::

## The Secret Behind All Text Analysis {.smaller .crunch-title .crunch-figures}

::: {layout="[[45],[45,10,45]]" layout-valign="center"}

::: {#fig-corpus}
::: {layout-ncol=3 layout-valign="center"}

![](images/text_as_data.jpeg){fig-align="center"}

![](images/finnegans_wake_morecrop.jpeg){fig-align="center" width="390"}

![](images/tidytext.jpeg){fig-align="center"}

:::

Excerpts from two data science textbooks, plus another book
:::

::: {#fig-dtm}

<i class="bi bi-arrow-down" style="padding-top: 10px !important;"></i>


| doc_id | `text` | `texts` | `Kékkek` | `voice` |
| - | - | - | - | - | - |
| 0 | 0 | 6 | 0 | 1 |
| 1 | 0 | 0 | 3 | 1 |
| 2 | 6 | 0 | 0 | 0 |

The **Document-Term Matrix** (**DTM**)
:::

::: {#cleaning-arrow}

<center>
<i class="bi bi-arrow-right ps-3"></i>
</center>

:::

::: {#fig-cleaned-dtm}

<i class="" style="padding-top: 10px !important;">&nbsp;</i>

| doc_id | `text` | `kekkek` | `voice` |
| - | - | - | - | - | - |
| 0 | 6 | 0 | 1 |
| 1 | 0 | 3 | 1 |
| 2 | 6 | 0 | 0 |

The **cleaned** DTM, after **lowercasing**, **lemmatization**, and **unicode standardization**
:::

:::

## *Select*ing Columns {.smaller}

`select()` lets you keep only the **columns** you care about in your current analysis:

::: {layout-ncol=2}

```{r}
#| label: tidyverse-select-load-data
library(tidyverse)
table1
```

```{r}
#| label: tidyverse-select
#| code-fold: show
table1 |> select(country, year, population)
```

:::

## *Filter*ing Rows {.smaller}

`filter()` lets you keep only the **rows** you care about in your current analysis:

::: {layout-ncol=2}

```{r}
#| label: tidyverse-filter-year
table1 |> filter(year == 2000)
```

```{r}
#| label: tidyverse-filter-country
table1 |> filter(country == "Afghanistan")
```

:::

## Merging Data {.smaller .crunch-title}

* The task: Analyze relationship between population and GDP (in 2000)
* The data: One dataset on population in 2000, another on GDP in 2000
* Let's get the data **ready for merging** using R

::: columns
::: {.column width="40%"}

```{r}
#| label: tidyverse-filter-select
df <- table1 |>
  select(country, year, population) |>
  filter(year == 2000)
df |> write_csv("assets/pop_2000.csv")
df
```

:::

::: {.column width="60%"}

```{r}
#| label: load-gdp-data
#| code-fold: show
gdp_df <- read_csv("https://gist.githubusercontent.com/jpowerj/c83e87f61c166dea8ba7e4453f08a404/raw/29b03e6320bc3ffc9f528c2ac497a21f2d801c00/gdp_2000_2010.csv")
gdp_df |> head(5)
```

:::

:::

## Selecting/Filtering in Action {.smaller}

```{r}
#| label: clean-gdp-data
#| code-fold: show
gdp_2000_df <- gdp_df |>
  select(`Country Name`,Year,Value) |>
  filter(Year == "2000") |>
  rename(country=`Country Name`, year=`Year`, gdp=`Value`)
gdp_2000_df |> write_csv("assets/gdp_2000.csv")
gdp_2000_df |> head()
```

## Recommended Language: Python {.smaller .crunch-title .crunch-ul}

Pandas provides an easy-to-use `df.merge(other_df)`!

::: columns
::: {.column width="50%"}

```{python}
#| label: py-load-pop-data
#| echo: false
#| output: false
import pandas as pd
from IPython.display import Markdown
pop_df = pd.read_csv("assets/pop_2000.csv")
```

```{python}
#| label: py-load-gdp-data
#| echo: false
gdp_df = pd.read_csv("assets/gdp_2000.csv")
```

<center>
**Left Join**
</center>

```{python}
#| label: py-merge
#| code-fold: show
merged_df = pop_df.merge(gdp_df,
  on='country', how='left', indicator=True
)
Markdown(merged_df.to_markdown())
```

:::
::: {.column width="50%"}

<center>
**Inner join** (&asymp; Intersection ($\cap$))
</center>

```{python}
#| label: py-merge-right
#| code-fold: show
merged_df = pop_df.merge(gdp_df,
  on='country', how='inner', indicator=True
)
Markdown(merged_df.to_markdown())
```

:::
:::

## Reshaping Data {.smaller}

Sometimes you can't merge because one of the datasets looks like the table on the left, but we want it to look like the table on the right

::: columns
::: {.column width="55%"}

In data-cleaning jargon, this dataset is **long** (more than one row per observation)

```{r}
#| label: r-long-data
table2 |> write_csv("assets/long_data.csv")
table2 |> head()
```

:::
::: {.column width="45%"}

In data-cleaning jargon, this dataset is **wide** (one row per obs; usually **tidy**)

```{r}
#| label: r-wide-data
table1 |> write_csv("assets/wide_data.csv")
table1 |> head()
```

:::
:::

## Wide-to-Long in R: `gather()` {.smaller}

::: columns
::: {.column width="40%"}

```{r}
#| label: r-display-wide-for-reshape
#| code-fold: show
table1
```

:::
::: {.column width="60%"}

```{r}
#| label: r-reshape
#| code-fold: show
long_df <- gather(table1,
  key = "variable",
  value = cases,
  -c(country, year)
)
long_df |> head()
```

:::
:::
