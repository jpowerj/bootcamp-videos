---
title: "Introduction to R"
subtitle: "Week 6, Part 3"
author: "Jeff Jacobs"
institute: "DSAN Summer Bootcamp 2024<br>Georgetown University"
format:
  revealjs:
    echo: true
    code-fold: true
    slide-number: true
    df-print: kable
    html-math-method: mathjax
    scrollable: true
    footer: "2024 DSAN Bootcamp W06-3: Intro to R"
    theme: ["../_jjslides.scss"]
    output-file: "slides.html"
    include-in-header:
      text: "<link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH' crossorigin='anonymous'><link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css'><script src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js' integrity='sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz' crossorigin='anonymous'></script>"
    simplemenu:
      flat: true
      barhtml:
        header: "<div class='menubar'><span style='position: absolute; left: 8; padding-left: 8px;'><a href='./index.html'>&larr; Return to Notes</a></span><ul class='menu'></ul></div>"
      scale: 0.5
    revealjs-plugins:
      - simplemenu
  html:
    df-print: kable
    html-math-format: mathjax
    echo: true
    code-fold: true
    output-file: "index.html"
    include-in-header:
      text: "<link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH' crossorigin='anonymous'><link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css'><script src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js' integrity='sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz' crossorigin='anonymous'></script>"
---

::: {.content-visible unless-format="revealjs"}

<center>
<a class="h2" href="./slides.html" target="_blank">Open slides in new window &rarr;</a>
</center>

:::

# R for Pythoners {data-stack-name="Key Differences"}

## The Most Immediately-Jarring Differences {.smaller .title-11}

::: {.columns}
::: {.column .center width="20%"}

:::
::: {.column width="40%"}

<center>
<u>**Python**</u>
</center>

:::
::: {.column width="40%"}

<center>
<u>**R**</u>
</center>

:::
:::


::: {.columns}
::: {.column width="16%"}

**Value Assignment**

:::
::: {.column width="42%"}

`<varname> = <value>`

```{python}
#| label: py-assignment
#| echo: true
#| code-fold: false
x = 3
x
```

:::
::: {.column width="42%"}

`<varname> <- <value>`

```{r}
#| label: r-assignment
#| echo: true
#| code-fold: false
x <- 3
x
```

:::
:::

::: {.columns}
::: {.column width="16%"}

**Indices**

:::
::: {.column width="42%"}

Start from **0**

```{python}
#| label: py-indices-0
#| echo: true
#| code-fold: false
my_list = ["a", "b", "c"]
my_list[0] # Accesses first element
my_list[1] # Accesses second element
```

:::
::: {.column width="42%"}

Start from **1**

```{r}
#| label: r-indices-1
#| echo: true
#| code-fold: false
my_vector <- c("a", "b", "c")
my_vector[0] # Invalid index in R!
my_vector[1] # Accesses first element
my_vector[2] # Accesses second element
```

:::
:::


::: {.columns}
::: {.column width="16%"}

**Booleans**

:::
::: {.column width="42%"}

`True`, `False`

```{python}
#| label: py-booleans
#| echo: true
#| code-fold: false
result = 2 * 2 == 4
result
```

:::
::: {.column width="42%"}

`TRUE` (or `T`), `FALSE` (or `F`)

```{r}
#| label: r-booleans
#| echo: true
#| code-fold: false
result <- 2 * 2 == 4
result
```

:::
:::

<!-- * In R, **indices** (e.g., slots in a vector) start from **1**, not **0**!
* **Assignment** operator is `<-`, not `=` (technically you can use `=`, but... try not to?)
  * Python: `x = 3`
  * R: `x <- 3`
* **Booleans**: `True` becomes `TRUE` (can use `T` as shorthand), `False` becomes `FALSE` (can use `F` as shorthand)
* **Code Blocks**: Python uses **indentation**, whereas R uses **curly braces** -->

## Everything is a Vector

* Although there are R equivalents for most Python data types, one big difference is that...
* In R, **everything is a *vector*!**

::: {.columns}
::: {.column width="33%"}

Numbers

```{r}
#| label: initializing-int
#| echo: true
#| code-fold: false
x <- 3
print(x)
class(x)
length(x)
```

:::
::: {.column width="33%"}

Length-1 Vectors

```{r}
#| label: init-len1-vector
#| echo: true
#| code-fold: false
y <- c(3)
print(y)
class(y)
length(y)
```

:::
::: {.column width="33%"}

Length-`N` Vectors

```{r}
#| label: init-vector
#| echo: true
#| code-fold: false
z <- c(3, 4, 5)
print(z)
class(z)
length(z)
```

:::
:::

## Careful With "Basic" Operators Like `+`! {.smaller}

* If you're used to Python, `+` feels like a natural way to combine things
* R forces you to think explicitly about *combining* ($\neq$ *adding*): more **restrictive** `+`
* For **strings**:

  ::: {.columns}
  ::: {.column width="50%"}

  In Python: `+` means **concatenate**

  ```{python}
  #| label: py-concat-str
  #| echo: true
  #| code-fold: false
  message = "Hi" + " " + "Jeff"
  print(message)
  ```

  :::
  ::: {.column width="50%"}

  In R: `+` is **not allowed**!

  ```{r}
  #| label: r-concat-str
  #| echo: true
  #| code-fold: false
  #| error: true
  my_message <- "Hi" + " " + "Jeff"
  ```

  :::
  :::

* For **numeric lists**...

  ::: {.columns}
  ::: {.column width="50%"}

  In Python: `+` means **concatenate**

  ```{python}
  #| label: py-concat-lists
  #| echo: true
  #| code-fold: false
  [1, 2] + [3, 4]
  ```

  :::
  ::: {.column width="50%"}

  In R: `+` means **vector addition**!

  ```{r}
  #| label: r-concat-lists
  #| echo: true
  #| code-fold: false
  #| error: true
  c(1,2) + c(3,4)
  ```

  :::
  :::

## Immensely Important Distinction {.smaller}

* Throughout bootcamp, throughout DSAN, throughout your career, you'll use **two different "flavors" of R**:

::: {.columns}
::: {.column width="50%"}

Base R

```{r}
#| label: base-r-example
#| echo: true
#| code-fold: false
base_df <- data.frame(
  x=c(1,2,3),
  y=c("a","b","c")
)
base_df
class(base_df)
```

:::
::: {.column width="50%"}

Tidyverse

```{r}
#| label: tidyverse-example
#| echo: true
#| code-fold: false
library(tidyverse) # Imports "tibble" library
tv_df <- tribble(
  ~x, ~y,
  1, "a",
  2, "b",
  3, "c"
)
tv_df
class(tv_df)
```

:::
:::

::: {.notes}

* Note: There are ways to do row-wise and column-wise table creation in both! The key difference here is just `data.frame` vs. `tibble`

:::

## Why Are There Two Ways to Do Everything? {.title-08 .crunch-title .crunch-ul}

* One key reason: tidyverse built on the **pipe operator `|>`**
* Recognition that data science often involves **pipelines**: chains of operations performed in sequence
  * E.g., scrape data &rarr; clean data &rarr; save to DB
* Base R approach:

  ```{.r}
  result <- saveToDB(cleanData(scrapeData()))
  ```

* Tidyverse approach:

  ```{.r}
  result <- scrapeData() |> cleanData() |> saveToDB()
  ```

* Now imagine pipelines used by giant companies, e.g., training Netflix's recommendation engine!

## `|>`: Good News and Bad News {.smaller}

* `f() |> g()` just means: take the **result** of the call `f()` and pass it as the **first argument** to `g()`
* Good news: this means `|>` is intuitively "backwards compatible" with many base R functions
* Bad news: requires **checking the *first* argument**:

::: {.columns}
::: {.column width="50%"}

```{r}
#| label: pipeline-valid
#| echo: true
#| code-fold: false
getSampleSize <- function() {
  return(20)
}
getSampleSize() |> rbinom(10, 0.5)
```

:::
::: {.column width="50%"}

```{r}
#| label: pipeline-invalid
#| echo: true
#| code-fold: false
getNumTrials <- function() {
  return(10)
}
getNumTrials() |> rbinom(100, 0.5)
```

:::
:::

*[Quick Note:]*

* If you've used R before, you may have seen the `%>%` operator from `tidyverse`
* ...It got so popular that it is now **built into R** (as of 2023) as `|>`!
* $\implies$ *Switch from `%>%` to `|>` for instant efficiency boost* 😎

# Back to Basics {data-stack-name="R Basics"}

## Combining Strings

* Earlier we saw how R doesn't allow `"Hi" + " " + "Jeff"`...
* So how do we combine strings?
* `paste()` and `paste0()`!

  ```{r}
  #| label: r-paste
  #| echo: true
  #| code-fold: false
  paste("Hi", "Jeff")
  paste0("Hi", " ", "Jeff")
  ```

## Python Lists $\leftrightarrow$ R Vectors

<center>
Creation
</center>

::: {.columns}
::: {.column width="50%"}

```{python}
#| label: py-list
#| echo: true
#| code-fold: false
my_list = [1, 2, 3]
my_list
```

:::
::: {.column width="50%"}

```{r}
#| label: r-vector
#| echo: true
#| code-fold: false
my_vector <- c(1, 2, 3)
my_vector
```

:::
:::

<center>
Insertion
</center>

::: {.columns}
::: {.column width="50%"}

```{python}
#| label: py-insertion
#| echo: true
#| code-fold: false
my_list.append(4)
my_list
```

:::
::: {.column width="50%"}

```{r}
#| label: r-insertion
#| echo: true
#| code-fold: false
my_vector <- c(my_vector, 4)
my_vector
```

:::
:::

<center>
Replicating Elements
</center>

::: {.columns}
::: {.column width="50%"}

```{python}
#| label: python-rep
#| echo: true
#| code-fold: false
my_list * 3
```

:::
::: {.column width="50%"}

```{r}
#| label: r-rep
#| echo: true
#| code-fold: false
rep(my_vector, 3)
```

:::
:::

<center>
Python `range()` $\leftrightarrow$ R `seq()`
</center>

::: {.columns}
::: {.column width="50%"}

```{python}
#| label: py-range
#| echo: true
#| code-fold: false
list(range(5, 10))
```

:::
::: {.column width="50%"}

```{r}
#| label: r-seq
#| echo: true
#| code-fold: false
seq(5, 10)
```

:::
:::

## `paste0()` with Vectors!

```{r}
#| label: r-paste-vectors
#| echo: true
#| code-fold: false
names <- c("Aaliya", "Brandon", "Cyrus")
paste0(names, collapse=" ")
paste0(names, collapse=", ")
paste(names, collapse=", ")
```

## Semi-Confusing Point: R Also Has Lists... {.title-09 .crunch-title .crunch-ul}

* Rarely used, despite **greater similarity** to Python lists 😵‍💫
* Key difference: all elements of a **vector** must have same type; elements of a **list** may have different types

  ```{r}
  #| label: r-list
  #| echo: true
  #| code-fold: false
  my_list <- list("A", 2, TRUE)
  my_list
  ```

* (Note how each element is a vector: `character` vector, `integer` vector, and `boolean` vector)

# DataFrames: Tabular Data Formats {data-stack-name="DataFrames"}

::: {#fig-tidy-template}

| | [Col A]{.cb1} | [Col B]{.cb1} |
| - | - | - |
| [**Row 1**]{.cb2} | [Val 1A]{.cb3} | [Val 1B]{.cb3} |
| [**Row 2**]{.cb2} | [Val 2A]{.cb3} | [Val 2B]{.cb3} |

A (tidy) tabular dataset, with **row indices** in [blue]{.cb2}, **column names** in [orange]{.cb1}, and **values** in [green]{.cb3}
:::

## Pandas `DataFrame` $\leftrightarrow$ R `data.frame`

::: {.columns}
::: {.column width="50%"}

```{python}
#| label: py-dataframe
#| echo: true
#| code-fold: false
#| output: asis
#| fig-align: center
import pandas as pd
x_data = [1, 2, 3]
y_data = [4, 5, 6]
df = pd.DataFrame({
  'x': x_data, 'y': y_data
})
print(df.to_markdown())
```

:::
::: {.column width="50%"}

```{r}
#| label: r-dataframe
#| echo: true
#| code-fold: false
x_data <- c(1, 2, 3)
y_data <- c(4, 5, 6)
df <- data.frame(
  x=x_data,
  y=y_data
)
df
```

:::
:::

## The Inevitable Headaches of Missing Data in Python {.smaller .crunch-title .title-09}

::: {.columns}
::: {.column width="50%"}

<i class='bi bi-1-circle'></i> Given a `.csv` with missing entries:

``` {.csv filename="my_data.csv"}
id,name,email
0,jeff,jeff@jeff.com
1,,nobody@no.com
3,zayd,z@email.biz
```

<i class='bi bi-2-circle'></i> Python defaults to `object` columns with `NaN` (Not-a-Number) values

```{python}
#| label: py-missing-data
#| echo: true
#| code-fold: false
import pandas as pd
df = pd.read_csv("my_data.csv")
df
df.dtypes
```

:::
::: {.column width="50%"}

<i class='bi bi-3-circle'></i> Intuitive fix usually **isn't** what you want:

```{python}
#| label: py-failed-conversion
#| echo: true
#| code-fold: false
df_bad = df.copy()
df_bad['name'] = df_bad['name'].astype(str)
df_bad
df_bad.iloc[1]['name']
```

<i class='bi bi-4-circle'></i> This alternative approach ensures missing values are **empty strings**

```{python}
#| label: py-better-conversion
#| echo: true
#| code-fold: false
df_better = df.copy()
df_better['name'] = df_better['name'].fillna('').astype(str)
df_better
df_better.iloc[1]['name']
```

:::
:::

## The Slightly-Less-Headachey R Approach! {.smaller .crunch-title .title-11}

::: {.columns}
::: {.column width="50%"}

R reads missing values in `character` columns as empty strings by default

```{r}
#| label: r-missing-data
#| echo: true
#| code-fold: false
df <- read.csv("my_data.csv")
df
df$name
# We'll learn about sapply() next week!
sapply(df, class)
```

:::
::: {.column width="50%"}

...And also has a built-in `NA` value!

``` {.csv filename="my_data_2.csv"}
id,name,email,fav_num
0,jeff,jeff@jeff.com,3.14
1,,nobody@no.com,
3,zayd,z@email.biz,11
```

```{r}
#| label: r-na-vals
#| echo: true
#| code-fold: false
df2 <- read.csv("my_data_2.csv")
df2
sapply(df2, class)
```

:::
:::

## Bonus: Built-In Matrices {.crunch-title .crunch-ul}

* For **data analysis** (cleaning, plotting), `data.frame` is usually the way to go
* For **linear algebra** (inverting, multiplying matrices)...

  ::: {.columns}
  ::: {.column width="50%"}

  Use **2D vectors**!

  ```{r}
  #| label: r-matrices
  #| echo: true
  #| code-fold: false
  my_matrix <- matrix(
    data=c(1, 2, 3, 4),
    nrow=2, ncol=2, byrow=TRUE
  )
  my_matrix
  class(my_matrix)
  ```

  :::
  ::: {.column width="50%"}

  Beware! Matrix multiply operator is `%*%`, NOT `*`:

  ```{r}
  #| label: r-matrix-mult
  #| echo: true
  #| code-fold: false
  my_matrix * my_matrix
  my_matrix %*% my_matrix
  ```

  :::
  :::
