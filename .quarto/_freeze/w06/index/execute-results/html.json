{
  "hash": "e9f2707144ce3fa4b29c9e40e93aaf20",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 6: Introduction to R + Python = Quarto\"\nauthor: \"Jeff Jacobs\"\ninstitute: \"DSAN Summer Bootcamp 2024<br>Georgetown University\"\nformat:\n  revealjs:\n    echo: true\n    code-fold: true\n    slide-number: true\n    df-print: kable\n    html-math-method: mathjax\n    scrollable: true\n    theme: [\"../_jjslides.scss\"]\n    output-file: \"slides.html\"\n    include-in-header:\n      text: \"<link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH' crossorigin='anonymous'><link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css'><script src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js' integrity='sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz' crossorigin='anonymous'></script>\"\n    simplemenu:\n      flat: true\n      barhtml:\n        header: \"<div class='menubar'><span style='position: absolute; left: 8; padding-left: 8px;'><a href='./index.html'>&larr; Return to Notes</a></span><ul class='menu'></ul></div>\"\n      scale: 0.5\n    revealjs-plugins:\n      - simplemenu\n  html:\n    df-print: kable\n    html-math-format: mathjax\n    echo: true\n    code-fold: true\n    output-file: \"index.html\"\n    include-in-header:\n      text: \"<link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH' crossorigin='anonymous'><link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css'><script src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js' integrity='sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz' crossorigin='anonymous'></script>\"\n---\n\n\n\n\n# R and Python as \"Building Blocks\" {data-stack-name=\"Building Blocks\"}\n\n## Setting Up Your Environment {.smaller}\n\n*Tie yourself to the mast! Please!*\n\n![[*Ulysses and the Sirens*](https://en.wikipedia.org/wiki/Ulysses_and_the_Sirens_(Waterhouse)){target='_blank'}, J. W. Waterhouse (1891)](images/ulysses.jpg){fig-align=\"center\"}\n\n| | | |\n| - | - | - |\n| Dive right into coding<br>(Bc you think data science = coding) | $\\implies$ | Spend 75% of your time wrestling with environment issues üòî |\n| Think about + set up environment before diving into coding | $\\implies$ | Spend 25% of your time wrestling with environment issues üòé |\n\n: {tbl-colwidths=\"[45, 10, 45]\"}\n\n## If You Were Just Coding in Python\n\n::: {#python-only-box style=\"border: 2px solid black; padding: 10px;\"}\n\n\n\n\n<center style=\"margin: 0px !important;\">\n<img src=\"images/jupyter_logo.svg\" width=\"35%\" style=\"margin: 0px;\"></img></span>\n</center>\n\n* GUI wrapper around Python (IDE)\n* Run **blocks** of Python code (from `.ipynb`)\n\n<!-- start python box inside Jupyter column -->\n::: {#python-box style=\"border: 2px solid black; margin: auto; padding: 2px;\"}\n\n<!-- <img src=\"/assets/img/python_logo.svg\" width=\"50%\" style=\"margin: 0px !important;\"></img> -->\n<a href=\"https://www.python.org/\" target=\"_blank\">The Python Language</a><img src=\"images/python_logo.svg\" style=\"float: right;\" width=\"40%\"></img>\n\n* Programming language\n* `python <script>.py`\n\n:::\n<!-- end Python box -->\n\n\n\n:::\n\n## Python-On-Its-Own Demonstration\n\n* <span class=\"badge rounded-pill text-bg-light\"><i class=\"bi bi-gear\"></i> Environment!</span> Create a `bootcamp-w06` folder, and **open this folder in VSCode!**\n* Create a `hello.py` file, with the following content:\n\n  ``` {.python filename=\"hello.py\"}\n  print(\"Hello from Python!\")\n  ```\n\n* Now open Terminal (in VSCode: Right click in Explorer panel &rarr; \"Open in Integrated Terminal\") and execute\n\n  ``` {.bash code-line-numbers=\"false\"}\n  python hello.py\n  ```\n\n* You should see the following output:\n\n  ```\n  Hello from Python!\n  ```\n\n## Python-Within-Jupyter Demo\n\n* Still within the Integrated Terminal, type `jupyter` and press Enter...\n* (If Python is correctly set up and Jupyter has been correctly installed) You'll see an interface allowing you to create **Notebooks**\n\n![](images/jupyter_screenshot.jpeg){fig-align=\"center\"}\n\n## Jupyter Notebooks (`.ipynb` Files) {.crunch-title .crunch-ul}\n\n* You saw these in more detail during Python section!\n* All you need to remember here is: this is a **wrapper** around the core `python` executable: all it does is\n  1. **Takes the code you enter into a cell**\n  2. **Runs it** using `python <temporary file>.py`\n  3. **Stores** the output within the `.ipynb` file itself\n\n![*(Make sure to terminate Jupyter using {{< kbd mac=Command-C win=Control-C >}} once you're done using it!)*](images/jupyter_hello.jpeg){fig-align=\"center\"}\n\n## If You Were Just Coding in R\n\n::: {#r-studio-only-box style=\"border: 2px solid black; padding: 10px;\"}\n\n\n<center style=\"margin: 0px !important;\">\n<img src=\"images/RStudio_logo.svg\" width=\"25%\"></img>\n</center>\n\n* GUI wrapper around R (Integrated Development Environment = IDE)\n* Run **blocks** of R code (from `.Rmd`)\n\n<!-- start R box inside RStudio box -->\n::: {#r-box style=\"border: 2px solid black; margin: auto; padding: 2px;\"}\n\n**<a href=\"https://www.r-project.org/\" target=\"_blank\">The R Language <i class=\"fa-brands fa-r-project\"></i></a>**<img src=\"images/r_logo.svg\" style=\"float: right;\" width=\"20%\"></img>\n\n* Programming language\n* `Rscript <script>.r`\n\n:::\n\n\n\n:::\n\n## R-On-Its-Own Demonstration\n\n* Create a `hello.r` file, with the following content:\n\n  ``` {.r filename=\"hello.r\"}\n  print(\"Hello from R!\")\n  ```\n\n* Now open Terminal (in VSCode: Right click in Explorer panel &rarr; \"Open in Integrated Terminal\") and execute\n\n  ``` {.bash code-line-numbers=\"false\"}\n  Rscript hello.r\n  ```\n\n* You should see the following output:\n\n  ```\n  [1] \"Hello from R!\"\n  ```\n\n* *(Plz notice the similarity with Python!)*\n\n# Rewiring Your Brain for Data Science {data-stack-name=\"Literate Programming\"}\n\n::: {style=\"font-size: 150%\"}\n\n| | | | |\n| - |:-:| - | - |\n| Python | *or* | R | ‚ùåüò™ |\n| Python | **AND** | R | ‚úÖüòé |\n\n:::\n\n## Literate Programming = Transparent Science!\n\n* Academic papers, video demonstrations, etc., can *hide* more than they *reveal*\n    * Ex: Look at all these [UI Templates](https://www.canva.com/prototypes/templates/mobile/){target='_blank'} on Canva!\n* Given a plot in some paper... How do we know they didn't just \"tweak\" the settings, for hours on end, to produce the result they wanted? ($\\neq$ ethical science)\n* One answer: if they provide the **code** that **produced** the figure, then we can **interrogate** their settings/choices, and change them, to see if the result still holds!\n\n## Markdown + R + Python $\\rightarrow$ Quarto\n\n* **Markdown** is basically glorified plaintext: text+basic formatting (bold, italics, headings, links, tables)\n* **R** is just a program that lives on your computer and executes R code\n* **Python** is just a program that lives on your computer and executes Python code\n* **Quarto** is a **wrapper** around R and Python, allowing you to write `.qmd` (**Q**uarto **M**ark**D**own) files: **Markdown documents containing R and Python code!**\n\n\n## Quarto Building Blocks {.smaller .crunch-p .crunch-images}\n\n<!-- start Quarto box -->\n::: {#quarto-box style=\"border: 2px solid black; padding: 10px;\"}\n\n<center>\n<img src=\"images/quarto_logo.svg\" width=\"20%\"></img>\n</center>\n\n<!-- start columns -->\n::: {layout=\"[48,4,48]\" layout-valign=\"center\"}\n\n::: {#r-studio-layout-cell}\n::: {#r-studio style=\"border: 2px solid black !important; padding: 8px;\"}\n\n\n<center style=\"margin: 0px !important;\">\n<img src=\"images/RStudio_logo.svg\" width=\"25%\"></img>\n</center>\n\n* GUI wrapper around R (Integrated Development Environment = IDE)\n* Run **blocks** of R code (from `.Rmd`)\n\n<!-- start R box inside RStudio box -->\n::: {#r-box style=\"border: 2px solid black; margin: auto; padding: 2px;\"}\n\n**<a href=\"https://www.r-project.org/\" target=\"_blank\">The R Language <i class=\"fa-brands fa-r-project\"></i></a>**<img src=\"images/r_logo.svg\" style=\"float: right;\" width=\"20%\"></img>\n\n* Programming language\n* `Rscript <script>.r`\n\n:::\n\n\n\n:::\n:::\n::: {#quarto-plus-box}\n\n<h3 style=\"text-align: center;\">\\+</h3>\n\n:::\n::: {#python-layout-cell}\n<!-- start Jupyter column -->\n::: {#jupyter-col style=\"border: 2px solid black; padding: 8px;\"}\n\n\n\n\n<center style=\"margin: 0px !important;\">\n<img src=\"images/jupyter_logo.svg\" width=\"35%\" style=\"margin: 0px;\"></img></span>\n</center>\n\n* GUI wrapper around Python (IDE)\n* Run **blocks** of Python code (from `.ipynb`)\n\n<!-- start python box inside Jupyter column -->\n::: {#python-box style=\"border: 2px solid black; margin: auto; padding: 2px;\"}\n\n<!-- <img src=\"/assets/img/python_logo.svg\" width=\"50%\" style=\"margin: 0px !important;\"></img> -->\n<a href=\"https://www.python.org/\" target=\"_blank\">The Python Language</a><img src=\"images/python_logo.svg\" style=\"float: right;\" width=\"40%\"></img>\n\n* Programming language\n* `python <script>.py`\n\n:::\n<!-- end Python box -->\n\n\n\n:::\n:::\n:::\n<!-- end columns -->\n\n:::\n<!-- end quarto box -->\n\n## Reproducibility and Literate Programming {.smaller .small-title}\n\n* **Reproducible document**: includes both the **content** (text, tables, figures) and the **code** or instructions required to **generate** that content.\n  * Designed to ensure that others can reproduce the same document, including its data analysis, results, and visualizations, consistently and accurately.\n  * tldr: If you're copying-and-pasting results from your **code output** to your **results document**, a red flag should go off in your head!\n* **Literate programming** is a coding and documentation approach where **code** and **explanations of the code** are combined in a single document.\n  * Emphasizes clear and understandable code by interleaving **human-readable text** (explanations, comments, and documentation) with **executable code**.\n\n## Single Source, Many Outputs {.smaller}\n\n* We can create content (text, code, results, graphics) within a **source document**, and then use different **weaving engines** to create different **document types**:\n\n::: columns\n::: {.column width=\"50%\"}\n\n* Documents\n  * Web pages (HTML)\n  * Word documents\n  * PDF files\n* Presentations\n  * HTML\n  * PowerPoint\n:::\n::: {.column width=\"50%\"}\n\n* Websites/blogs\n* Books\n* Dashboards\n* Interactive documents\n* Formatted journal articles\n\n:::\n:::\n\n# Demonstrations {data-name=\"Demonstrations\"}\n\n## VSCode Demonstrations\n\n* <span style=\"display: inline-flex;\">Quarto Websites <img src=\"images/vscode-globe.svg\" width=\"60\" style=\"margin: 0 0.125em;\"></img></span>\n* <span style=\"display: inline-flex;\">Quarto Manuscripts <img src=\"images/vscode-circuit-board.svg\" width=\"60\" style=\"margin: 0 0.13em;\"></img></span>\n* <span style=\"display: inline-flex;\">Quarto Books <img src=\"images/vscode-book.svg\" width=\"60\" style=\"margin: 0 0.125em;\"></img></span>\n\n## Posit.Cloud Demonstrations\n\n* <span style=\"display: inline-flex;\">Quarto Websites <img src=\"images/vscode-globe.svg\" width=\"60\" style=\"margin: 0 0.125em;\"></img></span>\n* <span style=\"display: inline-flex;\">Quarto Manuscripts <img src=\"images/vscode-circuit-board.svg\" width=\"60\" style=\"margin: 0 0.13em;\"></img></span>\n* <span style=\"display: inline-flex;\">Quarto Books <img src=\"images/vscode-book.svg\" width=\"60\" style=\"margin: 0 0.125em;\"></img></span>\n\n# R in Quarto {data-stack-name=\"R in Quarto\"}\n\n## So... What is R?\n\n* Python was created mainly for **software engineers**\n  * Statistical computing functionality requires **3rd-party imports**: `NumPy`, `SciPy`, `scikit-learn`\n* **R** was created mainly for **statisticians**\n  * Software engineering functionality often requires **3rd-party libraries**: e.g., `purrr` (for Python-style `lambda` functions)\n* One key implication for DSAN: **probability distributions** (Normal, Binomial, etc.) are **built into** R! (Available through `NumPy` in Python)\n\n## Probability Distribution Example {.smaller .crunch-details}\n\nDon't worry about the details of the code for now! Just note how...\n\n::: {.columns}\n::: {.column width=\"50%\"}\n\n`rbinom()` is **built into** R, whereas\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nset.seed(1234)\ncoin_results <- rbinom(n=20, size=10, prob=0.5)\nprint(coin_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 3 5 5 6 7 6 1 4 6 5 6 5 4 7 4 7 4 4 4 4\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nclass(coin_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî dplyr     1.1.2     ‚úî readr     2.1.4\n‚úî forcats   1.0.0     ‚úî stringr   1.5.1\n‚úî ggplot2   3.4.3     ‚úî tibble    3.2.1\n‚úî lubridate 1.9.2     ‚úî tidyr     1.3.0\n‚úî purrr     1.0.2     \n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\ncoin_flip_df <- tibble(num_heads = coin_results)\nggplot(coin_flip_df, aes(x=num_heads)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n::: {.column .nostretch width=\"50%\"}\n\n`rng.binomial()` requires **NumPy**\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"false\"}\nimport numpy as np\nrng = np.random.default_rng(seed=1234)\nten_coin_results = rng.binomial(n=10, p=0.5, size=20)\nprint(ten_coin_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[8 5 7 4 4 3 4 4 8 4 5 5 7 7 6 6 6 4 4 7]\n```\n\n\n:::\n\n```{.python .cell-code  code-fold=\"false\"}\ntype(ten_coin_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'numpy.ndarray'>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nresult_plot = plt.figure()\nresult_plot.set_figheight(3.5)\ncoin_flip_df = pd.DataFrame({'num_heads': ten_coin_results})\nresult_plot = sns.histplot(data=coin_flip_df, x='num_heads')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n/Users/jpj/.virtualenvs/r-reticulate/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n```\n\n\n:::\n\n```{.python .cell-code}\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=614}\n:::\n:::\n\n\n\n\n:::\n:::\n\n## The Moment You've Been Waiting For ü§Ø {.title-08}\n\n* How did I include **both** R and Python code (and its outputs) in the previous slide?\n* Quarto allows **integration** of R+Python via **code blocks!**\n\n  ::: {.columns}\n  ::: {.column width=\"47%\"}\n\n  ```` {.quarto filename=\"my_file.qmd\"}\n  ```{{python}}\n  print(\"Hello from Python!\")\n  ```\n\n  ```{{r}}\n  print(\"Hello from R!\")\n  ```\n  ````\n\n  :::\n  ::: {.column width=\"4%\"}\n\n  &rarr;\n\n  :::\n  ::: {.column width=\"47%\"}\n\n  ``` {.bash code-line-numbers=\"false\"}\n  Hello from Python!\n\n  Hello from R!\n  ```\n\n  :::\n  :::",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}